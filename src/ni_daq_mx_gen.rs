pub mod ni_daq_mx_gen {
/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int8 = ::std::os::raw::c_char;
pub type uInt8 = ::std::os::raw::c_uchar;
pub type int16 = ::std::os::raw::c_short;
pub type uInt16 = ::std::os::raw::c_ushort;
pub type int32 = ::std::os::raw::c_long;
pub type uInt32 = ::std::os::raw::c_ulong;
pub type float32 = f32;
pub type float64 = f64;
pub type int64 = ::std::os::raw::c_longlong;
pub type uInt64 = ::std::os::raw::c_ulonglong;
pub type bool32 = uInt32;
pub type TaskHandle = *mut ::std::os::raw::c_void;
pub type CalHandle = uInt32;
pub type DAQmxEveryNSamplesEventCallbackPtr =
    ::std::option::Option<unsafe extern "C" fn(taskHandle: TaskHandle,
                                               everyNsamplesEventType: int32,
                                               nSamples: uInt32,
                                               callbackData:
                                                   *mut ::std::os::raw::c_void)
                              -> int32>;
pub type DAQmxDoneEventCallbackPtr =
    ::std::option::Option<unsafe extern "C" fn(taskHandle: TaskHandle,
                                               status: int32,
                                               callbackData:
                                                   *mut ::std::os::raw::c_void)
                              -> int32>;
pub type DAQmxSignalEventCallbackPtr =
    ::std::option::Option<unsafe extern "C" fn(taskHandle: TaskHandle,
                                               signalID: int32,
                                               callbackData:
                                                   *mut ::std::os::raw::c_void)
                              -> int32>;
#[link(name =
           "C:\\Program Files (x86)\\National Instruments\\Shared\\ExternalCompilerSupport\\C\\lib64\\msvc\\NIDAQmx")]
extern "C" {
    pub fn DAQmxLoadTask(taskName: *mut ::std::os::raw::c_char,
                         taskHandle: *mut TaskHandle) -> int32;
    pub fn DAQmxCreateTask(taskName: *mut ::std::os::raw::c_char,
                           taskHandle: *mut TaskHandle) -> int32;
    pub fn DAQmxAddGlobalChansToTask(taskHandle: TaskHandle,
                                     channelNames:
                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxStartTask(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxStopTask(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxClearTask(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxWaitUntilTaskDone(taskHandle: TaskHandle, timeToWait: float64)
     -> int32;
    pub fn DAQmxIsTaskDone(taskHandle: TaskHandle, isTaskDone: *mut bool32)
     -> int32;
    pub fn DAQmxTaskControl(taskHandle: TaskHandle, action: int32) -> int32;
    pub fn DAQmxGetNthTaskChannel(taskHandle: TaskHandle, index: uInt32,
                                  buffer: *mut ::std::os::raw::c_char,
                                  bufferSize: int32) -> int32;
    pub fn DAQmxGetNthTaskDevice(taskHandle: TaskHandle, index: uInt32,
                                 buffer: *mut ::std::os::raw::c_char,
                                 bufferSize: int32) -> int32;
    pub fn DAQmxGetTaskAttribute(taskHandle: TaskHandle, attribute: int32,
                                 value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxRegisterEveryNSamplesEvent(task: TaskHandle,
                                           everyNsamplesEventType: int32,
                                           nSamples: uInt32, options: uInt32,
                                           callbackFunction:
                                               DAQmxEveryNSamplesEventCallbackPtr,
                                           callbackData:
                                               *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxRegisterDoneEvent(task: TaskHandle, options: uInt32,
                                  callbackFunction: DAQmxDoneEventCallbackPtr,
                                  callbackData: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxRegisterSignalEvent(task: TaskHandle, signalID: int32,
                                    options: uInt32,
                                    callbackFunction:
                                        DAQmxSignalEventCallbackPtr,
                                    callbackData: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxCreateAIVoltageChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    terminalConfig: int32, minVal: float64,
                                    maxVal: float64, units: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAICurrentChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    terminalConfig: int32, minVal: float64,
                                    maxVal: float64, units: int32,
                                    shuntResistorLoc: int32,
                                    extShuntResistorVal: float64,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIVoltageRMSChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       terminalConfig: int32, minVal: float64,
                                       maxVal: float64, units: int32,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAICurrentRMSChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       terminalConfig: int32, minVal: float64,
                                       maxVal: float64, units: int32,
                                       shuntResistorLoc: int32,
                                       extShuntResistorVal: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIThrmcplChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32, thermocoupleType: int32,
                                    cjcSource: int32, cjcVal: float64,
                                    cjcChannel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIRTDChan(taskHandle: TaskHandle,
                                physicalChannel: *mut ::std::os::raw::c_char,
                                nameToAssignToChannel:
                                    *mut ::std::os::raw::c_char,
                                minVal: float64, maxVal: float64,
                                units: int32, rtdType: int32,
                                resistanceConfig: int32,
                                currentExcitSource: int32,
                                currentExcitVal: float64, r0: float64)
     -> int32;
    pub fn DAQmxCreateAIThrmstrChanIex(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, resistanceConfig: int32,
                                       currentExcitSource: int32,
                                       currentExcitVal: float64, a: float64,
                                       b: float64, c: float64) -> int32;
    pub fn DAQmxCreateAIThrmstrChanVex(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, resistanceConfig: int32,
                                       voltageExcitSource: int32,
                                       voltageExcitVal: float64, a: float64,
                                       b: float64, c: float64, r1: float64)
     -> int32;
    pub fn DAQmxCreateAIFreqVoltageChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        units: int32, thresholdLevel: float64,
                                        hysteresis: float64,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIResistanceChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, resistanceConfig: int32,
                                       currentExcitSource: int32,
                                       currentExcitVal: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIStrainGageChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, strainConfig: int32,
                                       voltageExcitSource: int32,
                                       voltageExcitVal: float64,
                                       gageFactor: float64,
                                       initialBridgeVoltage: float64,
                                       nominalGageResistance: float64,
                                       poissonRatio: float64,
                                       leadWireResistance: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIRosetteStrainGageChan(taskHandle: TaskHandle,
                                              physicalChannel:
                                                  *mut ::std::os::raw::c_char,
                                              nameToAssignToChannel:
                                                  *mut ::std::os::raw::c_char,
                                              minVal: float64,
                                              maxVal: float64,
                                              rosetteType: int32,
                                              gageOrientation: float64,
                                              rosetteMeasTypes: *mut int32,
                                              numRosetteMeasTypes: uInt32,
                                              strainConfig: int32,
                                              voltageExcitSource: int32,
                                              voltageExcitVal: float64,
                                              gageFactor: float64,
                                              nominalGageResistance: float64,
                                              poissonRatio: float64,
                                              leadWireResistance: float64)
     -> int32;
    pub fn DAQmxCreateAIForceBridgeTwoPointLinChan(taskHandle: TaskHandle,
                                                   physicalChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   nameToAssignToChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   minVal: float64,
                                                   maxVal: float64,
                                                   units: int32,
                                                   bridgeConfig: int32,
                                                   voltageExcitSource: int32,
                                                   voltageExcitVal: float64,
                                                   nominalBridgeResistance:
                                                       float64,
                                                   firstElectricalVal:
                                                       float64,
                                                   secondElectricalVal:
                                                       float64,
                                                   electricalUnits: int32,
                                                   firstPhysicalVal: float64,
                                                   secondPhysicalVal: float64,
                                                   physicalUnits: int32,
                                                   customScaleName:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIForceBridgeTableChan(taskHandle: TaskHandle,
                                             physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             nameToAssignToChannel:
                                                 *mut ::std::os::raw::c_char,
                                             minVal: float64, maxVal: float64,
                                             units: int32,
                                             bridgeConfig: int32,
                                             voltageExcitSource: int32,
                                             voltageExcitVal: float64,
                                             nominalBridgeResistance: float64,
                                             electricalVals: *mut float64,
                                             numElectricalVals: uInt32,
                                             electricalUnits: int32,
                                             physicalVals: *mut float64,
                                             numPhysicalVals: uInt32,
                                             physicalUnits: int32,
                                             customScaleName:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIForceBridgePolynomialChan(taskHandle: TaskHandle,
                                                  physicalChannel:
                                                      *mut ::std::os::raw::c_char,
                                                  nameToAssignToChannel:
                                                      *mut ::std::os::raw::c_char,
                                                  minVal: float64,
                                                  maxVal: float64,
                                                  units: int32,
                                                  bridgeConfig: int32,
                                                  voltageExcitSource: int32,
                                                  voltageExcitVal: float64,
                                                  nominalBridgeResistance:
                                                      float64,
                                                  forwardCoeffs: *mut float64,
                                                  numForwardCoeffs: uInt32,
                                                  reverseCoeffs: *mut float64,
                                                  numReverseCoeffs: uInt32,
                                                  electricalUnits: int32,
                                                  physicalUnits: int32,
                                                  customScaleName:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIPressureBridgeTwoPointLinChan(taskHandle: TaskHandle,
                                                      physicalChannel:
                                                          *mut ::std::os::raw::c_char,
                                                      nameToAssignToChannel:
                                                          *mut ::std::os::raw::c_char,
                                                      minVal: float64,
                                                      maxVal: float64,
                                                      units: int32,
                                                      bridgeConfig: int32,
                                                      voltageExcitSource:
                                                          int32,
                                                      voltageExcitVal:
                                                          float64,
                                                      nominalBridgeResistance:
                                                          float64,
                                                      firstElectricalVal:
                                                          float64,
                                                      secondElectricalVal:
                                                          float64,
                                                      electricalUnits: int32,
                                                      firstPhysicalVal:
                                                          float64,
                                                      secondPhysicalVal:
                                                          float64,
                                                      physicalUnits: int32,
                                                      customScaleName:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIPressureBridgeTableChan(taskHandle: TaskHandle,
                                                physicalChannel:
                                                    *mut ::std::os::raw::c_char,
                                                nameToAssignToChannel:
                                                    *mut ::std::os::raw::c_char,
                                                minVal: float64,
                                                maxVal: float64, units: int32,
                                                bridgeConfig: int32,
                                                voltageExcitSource: int32,
                                                voltageExcitVal: float64,
                                                nominalBridgeResistance:
                                                    float64,
                                                electricalVals: *mut float64,
                                                numElectricalVals: uInt32,
                                                electricalUnits: int32,
                                                physicalVals: *mut float64,
                                                numPhysicalVals: uInt32,
                                                physicalUnits: int32,
                                                customScaleName:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIPressureBridgePolynomialChan(taskHandle: TaskHandle,
                                                     physicalChannel:
                                                         *mut ::std::os::raw::c_char,
                                                     nameToAssignToChannel:
                                                         *mut ::std::os::raw::c_char,
                                                     minVal: float64,
                                                     maxVal: float64,
                                                     units: int32,
                                                     bridgeConfig: int32,
                                                     voltageExcitSource:
                                                         int32,
                                                     voltageExcitVal: float64,
                                                     nominalBridgeResistance:
                                                         float64,
                                                     forwardCoeffs:
                                                         *mut float64,
                                                     numForwardCoeffs: uInt32,
                                                     reverseCoeffs:
                                                         *mut float64,
                                                     numReverseCoeffs: uInt32,
                                                     electricalUnits: int32,
                                                     physicalUnits: int32,
                                                     customScaleName:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAITorqueBridgeTwoPointLinChan(taskHandle: TaskHandle,
                                                    physicalChannel:
                                                        *mut ::std::os::raw::c_char,
                                                    nameToAssignToChannel:
                                                        *mut ::std::os::raw::c_char,
                                                    minVal: float64,
                                                    maxVal: float64,
                                                    units: int32,
                                                    bridgeConfig: int32,
                                                    voltageExcitSource: int32,
                                                    voltageExcitVal: float64,
                                                    nominalBridgeResistance:
                                                        float64,
                                                    firstElectricalVal:
                                                        float64,
                                                    secondElectricalVal:
                                                        float64,
                                                    electricalUnits: int32,
                                                    firstPhysicalVal: float64,
                                                    secondPhysicalVal:
                                                        float64,
                                                    physicalUnits: int32,
                                                    customScaleName:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAITorqueBridgeTableChan(taskHandle: TaskHandle,
                                              physicalChannel:
                                                  *mut ::std::os::raw::c_char,
                                              nameToAssignToChannel:
                                                  *mut ::std::os::raw::c_char,
                                              minVal: float64,
                                              maxVal: float64, units: int32,
                                              bridgeConfig: int32,
                                              voltageExcitSource: int32,
                                              voltageExcitVal: float64,
                                              nominalBridgeResistance:
                                                  float64,
                                              electricalVals: *mut float64,
                                              numElectricalVals: uInt32,
                                              electricalUnits: int32,
                                              physicalVals: *mut float64,
                                              numPhysicalVals: uInt32,
                                              physicalUnits: int32,
                                              customScaleName:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAITorqueBridgePolynomialChan(taskHandle: TaskHandle,
                                                   physicalChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   nameToAssignToChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   minVal: float64,
                                                   maxVal: float64,
                                                   units: int32,
                                                   bridgeConfig: int32,
                                                   voltageExcitSource: int32,
                                                   voltageExcitVal: float64,
                                                   nominalBridgeResistance:
                                                       float64,
                                                   forwardCoeffs:
                                                       *mut float64,
                                                   numForwardCoeffs: uInt32,
                                                   reverseCoeffs:
                                                       *mut float64,
                                                   numReverseCoeffs: uInt32,
                                                   electricalUnits: int32,
                                                   physicalUnits: int32,
                                                   customScaleName:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIBridgeChan(taskHandle: TaskHandle,
                                   physicalChannel:
                                       *mut ::std::os::raw::c_char,
                                   nameToAssignToChannel:
                                       *mut ::std::os::raw::c_char,
                                   minVal: float64, maxVal: float64,
                                   units: int32, bridgeConfig: int32,
                                   voltageExcitSource: int32,
                                   voltageExcitVal: float64,
                                   nominalBridgeResistance: float64,
                                   customScaleName:
                                       *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIVoltageChanWithExcit(taskHandle: TaskHandle,
                                             physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             nameToAssignToChannel:
                                                 *mut ::std::os::raw::c_char,
                                             terminalConfig: int32,
                                             minVal: float64, maxVal: float64,
                                             units: int32,
                                             bridgeConfig: int32,
                                             voltageExcitSource: int32,
                                             voltageExcitVal: float64,
                                             useExcitForScaling: bool32,
                                             customScaleName:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAITempBuiltInSensorChan(taskHandle: TaskHandle,
                                              physicalChannel:
                                                  *mut ::std::os::raw::c_char,
                                              nameToAssignToChannel:
                                                  *mut ::std::os::raw::c_char,
                                              units: int32) -> int32;
    pub fn DAQmxCreateAIAccelChan(taskHandle: TaskHandle,
                                  physicalChannel:
                                      *mut ::std::os::raw::c_char,
                                  nameToAssignToChannel:
                                      *mut ::std::os::raw::c_char,
                                  terminalConfig: int32, minVal: float64,
                                  maxVal: float64, units: int32,
                                  sensitivity: float64,
                                  sensitivityUnits: int32,
                                  currentExcitSource: int32,
                                  currentExcitVal: float64,
                                  customScaleName:
                                      *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIVelocityIEPEChan(taskHandle: TaskHandle,
                                         physicalChannel:
                                             *mut ::std::os::raw::c_char,
                                         nameToAssignToChannel:
                                             *mut ::std::os::raw::c_char,
                                         terminalConfig: int32,
                                         minVal: float64, maxVal: float64,
                                         units: int32, sensitivity: float64,
                                         sensitivityUnits: int32,
                                         currentExcitSource: int32,
                                         currentExcitVal: float64,
                                         customScaleName:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIForceIEPEChan(taskHandle: TaskHandle,
                                      physicalChannel:
                                          *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      terminalConfig: int32, minVal: float64,
                                      maxVal: float64, units: int32,
                                      sensitivity: float64,
                                      sensitivityUnits: int32,
                                      currentExcitSource: int32,
                                      currentExcitVal: float64,
                                      customScaleName:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIMicrophoneChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       terminalConfig: int32, units: int32,
                                       micSensitivity: float64,
                                       maxSndPressLevel: float64,
                                       currentExcitSource: int32,
                                       currentExcitVal: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIChargeChan(taskHandle: TaskHandle,
                                   physicalChannel:
                                       *mut ::std::os::raw::c_char,
                                   nameToAssignToChannel:
                                       *mut ::std::os::raw::c_char,
                                   terminalConfig: int32, minVal: float64,
                                   maxVal: float64, units: int32,
                                   customScaleName:
                                       *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIAccelChargeChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        terminalConfig: int32,
                                        minVal: float64, maxVal: float64,
                                        units: int32, sensitivity: float64,
                                        sensitivityUnits: int32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIAccel4WireDCVoltageChan(taskHandle: TaskHandle,
                                                physicalChannel:
                                                    *mut ::std::os::raw::c_char,
                                                nameToAssignToChannel:
                                                    *mut ::std::os::raw::c_char,
                                                terminalConfig: int32,
                                                minVal: float64,
                                                maxVal: float64, units: int32,
                                                sensitivity: float64,
                                                sensitivityUnits: int32,
                                                voltageExcitSource: int32,
                                                voltageExcitVal: float64,
                                                useExcitForScaling: bool32,
                                                customScaleName:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIPosLVDTChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32, sensitivity: float64,
                                    sensitivityUnits: int32,
                                    voltageExcitSource: int32,
                                    voltageExcitVal: float64,
                                    voltageExcitFreq: float64,
                                    ACExcitWireMode: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIPosRVDTChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32, sensitivity: float64,
                                    sensitivityUnits: int32,
                                    voltageExcitSource: int32,
                                    voltageExcitVal: float64,
                                    voltageExcitFreq: float64,
                                    ACExcitWireMode: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIPosEddyCurrProxProbeChan(taskHandle: TaskHandle,
                                                 physicalChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 nameToAssignToChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 minVal: float64,
                                                 maxVal: float64,
                                                 units: int32,
                                                 sensitivity: float64,
                                                 sensitivityUnits: int32,
                                                 customScaleName:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIDeviceTempChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       units: int32) -> int32;
    pub fn DAQmxCreateTEDSAIVoltageChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        terminalConfig: int32,
                                        minVal: float64, maxVal: float64,
                                        units: int32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAICurrentChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        terminalConfig: int32,
                                        minVal: float64, maxVal: float64,
                                        units: int32, shuntResistorLoc: int32,
                                        extShuntResistorVal: float64,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIThrmcplChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        units: int32, cjcSource: int32,
                                        cjcVal: float64,
                                        cjcChannel:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIRTDChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32, resistanceConfig: int32,
                                    currentExcitSource: int32,
                                    currentExcitVal: float64) -> int32;
    pub fn DAQmxCreateTEDSAIThrmstrChanIex(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           minVal: float64, maxVal: float64,
                                           units: int32,
                                           resistanceConfig: int32,
                                           currentExcitSource: int32,
                                           currentExcitVal: float64) -> int32;
    pub fn DAQmxCreateTEDSAIThrmstrChanVex(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           minVal: float64, maxVal: float64,
                                           units: int32,
                                           resistanceConfig: int32,
                                           voltageExcitSource: int32,
                                           voltageExcitVal: float64,
                                           r1: float64) -> int32;
    pub fn DAQmxCreateTEDSAIResistanceChan(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           minVal: float64, maxVal: float64,
                                           units: int32,
                                           resistanceConfig: int32,
                                           currentExcitSource: int32,
                                           currentExcitVal: float64,
                                           customScaleName:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIStrainGageChan(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           minVal: float64, maxVal: float64,
                                           units: int32,
                                           voltageExcitSource: int32,
                                           voltageExcitVal: float64,
                                           initialBridgeVoltage: float64,
                                           leadWireResistance: float64,
                                           customScaleName:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIForceBridgeChan(taskHandle: TaskHandle,
                                            physicalChannel:
                                                *mut ::std::os::raw::c_char,
                                            nameToAssignToChannel:
                                                *mut ::std::os::raw::c_char,
                                            minVal: float64, maxVal: float64,
                                            units: int32,
                                            voltageExcitSource: int32,
                                            voltageExcitVal: float64,
                                            customScaleName:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIPressureBridgeChan(taskHandle: TaskHandle,
                                               physicalChannel:
                                                   *mut ::std::os::raw::c_char,
                                               nameToAssignToChannel:
                                                   *mut ::std::os::raw::c_char,
                                               minVal: float64,
                                               maxVal: float64, units: int32,
                                               voltageExcitSource: int32,
                                               voltageExcitVal: float64,
                                               customScaleName:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAITorqueBridgeChan(taskHandle: TaskHandle,
                                             physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             nameToAssignToChannel:
                                                 *mut ::std::os::raw::c_char,
                                             minVal: float64, maxVal: float64,
                                             units: int32,
                                             voltageExcitSource: int32,
                                             voltageExcitVal: float64,
                                             customScaleName:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIBridgeChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32,
                                       voltageExcitSource: int32,
                                       voltageExcitVal: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIVoltageChanWithExcit(taskHandle: TaskHandle,
                                                 physicalChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 nameToAssignToChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 terminalConfig: int32,
                                                 minVal: float64,
                                                 maxVal: float64,
                                                 units: int32,
                                                 voltageExcitSource: int32,
                                                 voltageExcitVal: float64,
                                                 customScaleName:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIAccelChan(taskHandle: TaskHandle,
                                      physicalChannel:
                                          *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      terminalConfig: int32, minVal: float64,
                                      maxVal: float64, units: int32,
                                      currentExcitSource: int32,
                                      currentExcitVal: float64,
                                      customScaleName:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIForceIEPEChan(taskHandle: TaskHandle,
                                          physicalChannel:
                                              *mut ::std::os::raw::c_char,
                                          nameToAssignToChannel:
                                              *mut ::std::os::raw::c_char,
                                          terminalConfig: int32,
                                          minVal: float64, maxVal: float64,
                                          units: int32,
                                          currentExcitSource: int32,
                                          currentExcitVal: float64,
                                          customScaleName:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIMicrophoneChan(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           terminalConfig: int32,
                                           units: int32,
                                           maxSndPressLevel: float64,
                                           currentExcitSource: int32,
                                           currentExcitVal: float64,
                                           customScaleName:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIPosLVDTChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        units: int32,
                                        voltageExcitSource: int32,
                                        voltageExcitVal: float64,
                                        voltageExcitFreq: float64,
                                        ACExcitWireMode: int32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIPosRVDTChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        units: int32,
                                        voltageExcitSource: int32,
                                        voltageExcitVal: float64,
                                        voltageExcitFreq: float64,
                                        ACExcitWireMode: int32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAOVoltageChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAOCurrentChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAOFuncGenChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    type_: int32, freq: float64,
                                    amplitude: float64, offset: float64)
     -> int32;
    pub fn DAQmxCreateDIChan(taskHandle: TaskHandle,
                             lines: *mut ::std::os::raw::c_char,
                             nameToAssignToLines: *mut ::std::os::raw::c_char,
                             lineGrouping: int32) -> int32;
    pub fn DAQmxCreateDOChan(taskHandle: TaskHandle,
                             lines: *mut ::std::os::raw::c_char,
                             nameToAssignToLines: *mut ::std::os::raw::c_char,
                             lineGrouping: int32) -> int32;
    pub fn DAQmxCreateCIFreqChan(taskHandle: TaskHandle,
                                 counter: *mut ::std::os::raw::c_char,
                                 nameToAssignToChannel:
                                     *mut ::std::os::raw::c_char,
                                 minVal: float64, maxVal: float64,
                                 units: int32, edge: int32, measMethod: int32,
                                 measTime: float64, divisor: uInt32,
                                 customScaleName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIPeriodChan(taskHandle: TaskHandle,
                                   counter: *mut ::std::os::raw::c_char,
                                   nameToAssignToChannel:
                                       *mut ::std::os::raw::c_char,
                                   minVal: float64, maxVal: float64,
                                   units: int32, edge: int32,
                                   measMethod: int32, measTime: float64,
                                   divisor: uInt32,
                                   customScaleName:
                                       *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateCICountEdgesChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       edge: int32, initialCount: uInt32,
                                       countDirection: int32) -> int32;
    pub fn DAQmxCreateCIDutyCycleChan(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      minFreq: float64, maxFreq: float64,
                                      edge: int32,
                                      customScaleName:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIPulseWidthChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, startingEdge: int32,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCISemiPeriodChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCITwoEdgeSepChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, firstEdge: int32,
                                       secondEdge: int32,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIPulseChanFreq(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      minVal: float64, maxVal: float64,
                                      units: int32) -> int32;
    pub fn DAQmxCreateCIPulseChanTime(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      minVal: float64, maxVal: float64,
                                      units: int32) -> int32;
    pub fn DAQmxCreateCIPulseChanTicks(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       sourceTerminal:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64)
     -> int32;
    pub fn DAQmxCreateCILinEncoderChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       decodingType: int32,
                                       ZidxEnable: bool32, ZidxVal: float64,
                                       ZidxPhase: int32, units: int32,
                                       distPerPulse: float64,
                                       initialPos: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIAngEncoderChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       decodingType: int32,
                                       ZidxEnable: bool32, ZidxVal: float64,
                                       ZidxPhase: int32, units: int32,
                                       pulsesPerRev: uInt32,
                                       initialAngle: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCILinVelocityChan(taskHandle: TaskHandle,
                                        counter: *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        decodingType: int32, units: int32,
                                        distPerPulse: float64,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIAngVelocityChan(taskHandle: TaskHandle,
                                        counter: *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        decodingType: int32, units: int32,
                                        pulsesPerRev: uInt32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIGPSTimestampChan(taskHandle: TaskHandle,
                                         counter: *mut ::std::os::raw::c_char,
                                         nameToAssignToChannel:
                                             *mut ::std::os::raw::c_char,
                                         units: int32, syncMethod: int32,
                                         customScaleName:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCOPulseChanFreq(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      units: int32, idleState: int32,
                                      initialDelay: float64, freq: float64,
                                      dutyCycle: float64) -> int32;
    pub fn DAQmxCreateCOPulseChanTime(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      units: int32, idleState: int32,
                                      initialDelay: float64, lowTime: float64,
                                      highTime: float64) -> int32;
    pub fn DAQmxCreateCOPulseChanTicks(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       sourceTerminal:
                                           *mut ::std::os::raw::c_char,
                                       idleState: int32, initialDelay: int32,
                                       lowTicks: int32, highTicks: int32)
     -> int32;
    pub fn DAQmxGetAIChanCalCalDate(taskHandle: TaskHandle,
                                    channelName: *mut ::std::os::raw::c_char,
                                    year: *mut uInt32, month: *mut uInt32,
                                    day: *mut uInt32, hour: *mut uInt32,
                                    minute: *mut uInt32) -> int32;
    pub fn DAQmxSetAIChanCalCalDate(taskHandle: TaskHandle,
                                    channelName: *mut ::std::os::raw::c_char,
                                    year: uInt32, month: uInt32, day: uInt32,
                                    hour: uInt32, minute: uInt32) -> int32;
    pub fn DAQmxGetAIChanCalExpDate(taskHandle: TaskHandle,
                                    channelName: *mut ::std::os::raw::c_char,
                                    year: *mut uInt32, month: *mut uInt32,
                                    day: *mut uInt32, hour: *mut uInt32,
                                    minute: *mut uInt32) -> int32;
    pub fn DAQmxSetAIChanCalExpDate(taskHandle: TaskHandle,
                                    channelName: *mut ::std::os::raw::c_char,
                                    year: uInt32, month: uInt32, day: uInt32,
                                    hour: uInt32, minute: uInt32) -> int32;
    pub fn DAQmxGetChanAttribute(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 attribute: int32,
                                 value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetChanAttribute(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 attribute: int32, ...) -> int32;
    pub fn DAQmxResetChanAttribute(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   attribute: int32) -> int32;
    pub fn DAQmxCfgSampClkTiming(taskHandle: TaskHandle,
                                 source: *mut ::std::os::raw::c_char,
                                 rate: float64, activeEdge: int32,
                                 sampleMode: int32, sampsPerChan: uInt64)
     -> int32;
    pub fn DAQmxCfgHandshakingTiming(taskHandle: TaskHandle,
                                     sampleMode: int32, sampsPerChan: uInt64)
     -> int32;
    pub fn DAQmxCfgBurstHandshakingTimingImportClock(taskHandle: TaskHandle,
                                                     sampleMode: int32,
                                                     sampsPerChan: uInt64,
                                                     sampleClkRate: float64,
                                                     sampleClkSrc:
                                                         *mut ::std::os::raw::c_char,
                                                     sampleClkActiveEdge:
                                                         int32,
                                                     pauseWhen: int32,
                                                     readyEventActiveLevel:
                                                         int32) -> int32;
    pub fn DAQmxCfgBurstHandshakingTimingExportClock(taskHandle: TaskHandle,
                                                     sampleMode: int32,
                                                     sampsPerChan: uInt64,
                                                     sampleClkRate: float64,
                                                     sampleClkOutpTerm:
                                                         *mut ::std::os::raw::c_char,
                                                     sampleClkPulsePolarity:
                                                         int32,
                                                     pauseWhen: int32,
                                                     readyEventActiveLevel:
                                                         int32) -> int32;
    pub fn DAQmxCfgChangeDetectionTiming(taskHandle: TaskHandle,
                                         risingEdgeChan:
                                             *mut ::std::os::raw::c_char,
                                         fallingEdgeChan:
                                             *mut ::std::os::raw::c_char,
                                         sampleMode: int32,
                                         sampsPerChan: uInt64) -> int32;
    pub fn DAQmxCfgImplicitTiming(taskHandle: TaskHandle, sampleMode: int32,
                                  sampsPerChan: uInt64) -> int32;
    pub fn DAQmxCfgPipelinedSampClkTiming(taskHandle: TaskHandle,
                                          source: *mut ::std::os::raw::c_char,
                                          rate: float64, activeEdge: int32,
                                          sampleMode: int32,
                                          sampsPerChan: uInt64) -> int32;
    pub fn DAQmxGetTimingAttribute(taskHandle: TaskHandle, attribute: int32,
                                   value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetTimingAttribute(taskHandle: TaskHandle,
                                   attribute: int32, ...) -> int32;
    pub fn DAQmxResetTimingAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxGetTimingAttributeEx(taskHandle: TaskHandle,
                                     deviceNames: *mut ::std::os::raw::c_char,
                                     attribute: int32,
                                     value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetTimingAttributeEx(taskHandle: TaskHandle,
                                     deviceNames: *mut ::std::os::raw::c_char,
                                     attribute: int32, ...) -> int32;
    pub fn DAQmxResetTimingAttributeEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       attribute: int32) -> int32;
    pub fn DAQmxDisableStartTrig(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxCfgDigEdgeStartTrig(taskHandle: TaskHandle,
                                    triggerSource:
                                        *mut ::std::os::raw::c_char,
                                    triggerEdge: int32) -> int32;
    pub fn DAQmxCfgAnlgEdgeStartTrig(taskHandle: TaskHandle,
                                     triggerSource:
                                         *mut ::std::os::raw::c_char,
                                     triggerSlope: int32,
                                     triggerLevel: float64) -> int32;
    pub fn DAQmxCfgAnlgWindowStartTrig(taskHandle: TaskHandle,
                                       triggerSource:
                                           *mut ::std::os::raw::c_char,
                                       triggerWhen: int32, windowTop: float64,
                                       windowBottom: float64) -> int32;
    pub fn DAQmxCfgDigPatternStartTrig(taskHandle: TaskHandle,
                                       triggerSource:
                                           *mut ::std::os::raw::c_char,
                                       triggerPattern:
                                           *mut ::std::os::raw::c_char,
                                       triggerWhen: int32) -> int32;
    pub fn DAQmxDisableRefTrig(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxCfgDigEdgeRefTrig(taskHandle: TaskHandle,
                                  triggerSource: *mut ::std::os::raw::c_char,
                                  triggerEdge: int32,
                                  pretriggerSamples: uInt32) -> int32;
    pub fn DAQmxCfgAnlgEdgeRefTrig(taskHandle: TaskHandle,
                                   triggerSource: *mut ::std::os::raw::c_char,
                                   triggerSlope: int32, triggerLevel: float64,
                                   pretriggerSamples: uInt32) -> int32;
    pub fn DAQmxCfgAnlgWindowRefTrig(taskHandle: TaskHandle,
                                     triggerSource:
                                         *mut ::std::os::raw::c_char,
                                     triggerWhen: int32, windowTop: float64,
                                     windowBottom: float64,
                                     pretriggerSamples: uInt32) -> int32;
    pub fn DAQmxCfgDigPatternRefTrig(taskHandle: TaskHandle,
                                     triggerSource:
                                         *mut ::std::os::raw::c_char,
                                     triggerPattern:
                                         *mut ::std::os::raw::c_char,
                                     triggerWhen: int32,
                                     pretriggerSamples: uInt32) -> int32;
    pub fn DAQmxDisableAdvTrig(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxCfgDigEdgeAdvTrig(taskHandle: TaskHandle,
                                  triggerSource: *mut ::std::os::raw::c_char,
                                  triggerEdge: int32) -> int32;
    pub fn DAQmxGetTrigAttribute(taskHandle: TaskHandle, attribute: int32,
                                 value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetTrigAttribute(taskHandle: TaskHandle,
                                 attribute: int32, ...) -> int32;
    pub fn DAQmxResetTrigAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxSendSoftwareTrigger(taskHandle: TaskHandle, triggerID: int32)
     -> int32;
    pub fn DAQmxReadAnalogF64(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut float64,
                              arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadAnalogScalarF64(taskHandle: TaskHandle, timeout: float64,
                                    value: *mut float64,
                                    reserved: *mut bool32) -> int32;
    pub fn DAQmxReadBinaryI16(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut int16, arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadBinaryU16(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut uInt16,
                              arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadBinaryI32(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut int32, arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadBinaryU32(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut uInt32,
                              arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalU8(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut uInt8, arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalU16(taskHandle: TaskHandle, numSampsPerChan: int32,
                               timeout: float64, fillMode: bool32,
                               readArray: *mut uInt16,
                               arraySizeInSamps: uInt32,
                               sampsPerChanRead: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalU32(taskHandle: TaskHandle, numSampsPerChan: int32,
                               timeout: float64, fillMode: bool32,
                               readArray: *mut uInt32,
                               arraySizeInSamps: uInt32,
                               sampsPerChanRead: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalScalarU32(taskHandle: TaskHandle, timeout: float64,
                                     value: *mut uInt32,
                                     reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalLines(taskHandle: TaskHandle,
                                 numSampsPerChan: int32, timeout: float64,
                                 fillMode: bool32, readArray: *mut uInt8,
                                 arraySizeInBytes: uInt32,
                                 sampsPerChanRead: *mut int32,
                                 numBytesPerSamp: *mut int32,
                                 reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterF64(taskHandle: TaskHandle, numSampsPerChan: int32,
                               timeout: float64, readArray: *mut float64,
                               arraySizeInSamps: uInt32,
                               sampsPerChanRead: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterU32(taskHandle: TaskHandle, numSampsPerChan: int32,
                               timeout: float64, readArray: *mut uInt32,
                               arraySizeInSamps: uInt32,
                               sampsPerChanRead: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterF64Ex(taskHandle: TaskHandle,
                                 numSampsPerChan: int32, timeout: float64,
                                 fillMode: bool32, readArray: *mut float64,
                                 arraySizeInSamps: uInt32,
                                 sampsPerChanRead: *mut int32,
                                 reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterU32Ex(taskHandle: TaskHandle,
                                 numSampsPerChan: int32, timeout: float64,
                                 fillMode: bool32, readArray: *mut uInt32,
                                 arraySizeInSamps: uInt32,
                                 sampsPerChanRead: *mut int32,
                                 reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterScalarF64(taskHandle: TaskHandle, timeout: float64,
                                     value: *mut float64,
                                     reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterScalarU32(taskHandle: TaskHandle, timeout: float64,
                                     value: *mut uInt32,
                                     reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrFreq(taskHandle: TaskHandle, numSampsPerChan: int32,
                            timeout: float64, interleaved: bool32,
                            readArrayFrequency: *mut float64,
                            readArrayDutyCycle: *mut float64,
                            arraySizeInSamps: uInt32,
                            sampsPerChanRead: *mut int32,
                            reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrTime(taskHandle: TaskHandle, numSampsPerChan: int32,
                            timeout: float64, interleaved: bool32,
                            readArrayHighTime: *mut float64,
                            readArrayLowTime: *mut float64,
                            arraySizeInSamps: uInt32,
                            sampsPerChanRead: *mut int32,
                            reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrTicks(taskHandle: TaskHandle, numSampsPerChan: int32,
                             timeout: float64, interleaved: bool32,
                             readArrayHighTicks: *mut uInt32,
                             readArrayLowTicks: *mut uInt32,
                             arraySizeInSamps: uInt32,
                             sampsPerChanRead: *mut int32,
                             reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrFreqScalar(taskHandle: TaskHandle, timeout: float64,
                                  frequency: *mut float64,
                                  dutyCycle: *mut float64,
                                  reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrTimeScalar(taskHandle: TaskHandle, timeout: float64,
                                  highTime: *mut float64,
                                  lowTime: *mut float64,
                                  reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrTicksScalar(taskHandle: TaskHandle, timeout: float64,
                                   highTicks: *mut uInt32,
                                   lowTicks: *mut uInt32,
                                   reserved: *mut bool32) -> int32;
    pub fn DAQmxReadRaw(taskHandle: TaskHandle, numSampsPerChan: int32,
                        timeout: float64,
                        readArray: *mut ::std::os::raw::c_void,
                        arraySizeInBytes: uInt32, sampsRead: *mut int32,
                        numBytesPerSamp: *mut int32, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxGetNthTaskReadChannel(taskHandle: TaskHandle, index: uInt32,
                                      buffer: *mut ::std::os::raw::c_char,
                                      bufferSize: int32) -> int32;
    pub fn DAQmxGetReadAttribute(taskHandle: TaskHandle, attribute: int32,
                                 value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetReadAttribute(taskHandle: TaskHandle,
                                 attribute: int32, ...) -> int32;
    pub fn DAQmxResetReadAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxConfigureLogging(taskHandle: TaskHandle,
                                 filePath: *mut ::std::os::raw::c_char,
                                 loggingMode: int32,
                                 groupName: *mut ::std::os::raw::c_char,
                                 operation: int32) -> int32;
    pub fn DAQmxStartNewFile(taskHandle: TaskHandle,
                             filePath: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxWriteAnalogF64(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut float64,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteAnalogScalarF64(taskHandle: TaskHandle,
                                     autoStart: bool32, timeout: float64,
                                     value: float64, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteBinaryI16(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut int16,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteBinaryU16(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut uInt16,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteBinaryI32(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut int32,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteBinaryU32(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut uInt32,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteDigitalU8(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut uInt8,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteDigitalU16(taskHandle: TaskHandle,
                                numSampsPerChan: int32, autoStart: bool32,
                                timeout: float64, dataLayout: bool32,
                                writeArray: *mut uInt16,
                                sampsPerChanWritten: *mut int32,
                                reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteDigitalU32(taskHandle: TaskHandle,
                                numSampsPerChan: int32, autoStart: bool32,
                                timeout: float64, dataLayout: bool32,
                                writeArray: *mut uInt32,
                                sampsPerChanWritten: *mut int32,
                                reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteDigitalScalarU32(taskHandle: TaskHandle,
                                      autoStart: bool32, timeout: float64,
                                      value: uInt32, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteDigitalLines(taskHandle: TaskHandle,
                                  numSampsPerChan: int32, autoStart: bool32,
                                  timeout: float64, dataLayout: bool32,
                                  writeArray: *mut uInt8,
                                  sampsPerChanWritten: *mut int32,
                                  reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteCtrFreq(taskHandle: TaskHandle, numSampsPerChan: int32,
                             autoStart: bool32, timeout: float64,
                             dataLayout: bool32, frequency: *mut float64,
                             dutyCycle: *mut float64,
                             numSampsPerChanWritten: *mut int32,
                             reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteCtrFreqScalar(taskHandle: TaskHandle, autoStart: bool32,
                                   timeout: float64, frequency: float64,
                                   dutyCycle: float64, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteCtrTime(taskHandle: TaskHandle, numSampsPerChan: int32,
                             autoStart: bool32, timeout: float64,
                             dataLayout: bool32, highTime: *mut float64,
                             lowTime: *mut float64,
                             numSampsPerChanWritten: *mut int32,
                             reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteCtrTimeScalar(taskHandle: TaskHandle, autoStart: bool32,
                                   timeout: float64, highTime: float64,
                                   lowTime: float64, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteCtrTicks(taskHandle: TaskHandle, numSampsPerChan: int32,
                              autoStart: bool32, timeout: float64,
                              dataLayout: bool32, highTicks: *mut uInt32,
                              lowTicks: *mut uInt32,
                              numSampsPerChanWritten: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteCtrTicksScalar(taskHandle: TaskHandle, autoStart: bool32,
                                    timeout: float64, highTicks: uInt32,
                                    lowTicks: uInt32, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteRaw(taskHandle: TaskHandle, numSamps: int32,
                         autoStart: bool32, timeout: float64,
                         writeArray: *const ::std::os::raw::c_void,
                         sampsPerChanWritten: *mut int32,
                         reserved: *mut bool32) -> int32;
    pub fn DAQmxGetWriteAttribute(taskHandle: TaskHandle, attribute: int32,
                                  value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetWriteAttribute(taskHandle: TaskHandle,
                                  attribute: int32, ...) -> int32;
    pub fn DAQmxResetWriteAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxExportSignal(taskHandle: TaskHandle, signalID: int32,
                             outputTerminal: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetExportedSignalAttribute(taskHandle: TaskHandle,
                                           attribute: int32,
                                           value:
                                               *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetExportedSignalAttribute(taskHandle: TaskHandle,
                                           attribute: int32, ...) -> int32;
    pub fn DAQmxResetExportedSignalAttribute(taskHandle: TaskHandle,
                                             attribute: int32) -> int32;
    pub fn DAQmxCreateLinScale(name: *mut ::std::os::raw::c_char,
                               slope: float64, yIntercept: float64,
                               preScaledUnits: int32,
                               scaledUnits: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateMapScale(name: *mut ::std::os::raw::c_char,
                               prescaledMin: float64, prescaledMax: float64,
                               scaledMin: float64, scaledMax: float64,
                               preScaledUnits: int32,
                               scaledUnits: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreatePolynomialScale(name: *mut ::std::os::raw::c_char,
                                      forwardCoeffs: *mut float64,
                                      numForwardCoeffsIn: uInt32,
                                      reverseCoeffs: *mut float64,
                                      numReverseCoeffsIn: uInt32,
                                      preScaledUnits: int32,
                                      scaledUnits:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTableScale(name: *mut ::std::os::raw::c_char,
                                 prescaledVals: *mut float64,
                                 numPrescaledValsIn: uInt32,
                                 scaledVals: *mut float64,
                                 numScaledValsIn: uInt32,
                                 preScaledUnits: int32,
                                 scaledUnits: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCalculateReversePolyCoeff(forwardCoeffs: *mut float64,
                                          numForwardCoeffsIn: uInt32,
                                          minValX: float64, maxValX: float64,
                                          numPointsToCompute: int32,
                                          reversePolyOrder: int32,
                                          reverseCoeffs: *mut float64)
     -> int32;
    pub fn DAQmxGetScaleAttribute(scaleName: *mut ::std::os::raw::c_char,
                                  attribute: int32,
                                  value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetScaleAttribute(scaleName: *mut ::std::os::raw::c_char,
                                  attribute: int32, ...) -> int32;
    pub fn DAQmxCfgInputBuffer(taskHandle: TaskHandle,
                               numSampsPerChan: uInt32) -> int32;
    pub fn DAQmxCfgOutputBuffer(taskHandle: TaskHandle,
                                numSampsPerChan: uInt32) -> int32;
    pub fn DAQmxGetBufferAttribute(taskHandle: TaskHandle, attribute: int32,
                                   value: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxSetBufferAttribute(taskHandle: TaskHandle,
                                   attribute: int32, ...) -> int32;
    pub fn DAQmxResetBufferAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxSwitchCreateScanList(scanList: *mut ::std::os::raw::c_char,
                                     taskHandle: *mut TaskHandle) -> int32;
    pub fn DAQmxSwitchConnect(switchChannel1: *mut ::std::os::raw::c_char,
                              switchChannel2: *mut ::std::os::raw::c_char,
                              waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchConnectMulti(connectionList:
                                       *mut ::std::os::raw::c_char,
                                   waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchDisconnect(switchChannel1: *mut ::std::os::raw::c_char,
                                 switchChannel2: *mut ::std::os::raw::c_char,
                                 waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchDisconnectMulti(connectionList:
                                          *mut ::std::os::raw::c_char,
                                      waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchDisconnectAll(deviceName: *mut ::std::os::raw::c_char,
                                    waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchSetTopologyAndReset(deviceName:
                                              *mut ::std::os::raw::c_char,
                                          newTopology:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxSwitchFindPath(switchChannel1: *mut ::std::os::raw::c_char,
                               switchChannel2: *mut ::std::os::raw::c_char,
                               path: *mut ::std::os::raw::c_char,
                               pathBufferSize: uInt32, pathStatus: *mut int32)
     -> int32;
    pub fn DAQmxSwitchOpenRelays(relayList: *mut ::std::os::raw::c_char,
                                 waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchCloseRelays(relayList: *mut ::std::os::raw::c_char,
                                  waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchGetSingleRelayCount(relayName:
                                              *mut ::std::os::raw::c_char,
                                          count: *mut uInt32) -> int32;
    pub fn DAQmxSwitchGetMultiRelayCount(relayList:
                                             *mut ::std::os::raw::c_char,
                                         count: *mut uInt32,
                                         countArraySize: uInt32,
                                         numRelayCountsRead: *mut uInt32)
     -> int32;
    pub fn DAQmxSwitchGetSingleRelayPos(relayName:
                                            *mut ::std::os::raw::c_char,
                                        relayPos: *mut uInt32) -> int32;
    pub fn DAQmxSwitchGetMultiRelayPos(relayList: *mut ::std::os::raw::c_char,
                                       relayPos: *mut uInt32,
                                       relayPosArraySize: uInt32,
                                       numRelayPossRead: *mut uInt32)
     -> int32;
    pub fn DAQmxSwitchWaitForSettling(deviceName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetSwitchChanAttribute(switchChannelName:
                                           *mut ::std::os::raw::c_char,
                                       attribute: int32,
                                       value: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxSetSwitchChanAttribute(switchChannelName:
                                           *mut ::std::os::raw::c_char,
                                       attribute: int32, ...) -> int32;
    pub fn DAQmxGetSwitchDeviceAttribute(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         attribute: int32,
                                         value:
                                             *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetSwitchDeviceAttribute(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         attribute: int32, ...) -> int32;
    pub fn DAQmxGetSwitchScanAttribute(taskHandle: TaskHandle,
                                       attribute: int32,
                                       value: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxSetSwitchScanAttribute(taskHandle: TaskHandle,
                                       attribute: int32, ...) -> int32;
    pub fn DAQmxResetSwitchScanAttribute(taskHandle: TaskHandle,
                                         attribute: int32) -> int32;
    pub fn DAQmxConnectTerms(sourceTerminal: *mut ::std::os::raw::c_char,
                             destinationTerminal: *mut ::std::os::raw::c_char,
                             signalModifiers: int32) -> int32;
    pub fn DAQmxDisconnectTerms(sourceTerminal: *mut ::std::os::raw::c_char,
                                destinationTerminal:
                                    *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxTristateOutputTerm(outputTerminal:
                                       *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetDevice(deviceName: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxSelfTestDevice(deviceName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDeviceAttribute(deviceName: *mut ::std::os::raw::c_char,
                                   attribute: int32,
                                   value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxCreateWatchdogTimerTask(deviceName:
                                            *mut ::std::os::raw::c_char,
                                        taskName: *mut ::std::os::raw::c_char,
                                        taskHandle: *mut TaskHandle,
                                        timeout: float64,
                                        lines: *mut ::std::os::raw::c_char,
                                        expState: int32, ...) -> int32;
    pub fn DAQmxCreateWatchdogTimerTaskEx(deviceName:
                                              *mut ::std::os::raw::c_char,
                                          taskName:
                                              *mut ::std::os::raw::c_char,
                                          taskHandle: *mut TaskHandle,
                                          timeout: float64) -> int32;
    pub fn DAQmxControlWatchdogTask(taskHandle: TaskHandle, action: int32)
     -> int32;
    pub fn DAQmxCfgWatchdogAOExpirStates(taskHandle: TaskHandle,
                                         channelNames:
                                             *mut ::std::os::raw::c_char,
                                         expirStateArray: *mut float64,
                                         outputTypeArray: *mut int32,
                                         arraySize: uInt32) -> int32;
    pub fn DAQmxCfgWatchdogCOExpirStates(taskHandle: TaskHandle,
                                         channelNames:
                                             *mut ::std::os::raw::c_char,
                                         expirStateArray: *mut int32,
                                         arraySize: uInt32) -> int32;
    pub fn DAQmxCfgWatchdogDOExpirStates(taskHandle: TaskHandle,
                                         channelNames:
                                             *mut ::std::os::raw::c_char,
                                         expirStateArray: *mut int32,
                                         arraySize: uInt32) -> int32;
    pub fn DAQmxGetWatchdogAttribute(taskHandle: TaskHandle,
                                     lines: *mut ::std::os::raw::c_char,
                                     attribute: int32,
                                     value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetWatchdogAttribute(taskHandle: TaskHandle,
                                     lines: *mut ::std::os::raw::c_char,
                                     attribute: int32, ...) -> int32;
    pub fn DAQmxResetWatchdogAttribute(taskHandle: TaskHandle,
                                       lines: *mut ::std::os::raw::c_char,
                                       attribute: int32) -> int32;
    pub fn DAQmxSelfCal(deviceName: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxPerformBridgeOffsetNullingCal(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxPerformBridgeOffsetNullingCalEx(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                skipUnsupportedChannels:
                                                    bool32) -> int32;
    pub fn DAQmxPerformThrmcplLeadOffsetNullingCal(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   skipUnsupportedChannels:
                                                       bool32) -> int32;
    pub fn DAQmxPerformStrainShuntCal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      shuntResistorValue: float64,
                                      shuntResistorLocation: int32,
                                      skipUnsupportedChannels: bool32)
     -> int32;
    pub fn DAQmxPerformStrainShuntCalEx(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        shuntResistorValue: float64,
                                        shuntResistorLocation: int32,
                                        shuntResistorSelect: int32,
                                        shuntResistorSource: int32,
                                        skipUnsupportedChannels: bool32)
     -> int32;
    pub fn DAQmxPerformBridgeShuntCal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      shuntResistorValue: float64,
                                      shuntResistorLocation: int32,
                                      bridgeResistance: float64,
                                      skipUnsupportedChannels: bool32)
     -> int32;
    pub fn DAQmxPerformBridgeShuntCalEx(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        shuntResistorValue: float64,
                                        shuntResistorLocation: int32,
                                        shuntResistorSelect: int32,
                                        shuntResistorSource: int32,
                                        bridgeResistance: float64,
                                        skipUnsupportedChannels: bool32)
     -> int32;
    pub fn DAQmxGetSelfCalLastDateAndTime(deviceName:
                                              *mut ::std::os::raw::c_char,
                                          year: *mut uInt32,
                                          month: *mut uInt32,
                                          day: *mut uInt32, hour: *mut uInt32,
                                          minute: *mut uInt32) -> int32;
    pub fn DAQmxGetExtCalLastDateAndTime(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         year: *mut uInt32,
                                         month: *mut uInt32, day: *mut uInt32,
                                         hour: *mut uInt32,
                                         minute: *mut uInt32) -> int32;
    pub fn DAQmxRestoreLastExtCalConst(deviceName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxESeriesCalAdjust(calHandle: CalHandle,
                                 referenceVoltage: float64) -> int32;
    pub fn DAQmxMSeriesCalAdjust(calHandle: CalHandle,
                                 referenceVoltage: float64) -> int32;
    pub fn DAQmxSSeriesCalAdjust(calHandle: CalHandle,
                                 referenceVoltage: float64) -> int32;
    pub fn DAQmxSCBaseboardCalAdjust(calHandle: CalHandle,
                                     referenceVoltage: float64) -> int32;
    pub fn DAQmxAOSeriesCalAdjust(calHandle: CalHandle,
                                  referenceVoltage: float64) -> int32;
    pub fn DAQmxXSeriesCalAdjust(calHandle: CalHandle,
                                 referenceVoltage: float64) -> int32;
    pub fn DAQmxDeviceSupportsCal(deviceName: *mut ::std::os::raw::c_char,
                                  calSupported: *mut bool32) -> int32;
    pub fn DAQmxGetCalInfoAttribute(deviceName: *mut ::std::os::raw::c_char,
                                    attribute: int32,
                                    value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetCalInfoAttribute(deviceName: *mut ::std::os::raw::c_char,
                                    attribute: int32, ...) -> int32;
    pub fn DAQmxInitExtCal(deviceName: *mut ::std::os::raw::c_char,
                           password: *mut ::std::os::raw::c_char,
                           calHandle: *mut CalHandle) -> int32;
    pub fn DAQmxCloseExtCal(calHandle: CalHandle, action: int32) -> int32;
    pub fn DAQmxChangeExtCalPassword(deviceName: *mut ::std::os::raw::c_char,
                                     password: *mut ::std::os::raw::c_char,
                                     newPassword: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxDSASetCalTemp(calHandle: CalHandle, temperature: float64)
     -> int32;
    pub fn DAQmxAdjustDSAAICal(calHandle: CalHandle,
                               referenceVoltage: float64) -> int32;
    pub fn DAQmxAdjustDSAAICalEx(calHandle: CalHandle,
                                 referenceVoltage: float64,
                                 inputsShorted: bool32) -> int32;
    pub fn DAQmxAdjustDSAAICalWithGainAndCoupling(calHandle: CalHandle,
                                                  coupling: int32,
                                                  gain: float64,
                                                  referenceVoltage: float64)
     -> int32;
    pub fn DAQmxAdjustDSAAOCal(calHandle: CalHandle, channel: uInt32,
                               requestedLowVoltage: float64,
                               actualLowVoltage: float64,
                               requestedHighVoltage: float64,
                               actualHighVoltage: float64,
                               gainSetting: float64) -> int32;
    pub fn DAQmxAdjust4610Cal(calHandle: CalHandle,
                              channelName: *mut ::std::os::raw::c_char,
                              gain: float64, offset: float64) -> int32;
    pub fn DAQmxAdjustDSATimebaseCal(calHandle: CalHandle,
                                     referenceFrequency: float64) -> int32;
    pub fn DAQmxAdjustDSAAOTimebaseCal(calHandle: CalHandle,
                                       measuredFrequency: float64,
                                       calComplete: *mut bool32) -> int32;
    pub fn DAQmxSetupDSAAOTimebaseCal(calHandle: CalHandle,
                                      expectedFrequency: *mut float64)
     -> int32;
    pub fn DAQmxGet4463AdjustPoints(calHandle: CalHandle,
                                    terminalConfig: int32, gain: float64,
                                    adjustmentPoints: *mut float64,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4463Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              referenceVoltage: float64) -> int32;
    pub fn DAQmxSetup4463Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             terminalConfig: int32, gain: float64,
                             outputVoltage: float64) -> int32;
    pub fn DAQmxSetup4480Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             calMode: int32) -> int32;
    pub fn DAQmxAdjustTIOTimebaseCal(calHandle: CalHandle,
                                     referenceFrequency: float64) -> int32;
    pub fn DAQmxAdjust4204Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              lowPassFreq: float64, trackHoldEnabled: bool32,
                              inputVal: float64) -> int32;
    pub fn DAQmxAdjust4220Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              gain: float64, inputVal: float64) -> int32;
    pub fn DAQmxAdjust4224Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              gain: float64, inputVal: float64) -> int32;
    pub fn DAQmxAdjust4225Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              gain: float64, inputVal: float64) -> int32;
    pub fn DAQmxSetup433xCal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             excitationVoltage: float64) -> int32;
    pub fn DAQmxAdjust433xCal(calHandle: CalHandle, refVoltage: float64,
                              refExcitation: float64, shuntLocation: int32)
     -> int32;
    pub fn DAQmxSetup4339Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             calMode: int32, rangeMax: float64,
                             rangeMin: float64, excitationVoltage: float64)
     -> int32;
    pub fn DAQmxAdjust4339Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxGet4339CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4300Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxSetup4302Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64) -> int32;
    pub fn DAQmxGet4302CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4302Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxSetup4303Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64) -> int32;
    pub fn DAQmxGet4303CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4303Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxSetup4304Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64) -> int32;
    pub fn DAQmxGet4304CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4304Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxSetup4305Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64) -> int32;
    pub fn DAQmxGet4305CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4305Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxAdjust4353Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              refVal: float64) -> int32;
    pub fn DAQmxAdjust4357Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              refVals: *mut float64, numRefVals: int32)
     -> int32;
    pub fn DAQmxSetup4322Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             outputType: int32, outputVal: float64) -> int32;
    pub fn DAQmxAdjust4322Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              refVal: float64) -> int32;
    pub fn DAQmxGet4322CalAdjustPoints(calHandle: CalHandle,
                                       outputType: int32,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxConnectSCExpressCalAccChans(calHandle: CalHandle,
                                            channelNames:
                                                *mut ::std::os::raw::c_char,
                                            connection:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxDisconnectSCExpressCalAccChans(calHandle: CalHandle) -> int32;
    pub fn DAQmxGetPossibleSCExpressCalAccConnections(deviceName:
                                                          *mut ::std::os::raw::c_char,
                                                      channelNames:
                                                          *mut ::std::os::raw::c_char,
                                                      connections:
                                                          *mut ::std::os::raw::c_char,
                                                      connectionsBufferSize:
                                                          uInt32) -> int32;
    pub fn DAQmxSetSCExpressCalAccBridgeOutput(calHandle: CalHandle,
                                               voltsPerVolt: float64)
     -> int32;
    pub fn DAQmxGet9201CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxCSeriesSetCalTemp(calHandle: CalHandle, temperature: float64)
     -> int32;
    pub fn DAQmxAdjust9201Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9203CalAdjustPoints(calHandle: CalHandle,
                                       rangeMin: float64, rangeMax: float64,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9203GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  rangeMin: float64, rangeMax: float64,
                                  value: float64) -> int32;
    pub fn DAQmxAdjust9203OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char,
                                    rangeMin: float64, rangeMax: float64)
     -> int32;
    pub fn DAQmxAdjust9205Cal(calHandle: CalHandle, value: float64) -> int32;
    pub fn DAQmxAdjust9206Cal(calHandle: CalHandle, value: float64) -> int32;
    pub fn DAQmxGet9207CalAdjustPoints(calHandle: CalHandle,
                                       channelNames:
                                           *mut ::std::os::raw::c_char,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9207GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  value: float64) -> int32;
    pub fn DAQmxAdjust9207OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGet9208CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9208GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  value: float64) -> int32;
    pub fn DAQmxAdjust9208OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGet9209CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9209GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  terminalConfig: int32, value: float64)
     -> int32;
    pub fn DAQmxAdjust9209OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAdjust9210Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxAdjust9211Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9212CalAdjustPoints(calHandle: CalHandle,
                                       channelNames:
                                           *mut ::std::os::raw::c_char,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9212Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9213CalAdjustPoints(calHandle: CalHandle,
                                       rangeMin: float64, rangeMax: float64,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9213Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              rangeMin: float64, rangeMax: float64,
                              value: float64) -> int32;
    pub fn DAQmxGet9214CalAdjustPoints(calHandle: CalHandle,
                                       channelNames:
                                           *mut ::std::os::raw::c_char,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9214Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9215CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9215Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9216CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9216Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9217CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9217Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxSetup9218Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64,
                             measType: int32) -> int32;
    pub fn DAQmxGet9218CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9218Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxSetup9219Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64,
                             measType: int32, bridgeConfig: int32) -> int32;
    pub fn DAQmxGet9219CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9219Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9220CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9220Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9221CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9221Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9222CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9222Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9223CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9223Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9225CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9225Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9226CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9226Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9227CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9227Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9229CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9229Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9230CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9230Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9232CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9232Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9234CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9234GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  value: float64) -> int32;
    pub fn DAQmxAdjust9234OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGet9238CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9238Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9239CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9239Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9242CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9242Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: float64) -> int32;
    pub fn DAQmxAdjust9242Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9244CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9244Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: float64) -> int32;
    pub fn DAQmxAdjust9244Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9246CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9246Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9247CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9247Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9251CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9251Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9260CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9260Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9260Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9263CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9263Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9263Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9264CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9264Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9264Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9265CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9265Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9265Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9269CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9269Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9269Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxSetup1102Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1102Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1104Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAdjust1104Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1112Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAdjust1112Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1122Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1122Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1124Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             range: int32, dacValue: uInt32) -> int32;
    pub fn DAQmxAdjust1124Cal(calHandle: CalHandle, measOutput: float64)
     -> int32;
    pub fn DAQmxSetup1125Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1125Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1126Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             upperFreqLimit: float64) -> int32;
    pub fn DAQmxAdjust1126Cal(calHandle: CalHandle, refFreq: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1141Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1141Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1142Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1142Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1143Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1143Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1502Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1502Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1503Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1503Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxAdjust1503CurrentCal(calHandle: CalHandle,
                                     channelName: *mut ::std::os::raw::c_char,
                                     measCurrent: float64) -> int32;
    pub fn DAQmxSetup1520Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1520Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1521Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAdjust1521Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup153xCal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust153xCal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1540Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             excitationVoltage: float64,
                             excitationFreq: float64) -> int32;
    pub fn DAQmxAdjust1540Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64, inputCalSource: int32)
     -> int32;
    pub fn DAQmxConfigureTEDS(physicalChannel: *mut ::std::os::raw::c_char,
                              filePath: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxClearTEDS(physicalChannel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxWriteToTEDSFromArray(physicalChannel:
                                         *mut ::std::os::raw::c_char,
                                     bitStream: *mut uInt8, arraySize: uInt32,
                                     basicTEDSOptions: int32) -> int32;
    pub fn DAQmxWriteToTEDSFromFile(physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    filePath: *mut ::std::os::raw::c_char,
                                    basicTEDSOptions: int32) -> int32;
    pub fn DAQmxGetPhysicalChanAttribute(physicalChannel:
                                             *mut ::std::os::raw::c_char,
                                         attribute: int32,
                                         value:
                                             *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxWaitForNextSampleClock(taskHandle: TaskHandle,
                                       timeout: float64, isLate: *mut bool32)
     -> int32;
    pub fn DAQmxGetRealTimeAttribute(taskHandle: TaskHandle, attribute: int32,
                                     value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetRealTimeAttribute(taskHandle: TaskHandle,
                                     attribute: int32, ...) -> int32;
    pub fn DAQmxResetRealTimeAttribute(taskHandle: TaskHandle,
                                       attribute: int32) -> int32;
    pub fn DAQmxIsReadOrWriteLate(errorCode: int32) -> bool32;
    pub fn DAQmxSaveTask(taskHandle: TaskHandle,
                         saveAs: *mut ::std::os::raw::c_char,
                         author: *mut ::std::os::raw::c_char, options: uInt32)
     -> int32;
    pub fn DAQmxSaveGlobalChan(taskHandle: TaskHandle,
                               channelName: *mut ::std::os::raw::c_char,
                               saveAs: *mut ::std::os::raw::c_char,
                               author: *mut ::std::os::raw::c_char,
                               options: uInt32) -> int32;
    pub fn DAQmxSaveScale(scaleName: *mut ::std::os::raw::c_char,
                          saveAs: *mut ::std::os::raw::c_char,
                          author: *mut ::std::os::raw::c_char,
                          options: uInt32) -> int32;
    pub fn DAQmxDeleteSavedTask(taskName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxDeleteSavedGlobalChan(channelName:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxDeleteSavedScale(scaleName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetPersistedTaskAttribute(taskName:
                                              *mut ::std::os::raw::c_char,
                                          attribute: int32,
                                          value:
                                              *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxGetPersistedChanAttribute(channel:
                                              *mut ::std::os::raw::c_char,
                                          attribute: int32,
                                          value:
                                              *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxGetPersistedScaleAttribute(scaleName:
                                               *mut ::std::os::raw::c_char,
                                           attribute: int32,
                                           value:
                                               *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxGetSystemInfoAttribute(attribute: int32,
                                       value:
                                           *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetDigitalPowerUpStates(deviceName:
                                            *mut ::std::os::raw::c_char,
                                        channelNames:
                                            *mut ::std::os::raw::c_char,
                                        state: int32, ...) -> int32;
    pub fn DAQmxGetDigitalPowerUpStates(deviceName:
                                            *mut ::std::os::raw::c_char,
                                        channelName:
                                            *mut ::std::os::raw::c_char,
                                        state: *mut int32, ...) -> int32;
    pub fn DAQmxSetDigitalPullUpPullDownStates(deviceName:
                                                   *mut ::std::os::raw::c_char,
                                               channelName:
                                                   *mut ::std::os::raw::c_char,
                                               state: int32, ...) -> int32;
    pub fn DAQmxGetDigitalPullUpPullDownStates(deviceName:
                                                   *mut ::std::os::raw::c_char,
                                               channelName:
                                                   *mut ::std::os::raw::c_char,
                                               state: *mut int32, ...)
     -> int32;
    pub fn DAQmxSetAnalogPowerUpStates(deviceName:
                                           *mut ::std::os::raw::c_char,
                                       channelNames:
                                           *mut ::std::os::raw::c_char,
                                       state: float64,
                                       channelType: int32, ...) -> int32;
    pub fn DAQmxSetAnalogPowerUpStatesWithOutputType(channelNames:
                                                         *mut ::std::os::raw::c_char,
                                                     stateArray: *mut float64,
                                                     channelTypeArray:
                                                         *mut int32,
                                                     arraySize: uInt32)
     -> int32;
    pub fn DAQmxGetAnalogPowerUpStates(deviceName:
                                           *mut ::std::os::raw::c_char,
                                       channelName:
                                           *mut ::std::os::raw::c_char,
                                       state: *mut float64,
                                       channelType: int32, ...) -> int32;
    pub fn DAQmxGetAnalogPowerUpStatesWithOutputType(channelNames:
                                                         *mut ::std::os::raw::c_char,
                                                     stateArray: *mut float64,
                                                     channelTypeArray:
                                                         *mut int32,
                                                     arraySizePtr:
                                                         *mut uInt32)
     -> int32;
    pub fn DAQmxSetDigitalLogicFamilyPowerUpState(deviceName:
                                                      *mut ::std::os::raw::c_char,
                                                  logicFamily: int32)
     -> int32;
    pub fn DAQmxGetDigitalLogicFamilyPowerUpState(deviceName:
                                                      *mut ::std::os::raw::c_char,
                                                  logicFamily: *mut int32)
     -> int32;
    pub fn DAQmxAddNetworkDevice(IPAddress: *mut ::std::os::raw::c_char,
                                 deviceName: *mut ::std::os::raw::c_char,
                                 attemptReservation: bool32, timeout: float64,
                                 deviceNameOut: *mut ::std::os::raw::c_char,
                                 deviceNameOutBufferSize: uInt32) -> int32;
    pub fn DAQmxDeleteNetworkDevice(deviceName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxReserveNetworkDevice(deviceName: *mut ::std::os::raw::c_char,
                                     overrideReservation: bool32) -> int32;
    pub fn DAQmxUnreserveNetworkDevice(deviceName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAutoConfigureCDAQSyncConnections(chassisDevicesPorts:
                                                     *mut ::std::os::raw::c_char,
                                                 timeout: float64) -> int32;
    pub fn DAQmxGetAutoConfiguredCDAQSyncConnections(portList:
                                                         *mut ::std::os::raw::c_char,
                                                     portListSize: uInt32)
     -> int32;
    pub fn DAQmxAreConfiguredCDAQSyncPortsDisconnected(chassisDevicesPorts:
                                                           *mut ::std::os::raw::c_char,
                                                       timeout: float64,
                                                       disconnectedPortsExist:
                                                           *mut bool32)
     -> int32;
    pub fn DAQmxGetDisconnectedCDAQSyncPorts(portList:
                                                 *mut ::std::os::raw::c_char,
                                             portListSize: uInt32) -> int32;
    pub fn DAQmxAddCDAQSyncConnection(portList: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxRemoveCDAQSyncConnection(portList:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetErrorString(errorCode: int32,
                               errorString: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetExtendedErrorInfo(errorString: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxGetBufInputBufSize(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetBufInputBufSize(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetBufInputBufSize(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetBufInputOnbrdBufSize(taskHandle: TaskHandle,
                                        data: *mut uInt32) -> int32;
    pub fn DAQmxGetBufOutputBufSize(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetBufOutputBufSize(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetBufOutputBufSize(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetBufOutputOnbrdBufSize(taskHandle: TaskHandle,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxSetBufOutputOnbrdBufSize(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetBufOutputOnbrdBufSize(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSelfCalSupported(deviceName: *mut ::std::os::raw::c_char,
                                    data: *mut bool32) -> int32;
    pub fn DAQmxGetSelfCalLastTemp(deviceName: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxGetExtCalRecommendedInterval(deviceName:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxGetExtCalLastTemp(deviceName: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxGetCalUserDefinedInfo(deviceName: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCalUserDefinedInfo(deviceName: *mut ::std::os::raw::c_char,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCalUserDefinedInfoMaxSize(deviceName:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxGetCalDevTemp(deviceName: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxGetCalAccConnectionCount(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxSetCalAccConnectionCount(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         data: uInt32) -> int32;
    pub fn DAQmxGetCalRecommendedAccConnectionCountLimit(deviceName:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetAIMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetAIMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIMax(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetAIMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIMin(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAICustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAICustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAICustomScaleName(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIMeasType(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxGetAIVoltageUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAIVoltageUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAIVoltageUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVoltagedBRef(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetAIVoltagedBRef(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetAIVoltagedBRef(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVoltageACRMSUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetAIVoltageACRMSUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetAIVoltageACRMSUnits(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAITempUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAITempUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAITempUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIThrmcplType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIThrmcplType(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplScaleType(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAIThrmcplScaleType(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAIThrmcplScaleType(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplCJCSrc(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxGetAIThrmcplCJCVal(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmcplCJCVal(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetAIThrmcplCJCVal(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplCJCChan(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxGetAIRTDType(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut int32) -> int32;
    pub fn DAQmxSetAIRTDType(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: int32) -> int32;
    pub fn DAQmxResetAIRTDType(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRTDR0(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: *mut float64) -> int32;
    pub fn DAQmxSetAIRTDR0(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: float64) -> int32;
    pub fn DAQmxResetAIRTDR0(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRTDA(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIRTDA(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIRTDA(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRTDB(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIRTDB(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIRTDB(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRTDC(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIRTDC(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIRTDC(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIThrmstrA(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmstrA(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIThrmstrA(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmstrB(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmstrB(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIThrmstrB(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmstrC(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmstrC(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIThrmstrC(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmstrR1(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmstrR1(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetAIThrmstrR1(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIForceReadFromChan(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIForceReadFromChan(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetAIForceReadFromChan(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAICurrentUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAICurrentUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAICurrentUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAICurrentACRMSUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetAICurrentACRMSUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetAICurrentACRMSUnits(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIStrainUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIStrainUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainGageForceReadFromChan(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAIStrainGageForceReadFromChan(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAIStrainGageForceReadFromChan(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainGageGageFactor(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIStrainGageGageFactor(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetAIStrainGageGageFactor(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainGagePoissonRatio(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAIStrainGagePoissonRatio(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAIStrainGagePoissonRatio(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainGageCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIStrainGageCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIStrainGageCfg(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRosetteStrainGageRosetteType(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxGetAIRosetteStrainGageOrientation(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIRosetteStrainGageOrientation(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: float64) -> int32;
    pub fn DAQmxResetAIRosetteStrainGageOrientation(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRosetteStrainGageStrainChans(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxGetAIRosetteStrainGageRosetteMeasType(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIRosetteStrainGageRosetteMeasType(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: int32) -> int32;
    pub fn DAQmxResetAIRosetteStrainGageRosetteMeasType(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIResistanceUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIResistanceUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIResistanceUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFreqUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAIFreqUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAIFreqUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFreqThreshVoltage(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAIFreqThreshVoltage(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: float64) -> int32;
    pub fn DAQmxResetAIFreqThreshVoltage(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFreqHyst(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIFreqHyst(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIFreqHyst(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILVDTUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAILVDTUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAILVDTUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILVDTSensitivity(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAILVDTSensitivity(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetAILVDTSensitivity(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILVDTSensitivityUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAILVDTSensitivityUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetAILVDTSensitivityUnits(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRVDTUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAIRVDTUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAIRVDTUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRVDTSensitivity(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAIRVDTSensitivity(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetAIRVDTSensitivity(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRVDTSensitivityUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAIRVDTSensitivityUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetAIRVDTSensitivityUnits(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIEddyCurrentProxProbeUnits(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetAIEddyCurrentProxProbeUnits(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetAIEddyCurrentProxProbeUnits(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIEddyCurrentProxProbeSensitivity(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIEddyCurrentProxProbeSensitivity(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: float64) -> int32;
    pub fn DAQmxResetAIEddyCurrentProxProbeSensitivity(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIEddyCurrentProxProbeSensitivityUnits(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIEddyCurrentProxProbeSensitivityUnits(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: int32)
     -> int32;
    pub fn DAQmxResetAIEddyCurrentProxProbeSensitivityUnits(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAISoundPressureMaxSoundPressureLvl(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetAISoundPressureMaxSoundPressureLvl(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: float64) -> int32;
    pub fn DAQmxResetAISoundPressureMaxSoundPressureLvl(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAISoundPressureUnits(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAISoundPressureUnits(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetAISoundPressureUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAISoundPressuredBRef(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAISoundPressuredBRef(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetAISoundPressuredBRef(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIMicrophoneSensitivity(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetAIMicrophoneSensitivity(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetAIMicrophoneSensitivity(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelUnits(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxSetAIAccelUnits(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: int32) -> int32;
    pub fn DAQmxResetAIAccelUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAcceldBRef(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIAcceldBRef(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: float64) -> int32;
    pub fn DAQmxResetAIAcceldBRef(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccel4WireDCVoltageSensitivity(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIAccel4WireDCVoltageSensitivity(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetAIAccel4WireDCVoltageSensitivity(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccel4WireDCVoltageSensitivityUnits(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIAccel4WireDCVoltageSensitivityUnits(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: int32)
     -> int32;
    pub fn DAQmxResetAIAccel4WireDCVoltageSensitivityUnits(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelSensitivity(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetAIAccelSensitivity(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetAIAccelSensitivity(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelSensitivityUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAIAccelSensitivityUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetAIAccelSensitivityUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelChargeSensitivity(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAIAccelChargeSensitivity(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAIAccelChargeSensitivity(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelChargeSensitivityUnits(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIAccelChargeSensitivityUnits(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: int32) -> int32;
    pub fn DAQmxResetAIAccelChargeSensitivityUnits(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVelocityUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIVelocityUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIVelocityUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVelocityIEPESensordBRef(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64) -> int32;
    pub fn DAQmxSetAIVelocityIEPESensordBRef(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: float64) -> int32;
    pub fn DAQmxResetAIVelocityIEPESensordBRef(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVelocityIEPESensorSensitivity(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIVelocityIEPESensorSensitivity(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetAIVelocityIEPESensorSensitivity(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVelocityIEPESensorSensitivityUnits(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIVelocityIEPESensorSensitivityUnits(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: int32) -> int32;
    pub fn DAQmxResetAIVelocityIEPESensorSensitivityUnits(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIForceUnits(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxSetAIForceUnits(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: int32) -> int32;
    pub fn DAQmxResetAIForceUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIForceIEPESensorSensitivity(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIForceIEPESensorSensitivity(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: float64) -> int32;
    pub fn DAQmxResetAIForceIEPESensorSensitivity(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIForceIEPESensorSensitivityUnits(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIForceIEPESensorSensitivityUnits(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: int32) -> int32;
    pub fn DAQmxResetAIForceIEPESensorSensitivityUnits(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIPressureUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIPressureUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIPressureUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAITorqueUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAITorqueUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAITorqueUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIBridgeUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeElectricalUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeElectricalUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetAIBridgeElectricalUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgePhysicalUnits(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgePhysicalUnits(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetAIBridgePhysicalUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeScaleType(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeScaleType(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIBridgeScaleType(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTwoPointLinFirstElectricalVal(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeTwoPointLinFirstElectricalVal(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeTwoPointLinFirstElectricalVal(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTwoPointLinSecondElectricalVal(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeTwoPointLinSecondElectricalVal(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeTwoPointLinSecondElectricalVal(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTableElectricalVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIBridgeTableElectricalVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIBridgeTableElectricalVals(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTablePhysicalVals(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIBridgeTablePhysicalVals(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIBridgeTablePhysicalVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgePolyForwardCoeff(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIBridgePolyForwardCoeff(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIBridgePolyForwardCoeff(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgePolyReverseCoeff(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIBridgePolyReverseCoeff(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIBridgePolyReverseCoeff(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChargeUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIChargeUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIChargeUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIIsTEDS(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char,
                            data: *mut bool32) -> int32;
    pub fn DAQmxGetAITEDSUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetAICoupling(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxSetAICoupling(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: int32) -> int32;
    pub fn DAQmxResetAICoupling(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIImpedance(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIImpedance(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetAIImpedance(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAITermCfg(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut int32) -> int32;
    pub fn DAQmxSetAITermCfg(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: int32) -> int32;
    pub fn DAQmxResetAITermCfg(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIInputSrc(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIInputSrc(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetAIInputSrc(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIResistanceCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIResistanceCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIResistanceCfg(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILeadWireResistance(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAILeadWireResistance(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetAILeadWireResistance(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeCfg(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeCfg(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAIBridgeCfg(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeNomResistance(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetAIBridgeNomResistance(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: float64) -> int32;
    pub fn DAQmxResetAIBridgeNomResistance(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeInitialVoltage(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIBridgeInitialVoltage(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetAIBridgeInitialVoltage(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeInitialRatio(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAIBridgeInitialRatio(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetAIBridgeInitialRatio(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetAIBridgeShuntCalEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetAIBridgeShuntCalEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalSelect(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeShuntCalSelect(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetAIBridgeShuntCalSelect(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalASrc(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalASrc(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalASrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalGainAdjust(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIBridgeShuntCalGainAdjust(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: float64) -> int32;
    pub fn DAQmxResetAIBridgeShuntCalGainAdjust(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalAResistance(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalAResistance(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalAResistance(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalAActualResistance(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalAActualResistance(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalAActualResistance(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalBResistance(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalBResistance(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalBResistance(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalBActualResistance(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalBActualResistance(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalBActualResistance(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeBalanceCoarsePot(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeBalanceCoarsePot(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetAIBridgeBalanceCoarsePot(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeBalanceFinePot(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeBalanceFinePot(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetAIBridgeBalanceFinePot(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAICurrentShuntLoc(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAICurrentShuntLoc(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAICurrentShuntLoc(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAICurrentShuntResistance(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAICurrentShuntResistance(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAICurrentShuntResistance(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitSense(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitSense(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: int32) -> int32;
    pub fn DAQmxResetAIExcitSense(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitSrc(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitSrc(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: int32) -> int32;
    pub fn DAQmxResetAIExcitSrc(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitVal(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIExcitVal(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIExcitVal(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitUseForScaling(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxSetAIExcitUseForScaling(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: bool32) -> int32;
    pub fn DAQmxResetAIExcitUseForScaling(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitUseMultiplexed(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetAIExcitUseMultiplexed(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetAIExcitUseMultiplexed(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitActualVal(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxSetAIExcitActualVal(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: float64) -> int32;
    pub fn DAQmxResetAIExcitActualVal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitDCorAC(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitDCorAC(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIExcitDCorAC(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitVoltageOrCurrent(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitVoltageOrCurrent(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetAIExcitVoltageOrCurrent(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitIdleOutputBehavior(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitIdleOutputBehavior(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: int32) -> int32;
    pub fn DAQmxResetAIExcitIdleOutputBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIACExcitFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxSetAIACExcitFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: float64) -> int32;
    pub fn DAQmxResetAIACExcitFreq(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIACExcitSyncEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIACExcitSyncEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetAIACExcitSyncEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIACExcitWireMode(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIACExcitWireMode(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIACExcitWireMode(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIOpenThrmcplDetectEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetAIOpenThrmcplDetectEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetAIOpenThrmcplDetectEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplLeadOffsetVoltage(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmcplLeadOffsetVoltage(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: float64) -> int32;
    pub fn DAQmxResetAIThrmcplLeadOffsetVoltage(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAtten(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: *mut float64) -> int32;
    pub fn DAQmxSetAIAtten(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: float64) -> int32;
    pub fn DAQmxResetAIAtten(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIProbeAtten(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIProbeAtten(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: float64) -> int32;
    pub fn DAQmxResetAIProbeAtten(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut bool32) -> int32;
    pub fn DAQmxSetAILowpassEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: bool32) -> int32;
    pub fn DAQmxResetAILowpassEnable(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassCutoffFreq(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAILowpassCutoffFreq(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: float64) -> int32;
    pub fn DAQmxResetAILowpassCutoffFreq(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassSwitchCapClkSrc(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAILowpassSwitchCapClkSrc(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetAILowpassSwitchCapClkSrc(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassSwitchCapExtClkFreq(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxSetAILowpassSwitchCapExtClkFreq(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: float64) -> int32;
    pub fn DAQmxResetAILowpassSwitchCapExtClkFreq(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassSwitchCapExtClkDiv(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetAILowpassSwitchCapExtClkDiv(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: uInt32) -> int32;
    pub fn DAQmxResetAILowpassSwitchCapExtClkDiv(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassSwitchCapOutClkDiv(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetAILowpassSwitchCapOutClkDiv(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: uInt32) -> int32;
    pub fn DAQmxResetAILowpassSwitchCapOutClkDiv(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut bool32) -> int32;
    pub fn DAQmxSetAIDigFltrEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: bool32) -> int32;
    pub fn DAQmxResetAIDigFltrEnable(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIDigFltrType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIDigFltrType(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrResponse(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIDigFltrResponse(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIDigFltrResponse(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrOrder(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIDigFltrOrder(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: uInt32) -> int32;
    pub fn DAQmxResetAIDigFltrOrder(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrLowpassCutoffFreq(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrLowpassCutoffFreq(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrLowpassCutoffFreq(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrHighpassCutoffFreq(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrHighpassCutoffFreq(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrHighpassCutoffFreq(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrBandpassCenterFreq(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrBandpassCenterFreq(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrBandpassCenterFreq(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrBandpassWidth(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrBandpassWidth(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrBandpassWidth(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrNotchCenterFreq(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrNotchCenterFreq(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrNotchCenterFreq(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrNotchWidth(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrNotchWidth(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrNotchWidth(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrCoeff(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxSetAIDigFltrCoeff(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxResetAIDigFltrCoeff(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFilterDelay(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxGetAIFilterDelayUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAIFilterDelayUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAIFilterDelayUnits(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRemoveFilterDelay(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIRemoveFilterDelay(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetAIRemoveFilterDelay(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFilterDelayAdjustment(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetAIFilterDelayAdjustment(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetAIFilterDelayAdjustment(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAveragingWinSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIAveragingWinSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: uInt32) -> int32;
    pub fn DAQmxResetAIAveragingWinSize(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIResolutionUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxGetAIResolution(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetAIRawSampSize(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxGetAIRawSampJustification(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxGetAIADCTimingMode(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIADCTimingMode(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIADCTimingMode(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIADCCustomTimingMode(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIADCCustomTimingMode(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: uInt32) -> int32;
    pub fn DAQmxResetAIADCCustomTimingMode(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDitherEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAIDitherEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetAIDitherEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalHasValidCalInfo(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxGetAIChanCalEnableCal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut bool32) -> int32;
    pub fn DAQmxSetAIChanCalEnableCal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: bool32) -> int32;
    pub fn DAQmxResetAIChanCalEnableCal(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalApplyCalIfExp(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetAIChanCalApplyCalIfExp(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetAIChanCalApplyCalIfExp(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalScaleType(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAIChanCalScaleType(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAIChanCalScaleType(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalTablePreScaledVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalTablePreScaledVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalTablePreScaledVals(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalTableScaledVals(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalTableScaledVals(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalTableScaledVals(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalPolyForwardCoeff(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalPolyForwardCoeff(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalPolyForwardCoeff(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalPolyReverseCoeff(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalPolyReverseCoeff(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalPolyReverseCoeff(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalOperatorName(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut ::std::os::raw::c_char,
                                         bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIChanCalOperatorName(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAIChanCalOperatorName(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalDesc(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIChanCalDesc(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAIChanCalDesc(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalVerifRefVals(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalVerifRefVals(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalVerifRefVals(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalVerifAcqVals(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalVerifAcqVals(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalVerifAcqVals(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRngHigh(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut float64) -> int32;
    pub fn DAQmxSetAIRngHigh(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: float64) -> int32;
    pub fn DAQmxResetAIRngHigh(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRngLow(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char,
                            data: *mut float64) -> int32;
    pub fn DAQmxSetAIRngLow(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char,
                            data: float64) -> int32;
    pub fn DAQmxResetAIRngLow(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIDCOffset(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIDCOffset(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIDCOffset(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIGain(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIGain(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIGain(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAISampAndHoldEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAISampAndHoldEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetAISampAndHoldEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAutoZeroMode(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAIAutoZeroMode(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAIAutoZeroMode(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAIDataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIDataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDataXferCustomThreshold(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIDataXferCustomThreshold(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: uInt32) -> int32;
    pub fn DAQmxResetAIDataXferCustomThreshold(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetAIUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetAIUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetAIMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRawDataCompressionType(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAIRawDataCompressionType(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetAIRawDataCompressionType(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILossyLSBRemovalCompressedSampSize(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetAILossyLSBRemovalCompressedSampSize(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: uInt32) -> int32;
    pub fn DAQmxResetAILossyLSBRemovalCompressedSampSize(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDevScalingCoeff(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64,
                                     arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetAIEnhancedAliasRejectionEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAIEnhancedAliasRejectionEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetAIEnhancedAliasRejectionEnable(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIOpenChanDetectEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetAIOpenChanDetectEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetAIOpenChanDetectEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetAOMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAOMax(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAOMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetAOMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAOMin(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAOCustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAOCustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAOCustomScaleName(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOOutputType(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxGetAOVoltageUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAOVoltageUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAOVoltageUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOVoltageCurrentLimit(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetAOVoltageCurrentLimit(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: float64) -> int32;
    pub fn DAQmxResetAOVoltageCurrentLimit(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOCurrentUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAOCurrentUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAOCurrentUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAOFuncGenType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAOFuncGenType(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenFreq(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenAmplitude(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenAmplitude(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenAmplitude(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenOffset(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenOffset(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenOffset(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenSquareDutyCycle(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenSquareDutyCycle(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenSquareDutyCycle(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenModulationType(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAOFuncGenModulationType(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetAOFuncGenModulationType(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenFMDeviation(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenFMDeviation(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenFMDeviation(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOOutputImpedance(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAOOutputImpedance(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetAOOutputImpedance(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOLoadImpedance(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetAOLoadImpedance(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetAOLoadImpedance(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOIdleOutputBehavior(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAOIdleOutputBehavior(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetAOIdleOutputBehavior(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOTermCfg(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut int32) -> int32;
    pub fn DAQmxSetAOTermCfg(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: int32) -> int32;
    pub fn DAQmxResetAOTermCfg(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAOResolutionUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAOResolutionUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAOResolutionUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOResolution(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetAODACRngHigh(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxSetAODACRngHigh(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: float64) -> int32;
    pub fn DAQmxResetAODACRngHigh(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRngLow(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetAODACRngLow(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetAODACRngLow(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefConnToGnd(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetAODACRefConnToGnd(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetAODACRefConnToGnd(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefAllowConnToGnd(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetAODACRefAllowConnToGnd(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetAODACRefAllowConnToGnd(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefSrc(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAODACRefSrc(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAODACRefSrc(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefExtSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut ::std::os::raw::c_char,
                                  bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAODACRefExtSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAODACRefExtSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefVal(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetAODACRefVal(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetAODACRefVal(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACOffsetSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAODACOffsetSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAODACOffsetSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACOffsetExtSrc(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAODACOffsetExtSrc(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAODACOffsetExtSrc(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACOffsetVal(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetAODACOffsetVal(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetAODACOffsetVal(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOReglitchEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut bool32) -> int32;
    pub fn DAQmxSetAOReglitchEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: bool32) -> int32;
    pub fn DAQmxResetAOReglitchEnable(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFilterDelay(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxSetAOFilterDelay(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: float64) -> int32;
    pub fn DAQmxResetAOFilterDelay(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFilterDelayUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAOFilterDelayUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAOFilterDelayUnits(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFilterDelayAdjustment(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetAOFilterDelayAdjustment(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetAOFilterDelayAdjustment(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOGain(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAOGain(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAOGain(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetAOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetAOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAODataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAODataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetAOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetAOUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetAOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetAOUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetAOMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODevScalingCoeff(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64,
                                     arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetAOEnhancedImageRejectionEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAOEnhancedImageRejectionEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetAOEnhancedImageRejectionEnable(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIInvertLines(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetDIInvertLines(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: bool32) -> int32;
    pub fn DAQmxResetDIInvertLines(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDINumLines(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut uInt32) -> int32;
    pub fn DAQmxGetDIDigFltrEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut bool32) -> int32;
    pub fn DAQmxSetDIDigFltrEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: bool32) -> int32;
    pub fn DAQmxResetDIDigFltrEnable(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetDIDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetDIDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigFltrEnableBusMode(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetDIDigFltrEnableBusMode(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetDIDigFltrEnableBusMode(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDIDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDIDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigFltrTimebaseRate(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetDIDigFltrTimebaseRate(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: float64) -> int32;
    pub fn DAQmxResetDIDigFltrTimebaseRate(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigSyncEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut bool32) -> int32;
    pub fn DAQmxSetDIDigSyncEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: bool32) -> int32;
    pub fn DAQmxResetDIDigSyncEnable(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDITristate(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut bool32) -> int32;
    pub fn DAQmxSetDITristate(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: bool32) -> int32;
    pub fn DAQmxResetDITristate(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDILogicFamily(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetDILogicFamily(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetDILogicFamily(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetDIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetDIDataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetDIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetDIDataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetDIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetDIUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetDIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetDIUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetDIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetDIMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIAcquireOn(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetDIAcquireOn(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetDIAcquireOn(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOOutputDriveType(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetDOOutputDriveType(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetDOOutputDriveType(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOInvertLines(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetDOInvertLines(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: bool32) -> int32;
    pub fn DAQmxResetDOInvertLines(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDONumLines(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut uInt32) -> int32;
    pub fn DAQmxGetDOTristate(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut bool32) -> int32;
    pub fn DAQmxSetDOTristate(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: bool32) -> int32;
    pub fn DAQmxResetDOTristate(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOLineStatesStartState(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetDOLineStatesStartState(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetDOLineStatesStartState(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOLineStatesPausedState(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetDOLineStatesPausedState(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetDOLineStatesPausedState(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOLineStatesDoneState(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetDOLineStatesDoneState(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetDOLineStatesDoneState(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOLogicFamily(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetDOLogicFamily(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetDOLogicFamily(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOOvercurrentLimit(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetDOOvercurrentLimit(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetDOOvercurrentLimit(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOOvercurrentAutoReenable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetDOOvercurrentAutoReenable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetDOOvercurrentAutoReenable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOOvercurrentReenablePeriod(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetDOOvercurrentReenablePeriod(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetDOOvercurrentReenablePeriod(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetDOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetDOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetDODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetDODataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetDODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetDODataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetDOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetDOUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetDOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetDOUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetDOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetDOMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOGenerateOn(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxSetDOGenerateOn(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: int32) -> int32;
    pub fn DAQmxResetDOGenerateOn(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetCIMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetCIMax(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetCIMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetCIMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetCIMin(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetCICustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICustomScaleName(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIMeasType(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxGetCIFreqUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetCIFreqUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqTerm(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIFreqTerm(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetCIFreqTerm(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqTermCfg(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqTermCfg(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetCIFreqTermCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCIFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigFltrEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetCIFreqDigFltrEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetCIFreqDigFltrEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetCIFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: float64) -> int32;
    pub fn DAQmxResetCIFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data:
                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64) -> int32;
    pub fn DAQmxSetCIFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: float64) -> int32;
    pub fn DAQmxResetCIFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigSyncEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetCIFreqDigSyncEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetCIFreqDigSyncEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqStartingEdge(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqStartingEdge(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetCIFreqStartingEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqMeasMeth(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqMeasMeth(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetCIFreqMeasMeth(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqEnableAveraging(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetCIFreqEnableAveraging(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetCIFreqEnableAveraging(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqMeasTime(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetCIFreqMeasTime(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetCIFreqMeasTime(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDiv(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIFreqDiv(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: uInt32) -> int32;
    pub fn DAQmxResetCIFreqDiv(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetCIPeriodUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetCIPeriodUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodTerm(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPeriodTerm(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetCIPeriodTerm(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodTermCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodTermCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetCIPeriodTermCfg(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCIPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigFltrEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPeriodDigFltrEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetCIPeriodDigFltrEnable(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxSetCIPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: float64) -> int32;
    pub fn DAQmxResetCIPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetCIPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetCIPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigSyncEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPeriodDigSyncEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetCIPeriodDigSyncEnable(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodStartingEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodStartingEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCIPeriodStartingEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodMeasMeth(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodMeasMeth(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCIPeriodMeasMeth(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodEnableAveraging(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPeriodEnableAveraging(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: bool32) -> int32;
    pub fn DAQmxResetCIPeriodEnableAveraging(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodMeasTime(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxSetCIPeriodMeasTime(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: float64) -> int32;
    pub fn DAQmxResetCIPeriodMeasTime(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDiv(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIPeriodDiv(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: uInt32) -> int32;
    pub fn DAQmxResetCIPeriodDiv(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesTerm(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesTermCfg(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesLogicLvlBehavior(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesDigFltrEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCICountEdgesDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCICountEdgesDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesDigSyncEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDir(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesDir(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesDir(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDirTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesDirTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesDirTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirTermCfg(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesCountDirTermCfg(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesCountDirTermCfg(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirLogicLvlBehavior(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut int32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirLogicLvlBehavior(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesCountDirLogicLvlBehavior(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigFltrEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigFltrEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigFltrEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char,
                                                            data:
                                                                *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char,
                                                            data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data:
                                                              *mut ::std::os::raw::c_char,
                                                          bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data:
                                                              *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigSyncEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigSyncEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigSyncEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesInitialCnt(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesInitialCnt(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: uInt32) -> int32;
    pub fn DAQmxResetCICountEdgesInitialCnt(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesActiveEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesActiveEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesActiveEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesCountResetEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetResetCount(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetResetCount(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: uInt32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetResetCount(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetTerm(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesCountResetTerm(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetTerm(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetTermCfg(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesCountResetTermCfg(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetTermCfg(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetLogicLvlBehavior(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut int32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetLogicLvlBehavior(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: int32)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetLogicLvlBehavior(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigFltrEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigFltrEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigFltrEnable(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data:
                                                                  *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth(taskHandle:
                                                                    TaskHandle,
                                                                channel:
                                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char,
                                                            data:
                                                                *mut ::std::os::raw::c_char,
                                                            bufferSize:
                                                                uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char,
                                                            data:
                                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigSyncEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigSyncEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigSyncEnable(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetActiveEdge(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut int32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetActiveEdge(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetActiveEdge(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesGateEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesGateEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateTerm(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesGateTerm(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesGateTerm(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateTermCfg(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesGateTermCfg(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesGateTermCfg(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateLogicLvlBehavior(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut int32)
     -> int32;
    pub fn DAQmxSetCICountEdgesGateLogicLvlBehavior(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesGateLogicLvlBehavior(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateDigFltrEnable(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesGateDigFltrEnable(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesGateDigFltrEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesGateDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesGateDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesGateDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesGateDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesGateDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesGateDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateWhen(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesGateWhen(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesGateWhen(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut ::std::os::raw::c_char,
                                   bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIDutyCycleTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIDutyCycleTerm(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetCIDutyCycleTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetCIDutyCycleTermCfg(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCIDutyCycleLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCIDutyCycleLogicLvlBehavior(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIDutyCycleDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIDutyCycleDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIDutyCycleDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIDutyCycleDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIDutyCycleDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIDutyCycleDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIDutyCycleDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: float64) -> int32;
    pub fn DAQmxResetCIDutyCycleDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleStartingEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetCIDutyCycleStartingEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetCIDutyCycleStartingEdge(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIAngEncoderUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCIAngEncoderUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCIAngEncoderUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: uInt32) -> int32;
    pub fn DAQmxResetCIAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIAngEncoderInitialAngle(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetCIAngEncoderInitialAngle(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetCIAngEncoderInitialAngle(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCILinEncoderUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCILinEncoderUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCILinEncoderUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCILinEncoderDistPerPulse(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetCILinEncoderDistPerPulse(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetCILinEncoderDistPerPulse(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCILinEncoderInitialPos(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetCILinEncoderInitialPos(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetCILinEncoderInitialPos(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderDecodingType(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderDecodingType(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetCIEncoderDecodingType(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIEncoderAInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderAInputTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderAInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCIEncoderAInputTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderAInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: int32) -> int32;
    pub fn DAQmxResetCIEncoderAInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderAInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderAInputDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderAInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetCIEncoderAInputDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIEncoderAInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderAInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderAInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: float64) -> int32;
    pub fn DAQmxResetCIEncoderAInputDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderAInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderAInputDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIEncoderBInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderBInputTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderBInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCIEncoderBInputTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderBInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: int32) -> int32;
    pub fn DAQmxResetCIEncoderBInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderBInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderBInputDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderBInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetCIEncoderBInputDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIEncoderBInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderBInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderBInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: float64) -> int32;
    pub fn DAQmxResetCIEncoderBInputDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderBInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderBInputDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIEncoderZInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderZInputTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderZInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCIEncoderZInputTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderZInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: int32) -> int32;
    pub fn DAQmxResetCIEncoderZInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderZInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderZInputDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderZInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetCIEncoderZInputDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIEncoderZInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderZInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderZInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: float64) -> int32;
    pub fn DAQmxResetCIEncoderZInputDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderZInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderZInputDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZIndexEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderZIndexEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderZIndexEnable(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZIndexVal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetCIEncoderZIndexVal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetCIEncoderZIndexVal(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZIndexPhase(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderZIndexPhase(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCIEncoderZIndexPhase(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseWidthUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCIPulseWidthUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseWidthTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseWidthTerm(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseWidthTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetCIPulseWidthTermCfg(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseWidthLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetCIPulseWidthLogicLvlBehavior(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseWidthDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCIPulseWidthDigFltrEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseWidthDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCIPulseWidthDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIPulseWidthDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseWidthDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseWidthDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIPulseWidthDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseWidthDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCIPulseWidthDigSyncEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthStartingEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseWidthStartingEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCIPulseWidthStartingEdge(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITimestampUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCITimestampUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCITimestampUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITimestampInitialSeconds(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxSetCITimestampInitialSeconds(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: uInt32) -> int32;
    pub fn DAQmxResetCITimestampInitialSeconds(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIGPSSyncMethod(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIGPSSyncMethod(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetCIGPSSyncMethod(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIGPSSyncSrc(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIGPSSyncSrc(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetCIGPSSyncSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityAngEncoderUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityAngEncoderUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: int32) -> int32;
    pub fn DAQmxResetCIVelocityAngEncoderUnits(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetCIVelocityAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: uInt32) -> int32;
    pub fn DAQmxResetCIVelocityAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityLinEncoderUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityLinEncoderUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: int32) -> int32;
    pub fn DAQmxResetCIVelocityLinEncoderUnits(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityLinEncoderDistPerPulse(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityLinEncoderDistPerPulse(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCIVelocityLinEncoderDistPerPulse(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderDecodingType(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderDecodingType(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: int32) -> int32;
    pub fn DAQmxResetCIVelocityEncoderDecodingType(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputTerm(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputTerm(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputTerm(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputTermCfg(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputTermCfg(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: int32) -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputTermCfg(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputLogicLvlBehavior(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: *mut int32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputLogicLvlBehavior(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: int32)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputLogicLvlBehavior(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrEnable(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrEnable(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: bool32)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrEnable(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrMinPulseWidth(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char,
                                                               data:
                                                                   *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrMinPulseWidth(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char,
                                                               data: float64)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrMinPulseWidth(taskHandle:
                                                                     TaskHandle,
                                                                 channel:
                                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseSrc(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut ::std::os::raw::c_char,
                                                             bufferSize:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseSrc(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseSrc(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseRate(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data:
                                                                  *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseRate(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data: float64)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseRate(taskHandle:
                                                                    TaskHandle,
                                                                channel:
                                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputTerm(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputTerm(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputTerm(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputTermCfg(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputTermCfg(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: int32) -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputTermCfg(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputLogicLvlBehavior(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: *mut int32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputLogicLvlBehavior(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: int32)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputLogicLvlBehavior(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrEnable(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrEnable(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: bool32)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrEnable(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrMinPulseWidth(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char,
                                                               data:
                                                                   *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrMinPulseWidth(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char,
                                                               data: float64)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrMinPulseWidth(taskHandle:
                                                                     TaskHandle,
                                                                 channel:
                                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseSrc(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut ::std::os::raw::c_char,
                                                             bufferSize:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseSrc(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseSrc(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseRate(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data:
                                                                  *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseRate(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data: float64)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseRate(taskHandle:
                                                                    TaskHandle,
                                                                channel:
                                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityMeasTime(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetCIVelocityMeasTime(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetCIVelocityMeasTime(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityDiv(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIVelocityDiv(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: uInt32) -> int32;
    pub fn DAQmxResetCIVelocityDiv(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut ::std::os::raw::c_char,
                                         bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstTerm(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstTermCfg(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut int32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstLogicLvlBehavior(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrEnable(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut float64)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: float64)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data:
                                                           *mut ::std::os::raw::c_char,
                                                       bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data:
                                                           *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigSyncEnable(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstEdge(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstEdge(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondTerm(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondTerm(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondTerm(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondTermCfg(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondTermCfg(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondTermCfg(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondLogicLvlBehavior(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondLogicLvlBehavior(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondLogicLvlBehavior(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: bool32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut float64)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: float64)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data:
                                                            *mut ::std::os::raw::c_char,
                                                        bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data:
                                                            *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut float64)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: float64)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigSyncEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigSyncEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: bool32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigSyncEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCISemiPeriodUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCISemiPeriodUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCISemiPeriodTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCISemiPeriodTerm(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetCISemiPeriodTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetCISemiPeriodTermCfg(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetCISemiPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetCISemiPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCISemiPeriodDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCISemiPeriodDigFltrEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCISemiPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCISemiPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCISemiPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCISemiPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCISemiPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCISemiPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCISemiPeriodDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCISemiPeriodDigSyncEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodStartingEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCISemiPeriodStartingEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCISemiPeriodStartingEdge(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseFreqUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCIPulseFreqUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut ::std::os::raw::c_char,
                                   bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseFreqTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseFreqTerm(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseFreqTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetCIPulseFreqTermCfg(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCIPulseFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseFreqDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIPulseFreqDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIPulseFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: float64) -> int32;
    pub fn DAQmxResetCIPulseFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigSyncEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseFreqDigSyncEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIPulseFreqDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqStartEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseFreqStartEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCIPulseFreqStartEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTimeUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCIPulseTimeUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut ::std::os::raw::c_char,
                                   bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseTimeTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseTimeTerm(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTimeTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetCIPulseTimeTermCfg(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTimeLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCIPulseTimeLogicLvlBehavior(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseTimeDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIPulseTimeDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseTimeDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIPulseTimeDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseTimeDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseTimeDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseTimeDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: float64) -> int32;
    pub fn DAQmxResetCIPulseTimeDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigSyncEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseTimeDigSyncEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIPulseTimeDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeStartEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTimeStartEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCIPulseTimeStartEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseTicksTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseTicksTerm(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTicksTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetCIPulseTicksTermCfg(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTicksLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetCIPulseTicksLogicLvlBehavior(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseTicksDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCIPulseTicksDigFltrEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseTicksDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCIPulseTicksDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIPulseTicksDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseTicksDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseTicksDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIPulseTicksDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseTicksDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCIPulseTicksDigSyncEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksStartEdge(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTicksStartEdge(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetCIPulseTicksStartEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICtrTimebaseSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICtrTimebaseSrc(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseRate(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetCICtrTimebaseRate(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetCICtrTimebaseRate(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetCICtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetCICtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxSetCICtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: bool32) -> int32;
    pub fn DAQmxResetCICtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: float64) -> int32;
    pub fn DAQmxResetCICtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data:
                                                       *mut ::std::os::raw::c_char,
                                                   bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCICtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data:
                                                       *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCICtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxSetCICtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: bool32) -> int32;
    pub fn DAQmxResetCICtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIThreshVoltage(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetCIThreshVoltage(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetCIThreshVoltage(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICount(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetCIOutputState(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxGetCITCReached(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut bool32) -> int32;
    pub fn DAQmxGetCICtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut uInt32) -> int32;
    pub fn DAQmxSetCICtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: uInt32) -> int32;
    pub fn DAQmxResetCICtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISampClkOverrunBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCISampClkOverrunBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCISampClkOverrunBehavior(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISampClkOverrunSentinelVal(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCISampClkOverrunSentinelVal(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCISampClkOverrunSentinelVal(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetCIDataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCIDataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetCIUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetCIUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetCIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetCIMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCINumPossiblyInvalidSamps(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxGetCIDupCountPrevent(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetCIDupCountPrevent(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetCIDupCountPrevent(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPrescaler(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIPrescaler(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: uInt32) -> int32;
    pub fn DAQmxResetCIPrescaler(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIMaxMeasPeriod(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetCIMaxMeasPeriod(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetCIMaxMeasPeriod(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOOutputType(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxGetCOPulseIdleState(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCOPulseIdleState(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCOPulseIdleState(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseTerm(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCOPulseTerm(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetCOPulseTerm(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseTimeUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCOPulseTimeUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCOPulseTimeUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseHighTime(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseHighTime(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetCOPulseHighTime(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseLowTime(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseLowTime(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetCOPulseLowTime(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseTimeInitialDelay(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseTimeInitialDelay(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetCOPulseTimeInitialDelay(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseDutyCyc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseDutyCyc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetCOPulseDutyCyc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseFreqUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCOPulseFreqUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCOPulseFreqUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseFreq(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseFreq(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetCOPulseFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseFreqInitialDelay(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseFreqInitialDelay(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetCOPulseFreqInitialDelay(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseHighTicks(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOPulseHighTicks(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetCOPulseHighTicks(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseLowTicks(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOPulseLowTicks(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: uInt32) -> int32;
    pub fn DAQmxResetCOPulseLowTicks(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseTicksInitialDelay(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOPulseTicksInitialDelay(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: uInt32) -> int32;
    pub fn DAQmxResetCOPulseTicksInitialDelay(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCOCtrTimebaseSrc(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseRate(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetCOCtrTimebaseRate(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetCOCtrTimebaseRate(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetCOCtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: bool32) -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: float64) -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data:
                                                       *mut ::std::os::raw::c_char,
                                                   bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data:
                                                       *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: bool32) -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCount(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetCOOutputState(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxGetCOAutoIncrCnt(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOAutoIncrCnt(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: uInt32) -> int32;
    pub fn DAQmxResetCOAutoIncrCnt(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: uInt32) -> int32;
    pub fn DAQmxResetCOCtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseDone(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut bool32) -> int32;
    pub fn DAQmxGetCOEnableInitialDelayOnRetrigger(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCOEnableInitialDelayOnRetrigger(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: bool32) -> int32;
    pub fn DAQmxResetCOEnableInitialDelayOnRetrigger(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOConstrainedGenMode(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCOConstrainedGenMode(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCOConstrainedGenMode(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetCOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetCOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetCODataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCODataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetCOUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetCOUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetCOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetCOMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPrescaler(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOPrescaler(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: uInt32) -> int32;
    pub fn DAQmxResetCOPrescaler(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCORdyForNewVal(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetChanType(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char,
                            data: *mut int32) -> int32;
    pub fn DAQmxGetPhysicalChanName(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetPhysicalChanName(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetChanDescr(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut ::std::os::raw::c_char,
                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetChanDescr(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetChanDescr(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetChanIsGlobal(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut bool32) -> int32;
    pub fn DAQmxGetDevIsSimulated(device: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetDevProductCategory(device: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxGetDevProductType(device: *mut ::std::os::raw::c_char,
                                  data: *mut ::std::os::raw::c_char,
                                  bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevProductNum(device: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevSerialNum(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevAccessoryProductTypes(device:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevAccessoryProductNums(device:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut uInt32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAccessorySerialNums(device: *mut ::std::os::raw::c_char,
                                          data: *mut uInt32,
                                          arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetCarrierSerialNum(device: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevChassisModuleDevNames(device:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevAnlgTrigSupported(device: *mut ::std::os::raw::c_char,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxGetDevDigTrigSupported(device: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxGetDevAIPhysicalChans(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevAISupportedMeasTypes(device:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAIMaxSingleChanRate(device: *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxGetDevAIMaxMultiChanRate(device: *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxGetDevAIMinRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevAISimultaneousSamplingSupported(device:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut bool32)
     -> int32;
    pub fn DAQmxGetDevAISampModes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAITrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevAIVoltageRngs(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64,
                                    arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIVoltageIntExcitDiscreteVals(device:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64,
                                                    arraySizeInElements:
                                                        uInt32) -> int32;
    pub fn DAQmxGetDevAIVoltageIntExcitRangeVals(device:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut float64,
                                                 arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAIChargeRngs(device: *mut ::std::os::raw::c_char,
                                   data: *mut float64,
                                   arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAICurrentRngs(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64,
                                    arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAICurrentIntExcitDiscreteVals(device:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64,
                                                    arraySizeInElements:
                                                        uInt32) -> int32;
    pub fn DAQmxGetDevAIBridgeRngs(device: *mut ::std::os::raw::c_char,
                                   data: *mut float64,
                                   arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIResistanceRngs(device: *mut ::std::os::raw::c_char,
                                       data: *mut float64,
                                       arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIFreqRngs(device: *mut ::std::os::raw::c_char,
                                 data: *mut float64,
                                 arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIGains(device: *mut ::std::os::raw::c_char,
                              data: *mut float64, arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAICouplings(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevAILowpassCutoffFreqDiscreteVals(device:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64,
                                                      arraySizeInElements:
                                                          uInt32) -> int32;
    pub fn DAQmxGetDevAILowpassCutoffFreqRangeVals(device:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64,
                                                   arraySizeInElements:
                                                       uInt32) -> int32;
    pub fn DAQmxGetAIDigFltrTypes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIDigFltrLowpassCutoffFreqDiscreteVals(device:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut float64,
                                                             arraySizeInElements:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxGetDevAIDigFltrLowpassCutoffFreqRangeVals(device:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut float64,
                                                          arraySizeInElements:
                                                              uInt32)
     -> int32;
    pub fn DAQmxGetDevAOPhysicalChans(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevAOSupportedOutputTypes(device:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAOSampClkSupported(device: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxGetDevAOSampModes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAOMaxRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevAOMinRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevAOTrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevAOVoltageRngs(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64,
                                    arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAOCurrentRngs(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64,
                                    arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAOGains(device: *mut ::std::os::raw::c_char,
                              data: *mut float64, arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevDILines(device: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevDIPorts(device: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevDIMaxRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevDITrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevDOLines(device: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevDOPorts(device: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevDOMaxRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevDOTrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevCIPhysicalChans(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevCISupportedMeasTypes(device:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevCITrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevCISampClkSupported(device: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxGetDevCISampModes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevCIMaxSize(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevCIMaxTimebase(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxGetDevCOPhysicalChans(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevCOSupportedOutputTypes(device:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevCOSampClkSupported(device: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxGetDevCOSampModes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevCOTrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevCOMaxSize(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevCOMaxTimebase(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxGetDevTEDSHWTEDSSupported(device: *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxGetDevNumDMAChans(device: *mut ::std::os::raw::c_char,
                                  data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevBusType(device: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxGetDevPCIBusNum(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevPCIDevNum(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevPXIChassisNum(device: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevPXISlotNum(device: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevCompactDAQChassisDevName(device:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevCompactDAQSlotNum(device: *mut ::std::os::raw::c_char,
                                        data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevTCPIPHostname(device: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevTCPIPEthernetIP(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevTCPIPWirelessIP(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevTerminals(device: *mut ::std::os::raw::c_char,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxGetExportedAIConvClkOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedAIConvClkOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedAIConvClkOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAIConvClkPulsePolarity(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxGetExported10MHzRefClkOutputTerm(taskHandle: TaskHandle,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExported10MHzRefClkOutputTerm(taskHandle: TaskHandle,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExported10MHzRefClkOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExported20MHzTimebaseOutputTerm(taskHandle: TaskHandle,
                                                   data:
                                                       *mut ::std::os::raw::c_char,
                                                   bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExported20MHzTimebaseOutputTerm(taskHandle: TaskHandle,
                                                   data:
                                                       *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExported20MHzTimebaseOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkOutputBehavior(taskHandle: TaskHandle,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetExportedSampClkOutputBehavior(taskHandle: TaskHandle,
                                                 data: int32) -> int32;
    pub fn DAQmxResetExportedSampClkOutputBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedSampClkOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedSampClkOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkDelayOffset(taskHandle: TaskHandle,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetExportedSampClkDelayOffset(taskHandle: TaskHandle,
                                              data: float64) -> int32;
    pub fn DAQmxResetExportedSampClkDelayOffset(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkPulsePolarity(taskHandle: TaskHandle,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetExportedSampClkPulsePolarity(taskHandle: TaskHandle,
                                                data: int32) -> int32;
    pub fn DAQmxResetExportedSampClkPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkTimebaseOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedSampClkTimebaseOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedSampClkTimebaseOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedDividedSampClkTimebaseOutputTerm(taskHandle:
                                                                TaskHandle,
                                                            data:
                                                                *mut ::std::os::raw::c_char,
                                                            bufferSize:
                                                                uInt32)
     -> int32;
    pub fn DAQmxSetExportedDividedSampClkTimebaseOutputTerm(taskHandle:
                                                                TaskHandle,
                                                            data:
                                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedDividedSampClkTimebaseOutputTerm(taskHandle:
                                                                  TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvTrigOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedAdvTrigOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedAdvTrigOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvTrigPulsePolarity(taskHandle: TaskHandle,
                                                data: *mut int32) -> int32;
    pub fn DAQmxGetExportedAdvTrigPulseWidthUnits(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetExportedAdvTrigPulseWidthUnits(taskHandle: TaskHandle,
                                                  data: int32) -> int32;
    pub fn DAQmxResetExportedAdvTrigPulseWidthUnits(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvTrigPulseWidth(taskHandle: TaskHandle,
                                             data: *mut float64) -> int32;
    pub fn DAQmxSetExportedAdvTrigPulseWidth(taskHandle: TaskHandle,
                                             data: float64) -> int32;
    pub fn DAQmxResetExportedAdvTrigPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedPauseTrigOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedPauseTrigOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedPauseTrigOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle,
                                                 data: int32) -> int32;
    pub fn DAQmxResetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRefTrigOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedRefTrigOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedRefTrigOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRefTrigPulsePolarity(taskHandle: TaskHandle,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetExportedRefTrigPulsePolarity(taskHandle: TaskHandle,
                                                data: int32) -> int32;
    pub fn DAQmxResetExportedRefTrigPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedStartTrigOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedStartTrigOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedStartTrigOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedStartTrigPulsePolarity(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetExportedStartTrigPulsePolarity(taskHandle: TaskHandle,
                                                  data: int32) -> int32;
    pub fn DAQmxResetExportedStartTrigPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvCmpltEventOutputTerm(taskHandle: TaskHandle,
                                                   data:
                                                       *mut ::std::os::raw::c_char,
                                                   bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedAdvCmpltEventOutputTerm(taskHandle: TaskHandle,
                                                   data:
                                                       *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedAdvCmpltEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvCmpltEventDelay(taskHandle: TaskHandle,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetExportedAdvCmpltEventDelay(taskHandle: TaskHandle,
                                              data: float64) -> int32;
    pub fn DAQmxResetExportedAdvCmpltEventDelay(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvCmpltEventPulsePolarity(taskHandle: TaskHandle,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedAdvCmpltEventPulsePolarity(taskHandle: TaskHandle,
                                                      data: int32) -> int32;
    pub fn DAQmxResetExportedAdvCmpltEventPulsePolarity(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvCmpltEventPulseWidth(taskHandle: TaskHandle,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetExportedAdvCmpltEventPulseWidth(taskHandle: TaskHandle,
                                                   data: float64) -> int32;
    pub fn DAQmxResetExportedAdvCmpltEventPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAIHoldCmpltEventOutputTerm(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedAIHoldCmpltEventOutputTerm(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedAIHoldCmpltEventOutputTerm(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAIHoldCmpltEventPulsePolarity(taskHandle:
                                                             TaskHandle,
                                                         data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedAIHoldCmpltEventPulsePolarity(taskHandle:
                                                             TaskHandle,
                                                         data: int32)
     -> int32;
    pub fn DAQmxResetExportedAIHoldCmpltEventPulsePolarity(taskHandle:
                                                               TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedChangeDetectEventOutputTerm(taskHandle: TaskHandle,
                                                       data:
                                                           *mut ::std::os::raw::c_char,
                                                       bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedChangeDetectEventOutputTerm(taskHandle: TaskHandle,
                                                       data:
                                                           *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedChangeDetectEventOutputTerm(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedChangeDetectEventPulsePolarity(taskHandle:
                                                              TaskHandle,
                                                          data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedChangeDetectEventPulsePolarity(taskHandle:
                                                              TaskHandle,
                                                          data: int32)
     -> int32;
    pub fn DAQmxResetExportedChangeDetectEventPulsePolarity(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedCtrOutEventOutputTerm(taskHandle: TaskHandle,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedCtrOutEventOutputTerm(taskHandle: TaskHandle,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedCtrOutEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedCtrOutEventOutputBehavior(taskHandle: TaskHandle,
                                                     data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedCtrOutEventOutputBehavior(taskHandle: TaskHandle,
                                                     data: int32) -> int32;
    pub fn DAQmxResetExportedCtrOutEventOutputBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedCtrOutEventPulsePolarity(taskHandle: TaskHandle,
                                                    data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedCtrOutEventPulsePolarity(taskHandle: TaskHandle,
                                                    data: int32) -> int32;
    pub fn DAQmxResetExportedCtrOutEventPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedCtrOutEventToggleIdleState(taskHandle: TaskHandle,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedCtrOutEventToggleIdleState(taskHandle: TaskHandle,
                                                      data: int32) -> int32;
    pub fn DAQmxResetExportedCtrOutEventToggleIdleState(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedHshkEventOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedHshkEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventOutputBehavior(taskHandle: TaskHandle,
                                                   data: *mut int32) -> int32;
    pub fn DAQmxSetExportedHshkEventOutputBehavior(taskHandle: TaskHandle,
                                                   data: int32) -> int32;
    pub fn DAQmxResetExportedHshkEventOutputBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventDelay(taskHandle: TaskHandle,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetExportedHshkEventDelay(taskHandle: TaskHandle,
                                          data: float64) -> int32;
    pub fn DAQmxResetExportedHshkEventDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetExportedHshkEventInterlockedAssertedLvl(taskHandle:
                                                               TaskHandle,
                                                           data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedHshkEventInterlockedAssertedLvl(taskHandle:
                                                               TaskHandle,
                                                           data: int32)
     -> int32;
    pub fn DAQmxResetExportedHshkEventInterlockedAssertedLvl(taskHandle:
                                                                 TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventInterlockedAssertOnStart(taskHandle:
                                                                 TaskHandle,
                                                             data:
                                                                 *mut bool32)
     -> int32;
    pub fn DAQmxSetExportedHshkEventInterlockedAssertOnStart(taskHandle:
                                                                 TaskHandle,
                                                             data: bool32)
     -> int32;
    pub fn DAQmxResetExportedHshkEventInterlockedAssertOnStart(taskHandle:
                                                                   TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventInterlockedDeassertDelay(taskHandle:
                                                                 TaskHandle,
                                                             data:
                                                                 *mut float64)
     -> int32;
    pub fn DAQmxSetExportedHshkEventInterlockedDeassertDelay(taskHandle:
                                                                 TaskHandle,
                                                             data: float64)
     -> int32;
    pub fn DAQmxResetExportedHshkEventInterlockedDeassertDelay(taskHandle:
                                                                   TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventPulsePolarity(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetExportedHshkEventPulsePolarity(taskHandle: TaskHandle,
                                                  data: int32) -> int32;
    pub fn DAQmxResetExportedHshkEventPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventPulseWidth(taskHandle: TaskHandle,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetExportedHshkEventPulseWidth(taskHandle: TaskHandle,
                                               data: float64) -> int32;
    pub fn DAQmxResetExportedHshkEventPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForXferEventOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedRdyForXferEventOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedRdyForXferEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForXferEventLvlActiveLvl(taskHandle: TaskHandle,
                                                       data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedRdyForXferEventLvlActiveLvl(taskHandle: TaskHandle,
                                                       data: int32) -> int32;
    pub fn DAQmxResetExportedRdyForXferEventLvlActiveLvl(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForXferEventDeassertCond(taskHandle: TaskHandle,
                                                       data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedRdyForXferEventDeassertCond(taskHandle: TaskHandle,
                                                       data: int32) -> int32;
    pub fn DAQmxResetExportedRdyForXferEventDeassertCond(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle:
                                                                          TaskHandle,
                                                                      data:
                                                                          *mut uInt32)
     -> int32;
    pub fn DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle:
                                                                          TaskHandle,
                                                                      data:
                                                                          uInt32)
     -> int32;
    pub fn DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle:
                                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedDataActiveEventOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedDataActiveEventOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedDataActiveEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedDataActiveEventLvlActiveLvl(taskHandle: TaskHandle,
                                                       data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedDataActiveEventLvlActiveLvl(taskHandle: TaskHandle,
                                                       data: int32) -> int32;
    pub fn DAQmxResetExportedDataActiveEventLvlActiveLvl(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForStartEventOutputTerm(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedRdyForStartEventOutputTerm(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedRdyForStartEventOutputTerm(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForStartEventLvlActiveLvl(taskHandle:
                                                            TaskHandle,
                                                        data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedRdyForStartEventLvlActiveLvl(taskHandle:
                                                            TaskHandle,
                                                        data: int32) -> int32;
    pub fn DAQmxResetExportedRdyForStartEventLvlActiveLvl(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSyncPulseEventOutputTerm(taskHandle: TaskHandle,
                                                    data:
                                                        *mut ::std::os::raw::c_char,
                                                    bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedSyncPulseEventOutputTerm(taskHandle: TaskHandle,
                                                    data:
                                                        *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedSyncPulseEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedWatchdogExpiredEventOutputTerm(taskHandle:
                                                              TaskHandle,
                                                          data:
                                                              *mut ::std::os::raw::c_char,
                                                          bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedWatchdogExpiredEventOutputTerm(taskHandle:
                                                              TaskHandle,
                                                          data:
                                                              *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedWatchdogExpiredEventOutputTerm(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetPersistedChanAuthor(channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPersistedChanAllowInteractiveEditing(channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedChanAllowInteractiveDeletion(channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedScaleAuthor(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPersistedScaleAllowInteractiveEditing(scaleName:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedScaleAllowInteractiveDeletion(scaleName:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedTaskAuthor(taskName: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPersistedTaskAllowInteractiveEditing(taskName:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedTaskAllowInteractiveDeletion(taskName:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPhysicalChanAISupportedMeasTypes(physicalChannel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut int32,
                                                    arraySizeInElements:
                                                        uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanAITermCfgs(physicalChannel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxGetPhysicalChanAIInputSrcs(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut ::std::os::raw::c_char,
                                           bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanAOSupportedOutputTypes(physicalChannel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut int32,
                                                      arraySizeInElements:
                                                          uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanAOSupportedPowerUpOutputTypes(physicalChannel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data: *mut int32,
                                                             arraySizeInElements:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxGetPhysicalChanAOTermCfgs(physicalChannel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxGetPhysicalChanAOManualControlEnable(physicalChannel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut bool32)
     -> int32;
    pub fn DAQmxSetPhysicalChanAOManualControlEnable(physicalChannel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: bool32) -> int32;
    pub fn DAQmxResetPhysicalChanAOManualControlEnable(physicalChannel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetPhysicalChanAOManualControlShortDetected(physicalChannel:
                                                                *mut ::std::os::raw::c_char,
                                                            data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPhysicalChanAOManualControlAmplitude(physicalChannel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxGetPhysicalChanAOManualControlFreq(physicalChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxGetAOPowerAmpChannelEnable(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut bool32) -> int32;
    pub fn DAQmxSetAOPowerAmpChannelEnable(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: bool32) -> int32;
    pub fn DAQmxResetAOPowerAmpChannelEnable(physicalChannel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOPowerAmpScalingCoeff(physicalChannel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64,
                                          arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetAOPowerAmpOvercurrent(physicalChannel:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxGetAOPowerAmpGain(physicalChannel:
                                      *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxGetAOPowerAmpOffset(physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxGetPhysicalChanDIPortWidth(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanDISampClkSupported(physicalChannel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetPhysicalChanDISampModes(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetPhysicalChanDIChangeDetectSupported(physicalChannel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPhysicalChanDOPortWidth(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanDOSampClkSupported(physicalChannel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetPhysicalChanDOSampModes(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetPhysicalChanCISupportedMeasTypes(physicalChannel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut int32,
                                                    arraySizeInElements:
                                                        uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanCOSupportedOutputTypes(physicalChannel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut int32,
                                                      arraySizeInElements:
                                                          uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSMfgID(physicalChannel:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSModelNum(physicalChannel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSSerialNum(physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSVersionNum(physicalChannel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSVersionLetter(physicalChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSBitStream(physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt8,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetPhysicalChanTEDSTemplateIDs(physicalChannel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut uInt32,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetReadRelativeTo(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetReadRelativeTo(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetReadRelativeTo(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadOffset(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetReadOffset(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetReadOffset(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadChannelsToRead(taskHandle: TaskHandle,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetReadChannelsToRead(taskHandle: TaskHandle,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetReadChannelsToRead(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadReadAllAvailSamp(taskHandle: TaskHandle,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxSetReadReadAllAvailSamp(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetReadReadAllAvailSamp(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadAutoStart(taskHandle: TaskHandle, data: *mut bool32)
     -> int32;
    pub fn DAQmxSetReadAutoStart(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetReadAutoStart(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadOverWrite(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetReadOverWrite(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetReadOverWrite(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingFilePath(taskHandle: TaskHandle,
                                   data: *mut ::std::os::raw::c_char,
                                   bufferSize: uInt32) -> int32;
    pub fn DAQmxSetLoggingFilePath(taskHandle: TaskHandle,
                                   data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetLoggingFilePath(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetLoggingMode(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetLoggingMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingTDMSGroupName(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetLoggingTDMSGroupName(taskHandle: TaskHandle,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetLoggingTDMSGroupName(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingTDMSOperation(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetLoggingTDMSOperation(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetLoggingTDMSOperation(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingPause(taskHandle: TaskHandle, data: *mut bool32)
     -> int32;
    pub fn DAQmxSetLoggingPause(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetLoggingPause(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingSampsPerFile(taskHandle: TaskHandle,
                                       data: *mut uInt64) -> int32;
    pub fn DAQmxSetLoggingSampsPerFile(taskHandle: TaskHandle, data: uInt64)
     -> int32;
    pub fn DAQmxResetLoggingSampsPerFile(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingFileWriteSize(taskHandle: TaskHandle,
                                        data: *mut uInt32) -> int32;
    pub fn DAQmxSetLoggingFileWriteSize(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetLoggingFileWriteSize(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingFilePreallocationSize(taskHandle: TaskHandle,
                                                data: *mut uInt64) -> int32;
    pub fn DAQmxSetLoggingFilePreallocationSize(taskHandle: TaskHandle,
                                                data: uInt64) -> int32;
    pub fn DAQmxResetLoggingFilePreallocationSize(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetReadCurrReadPos(taskHandle: TaskHandle, data: *mut uInt64)
     -> int32;
    pub fn DAQmxGetReadAvailSampPerChan(taskHandle: TaskHandle,
                                        data: *mut uInt32) -> int32;
    pub fn DAQmxGetReadTotalSampPerChanAcquired(taskHandle: TaskHandle,
                                                data: *mut uInt64) -> int32;
    pub fn DAQmxGetReadCommonModeRangeErrorChansExist(taskHandle: TaskHandle,
                                                      data: *mut bool32)
     -> int32;
    pub fn DAQmxGetReadCommonModeRangeErrorChans(taskHandle: TaskHandle,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadExcitFaultChansExist(taskHandle: TaskHandle,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxGetReadExcitFaultChans(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOvercurrentChansExist(taskHandle: TaskHandle,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOvercurrentChans(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOvertemperatureChansExist(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOvertemperatureChans(taskHandle: TaskHandle,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOpenChansExist(taskHandle: TaskHandle,
                                      data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOpenChans(taskHandle: TaskHandle,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOpenChansDetails(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOpenCurrentLoopChansExist(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOpenCurrentLoopChans(taskHandle: TaskHandle,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOpenThrmcplChansExist(taskHandle: TaskHandle,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOpenThrmcplChans(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOverloadedChansExist(taskHandle: TaskHandle,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOverloadedChans(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadAccessoryInsertionOrRemovalDetected(taskHandle:
                                                               TaskHandle,
                                                           data: *mut bool32)
     -> int32;
    pub fn DAQmxGetReadDevsWithInsertedOrRemovedAccessories(taskHandle:
                                                                TaskHandle,
                                                            data:
                                                                *mut ::std::os::raw::c_char,
                                                            bufferSize:
                                                                uInt32)
     -> int32;
    pub fn DAQmxGetReadChangeDetectHasOverflowed(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxGetReadRawDataWidth(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetReadNumChans(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetReadDigitalLinesBytesPerChan(taskHandle: TaskHandle,
                                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetReadWaitMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetReadWaitMode(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetReadWaitMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadSleepTime(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetReadSleepTime(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetReadSleepTime(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRealTimeConvLateErrorsToWarnings(taskHandle: TaskHandle,
                                                    data: *mut bool32)
     -> int32;
    pub fn DAQmxSetRealTimeConvLateErrorsToWarnings(taskHandle: TaskHandle,
                                                    data: bool32) -> int32;
    pub fn DAQmxResetRealTimeConvLateErrorsToWarnings(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetRealTimeNumOfWarmupIters(taskHandle: TaskHandle,
                                            data: *mut uInt32) -> int32;
    pub fn DAQmxSetRealTimeNumOfWarmupIters(taskHandle: TaskHandle,
                                            data: uInt32) -> int32;
    pub fn DAQmxResetRealTimeNumOfWarmupIters(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetRealTimeWaitForNextSampClkWaitMode(taskHandle: TaskHandle,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetRealTimeWaitForNextSampClkWaitMode(taskHandle: TaskHandle,
                                                      data: int32) -> int32;
    pub fn DAQmxResetRealTimeWaitForNextSampClkWaitMode(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetRealTimeReportMissedSamp(taskHandle: TaskHandle,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetRealTimeReportMissedSamp(taskHandle: TaskHandle,
                                            data: bool32) -> int32;
    pub fn DAQmxResetRealTimeReportMissedSamp(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetRealTimeWriteRecoveryMode(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetRealTimeWriteRecoveryMode(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetRealTimeWriteRecoveryMode(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetScaleDescr(scaleName: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetScaleDescr(scaleName: *mut ::std::os::raw::c_char,
                              data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetScaleScaledUnits(scaleName: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetScaleScaledUnits(scaleName: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetScalePreScaledUnits(scaleName: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetScalePreScaledUnits(scaleName: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxGetScaleType(scaleName: *mut ::std::os::raw::c_char,
                             data: *mut int32) -> int32;
    pub fn DAQmxGetScaleLinSlope(scaleName: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxSetScaleLinSlope(scaleName: *mut ::std::os::raw::c_char,
                                 data: float64) -> int32;
    pub fn DAQmxGetScaleLinYIntercept(scaleName: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetScaleLinYIntercept(scaleName: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxGetScaleMapScaledMax(scaleName: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetScaleMapScaledMax(scaleName: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxGetScaleMapPreScaledMax(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetScaleMapPreScaledMax(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxGetScaleMapScaledMin(scaleName: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetScaleMapScaledMin(scaleName: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxGetScaleMapPreScaledMin(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetScaleMapPreScaledMin(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxGetScalePolyForwardCoeff(scaleName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetScalePolyForwardCoeff(scaleName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetScalePolyReverseCoeff(scaleName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetScalePolyReverseCoeff(scaleName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetScaleTableScaledVals(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64,
                                        arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxSetScaleTableScaledVals(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64,
                                        arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetScaleTablePreScaledVals(scaleName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetScaleTablePreScaledVals(scaleName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetSwitchChanUsage(switchChannelName:
                                       *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetSwitchChanUsage(switchChannelName:
                                       *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxGetSwitchChanAnlgBusSharingEnable(switchChannelName:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetSwitchChanAnlgBusSharingEnable(switchChannelName:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxGetSwitchChanMaxACCarryCurrent(switchChannelName:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxACSwitchCurrent(switchChannelName:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxACCarryPwr(switchChannelName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxACSwitchPwr(switchChannelName:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCCarryCurrent(switchChannelName:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCSwitchCurrent(switchChannelName:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCCarryPwr(switchChannelName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCSwitchPwr(switchChannelName:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxACVoltage(switchChannelName:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCVoltage(switchChannelName:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanWireMode(switchChannelName:
                                          *mut ::std::os::raw::c_char,
                                      data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchChanBandwidth(switchChannelName:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanImpedance(switchChannelName:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchDevSettlingTime(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetSwitchDevSettlingTime(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         data: float64) -> int32;
    pub fn DAQmxGetSwitchDevAutoConnAnlgBus(deviceName:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetSwitchDevAutoConnAnlgBus(deviceName:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling(deviceName:
                                                                *mut ::std::os::raw::c_char,
                                                            data: *mut bool32)
     -> int32;
    pub fn DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling(deviceName:
                                                                *mut ::std::os::raw::c_char,
                                                            data: bool32)
     -> int32;
    pub fn DAQmxGetSwitchDevSettled(deviceName: *mut ::std::os::raw::c_char,
                                    data: *mut bool32) -> int32;
    pub fn DAQmxGetSwitchDevRelayList(deviceName: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSwitchDevNumRelays(deviceName: *mut ::std::os::raw::c_char,
                                      data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchDevSwitchChanList(deviceName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut ::std::os::raw::c_char,
                                           bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSwitchDevNumSwitchChans(deviceName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchDevNumRows(deviceName: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchDevNumColumns(deviceName:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchDevTopology(deviceName: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSwitchDevTemperature(deviceName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchScanBreakMode(taskHandle: TaskHandle,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetSwitchScanBreakMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSwitchScanBreakMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSwitchScanRepeatMode(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetSwitchScanRepeatMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSwitchScanRepeatMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSwitchScanWaitingForAdv(taskHandle: TaskHandle,
                                           data: *mut bool32) -> int32;
    pub fn DAQmxGetSysGlobalChans(data: *mut ::std::os::raw::c_char,
                                  bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSysScales(data: *mut ::std::os::raw::c_char,
                             bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSysTasks(data: *mut ::std::os::raw::c_char,
                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSysDevNames(data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSysNIDAQMajorVersion(data: *mut uInt32) -> int32;
    pub fn DAQmxGetSysNIDAQMinorVersion(data: *mut uInt32) -> int32;
    pub fn DAQmxGetSysNIDAQUpdateVersion(data: *mut uInt32) -> int32;
    pub fn DAQmxGetTaskName(taskHandle: TaskHandle,
                            data: *mut ::std::os::raw::c_char,
                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetTaskChannels(taskHandle: TaskHandle,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxGetTaskNumChans(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetTaskDevices(taskHandle: TaskHandle,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetTaskNumDevices(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetTaskComplete(taskHandle: TaskHandle, data: *mut bool32)
     -> int32;
    pub fn DAQmxGetSampQuantSampMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetSampQuantSampMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSampQuantSampMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampQuantSampPerChan(taskHandle: TaskHandle,
                                        data: *mut uInt64) -> int32;
    pub fn DAQmxSetSampQuantSampPerChan(taskHandle: TaskHandle, data: uInt64)
     -> int32;
    pub fn DAQmxResetSampQuantSampPerChan(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampTimingType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetSampTimingType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSampTimingType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetSampClkRate(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetSampClkRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkMaxRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxGetSampClkSrc(taskHandle: TaskHandle,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetSampClkSrc(taskHandle: TaskHandle,
                              data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetSampClkSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkActiveEdge(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetSampClkActiveEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSampClkActiveEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkOverrunBehavior(taskHandle: TaskHandle,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetSampClkOverrunBehavior(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSampClkOverrunBehavior(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkUnderflowBehavior(taskHandle: TaskHandle,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetSampClkUnderflowBehavior(taskHandle: TaskHandle,
                                            data: int32) -> int32;
    pub fn DAQmxResetSampClkUnderflowBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkTimebaseDiv(taskHandle: TaskHandle,
                                      data: *mut uInt32) -> int32;
    pub fn DAQmxSetSampClkTimebaseDiv(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetSampClkTimebaseDiv(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkTerm(taskHandle: TaskHandle,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSampClkTimebaseRate(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetSampClkTimebaseRate(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetSampClkTimebaseRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkTimebaseSrc(taskHandle: TaskHandle,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetSampClkTimebaseSrc(taskHandle: TaskHandle,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetSampClkTimebaseSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkTimebaseActiveEdge(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetSampClkTimebaseActiveEdge(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetSampClkTimebaseActiveEdge(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                    data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetSampClkTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                    data: uInt32) -> int32;
    pub fn DAQmxResetSampClkTimebaseMasterTimebaseDiv(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkTimebaseTerm(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSampClkDigFltrEnable(taskHandle: TaskHandle,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxSetSampClkDigFltrEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetSampClkDigFltrEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                               data: float64) -> int32;
    pub fn DAQmxResetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetSampClkDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                             data:
                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetSampClkDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle,
                                              data: float64) -> int32;
    pub fn DAQmxResetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkDigSyncEnable(taskHandle: TaskHandle,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxSetSampClkDigSyncEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetSampClkDigSyncEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkWriteWfmUseInitialWfmDT(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetSampClkWriteWfmUseInitialWfmDT(taskHandle: TaskHandle,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetSampClkWriteWfmUseInitialWfmDT(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetHshkDelayAfterXfer(taskHandle: TaskHandle,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetHshkDelayAfterXfer(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetHshkDelayAfterXfer(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetHshkStartCond(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetHshkStartCond(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetHshkStartCond(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetHshkSampleInputDataWhen(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetHshkSampleInputDataWhen(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetHshkSampleInputDataWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetChangeDetectDIRisingEdgePhysicalChans(taskHandle:
                                                             TaskHandle,
                                                         data:
                                                             *mut ::std::os::raw::c_char,
                                                         bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetChangeDetectDIRisingEdgePhysicalChans(taskHandle:
                                                             TaskHandle,
                                                         data:
                                                             *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetChangeDetectDIRisingEdgePhysicalChans(taskHandle:
                                                               TaskHandle)
     -> int32;
    pub fn DAQmxGetChangeDetectDIFallingEdgePhysicalChans(taskHandle:
                                                              TaskHandle,
                                                          data:
                                                              *mut ::std::os::raw::c_char,
                                                          bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetChangeDetectDIFallingEdgePhysicalChans(taskHandle:
                                                              TaskHandle,
                                                          data:
                                                              *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetChangeDetectDIFallingEdgePhysicalChans(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetChangeDetectDITristate(taskHandle: TaskHandle,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetChangeDetectDITristate(taskHandle: TaskHandle,
                                          data: bool32) -> int32;
    pub fn DAQmxResetChangeDetectDITristate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetImplicitUnderflowBehavior(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetImplicitUnderflowBehavior(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetImplicitUnderflowBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAIConvRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIConvRate(taskHandle: TaskHandle, data: float64) -> int32;
    pub fn DAQmxResetAIConvRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvRateEx(taskHandle: TaskHandle,
                                deviceNames: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvRateEx(taskHandle: TaskHandle,
                                deviceNames: *mut ::std::os::raw::c_char,
                                data: float64) -> int32;
    pub fn DAQmxResetAIConvRateEx(taskHandle: TaskHandle,
                                  deviceNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvMaxRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxGetAIConvMaxRateEx(taskHandle: TaskHandle,
                                   deviceNames: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxGetAIConvSrc(taskHandle: TaskHandle,
                             data: *mut ::std::os::raw::c_char,
                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIConvSrc(taskHandle: TaskHandle,
                             data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetAIConvSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvSrcEx(taskHandle: TaskHandle,
                               deviceNames: *mut ::std::os::raw::c_char,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIConvSrcEx(taskHandle: TaskHandle,
                               deviceNames: *mut ::std::os::raw::c_char,
                               data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetAIConvSrcEx(taskHandle: TaskHandle,
                                 deviceNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvActiveEdge(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIConvActiveEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAIConvActiveEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvActiveEdgeEx(taskHandle: TaskHandle,
                                      deviceNames:
                                          *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAIConvActiveEdgeEx(taskHandle: TaskHandle,
                                      deviceNames:
                                          *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAIConvActiveEdgeEx(taskHandle: TaskHandle,
                                        deviceNames:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvTimebaseDiv(taskHandle: TaskHandle,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIConvTimebaseDiv(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetAIConvTimebaseDiv(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvTimebaseDivEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIConvTimebaseDivEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       data: uInt32) -> int32;
    pub fn DAQmxResetAIConvTimebaseDivEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvTimebaseSrc(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIConvTimebaseSrc(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAIConvTimebaseSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvTimebaseSrcEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetAIConvTimebaseSrcEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetAIConvTimebaseSrcEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDelayFromSampClkDelayUnits(taskHandle: TaskHandle,
                                              data: *mut int32) -> int32;
    pub fn DAQmxSetDelayFromSampClkDelayUnits(taskHandle: TaskHandle,
                                              data: int32) -> int32;
    pub fn DAQmxResetDelayFromSampClkDelayUnits(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDelayFromSampClkDelayUnitsEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetDelayFromSampClkDelayUnitsEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetDelayFromSampClkDelayUnitsEx(taskHandle: TaskHandle,
                                                  deviceNames:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDelayFromSampClkDelay(taskHandle: TaskHandle,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetDelayFromSampClkDelay(taskHandle: TaskHandle,
                                         data: float64) -> int32;
    pub fn DAQmxResetDelayFromSampClkDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDelayFromSampClkDelayEx(taskHandle: TaskHandle,
                                           deviceNames:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetDelayFromSampClkDelayEx(taskHandle: TaskHandle,
                                           deviceNames:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetDelayFromSampClkDelayEx(taskHandle: TaskHandle,
                                             deviceNames:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrEnable(taskHandle: TaskHandle,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIConvDigFltrEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetAIConvDigFltrEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvDigFltrEnableEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetAIConvDigFltrEnableEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetAIConvDigFltrEnableEx(taskHandle: TaskHandle,
                                           deviceNames:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                              data: float64) -> int32;
    pub fn DAQmxResetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrMinPulseWidthEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvDigFltrMinPulseWidthEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char,
                                                data: float64) -> int32;
    pub fn DAQmxResetAIConvDigFltrMinPulseWidthEx(taskHandle: TaskHandle,
                                                  deviceNames:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIConvDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                            data:
                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAIConvDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrTimebaseSrcEx(taskHandle: TaskHandle,
                                              deviceNames:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIConvDigFltrTimebaseSrcEx(taskHandle: TaskHandle,
                                              deviceNames:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAIConvDigFltrTimebaseSrcEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle,
                                             data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle,
                                             data: float64) -> int32;
    pub fn DAQmxResetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrTimebaseRateEx(taskHandle: TaskHandle,
                                               deviceNames:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvDigFltrTimebaseRateEx(taskHandle: TaskHandle,
                                               deviceNames:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetAIConvDigFltrTimebaseRateEx(taskHandle: TaskHandle,
                                                 deviceNames:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigSyncEnable(taskHandle: TaskHandle,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIConvDigSyncEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetAIConvDigSyncEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvDigSyncEnableEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetAIConvDigSyncEnableEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetAIConvDigSyncEnableEx(taskHandle: TaskHandle,
                                           deviceNames:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetMasterTimebaseRate(taskHandle: TaskHandle,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetMasterTimebaseRate(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetMasterTimebaseRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetMasterTimebaseSrc(taskHandle: TaskHandle,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetMasterTimebaseSrc(taskHandle: TaskHandle,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetMasterTimebaseSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefClkRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetRefClkRate(taskHandle: TaskHandle, data: float64) -> int32;
    pub fn DAQmxResetRefClkRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefClkSrc(taskHandle: TaskHandle,
                             data: *mut ::std::os::raw::c_char,
                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetRefClkSrc(taskHandle: TaskHandle,
                             data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetRefClkSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSyncPulseSrc(taskHandle: TaskHandle,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxSetSyncPulseSrc(taskHandle: TaskHandle,
                                data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetSyncPulseSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSyncPulseSyncTime(taskHandle: TaskHandle,
                                     data: *mut float64) -> int32;
    pub fn DAQmxGetSyncPulseMinDelayToStart(taskHandle: TaskHandle,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetSyncPulseMinDelayToStart(taskHandle: TaskHandle,
                                            data: float64) -> int32;
    pub fn DAQmxResetSyncPulseMinDelayToStart(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSyncPulseResetTime(taskHandle: TaskHandle,
                                      data: *mut float64) -> int32;
    pub fn DAQmxGetSyncPulseResetDelay(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetSyncPulseResetDelay(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetSyncPulseResetDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSyncPulseTerm(taskHandle: TaskHandle,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSyncClkInterval(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetSyncClkInterval(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetSyncClkInterval(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampTimingEngine(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetSampTimingEngine(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetSampTimingEngine(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetStartTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetStartTrigType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetStartTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetStartTrigTerm(taskHandle: TaskHandle,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDigEdgeStartTrigSrc(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeStartTrigSrc(taskHandle: TaskHandle,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeStartTrigEdge(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeStartTrigEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternStartTrigSrc(taskHandle: TaskHandle,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternStartTrigSrc(taskHandle: TaskHandle,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigPatternStartTrigPattern(taskHandle: TaskHandle,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternStartTrigPattern(taskHandle: TaskHandle,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternStartTrigPattern(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternStartTrigWhen(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetDigPatternStartTrigWhen(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetDigPatternStartTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigSrc(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigSrc(taskHandle: TaskHandle,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle,
                                         data: float64) -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                               TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       data:
                                                           *mut ::std::os::raw::c_char,
                                                       bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       data:
                                                           *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigSrc(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigSrc(taskHandle: TaskHandle,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinStartTrigWhen(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinStartTrigTop(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigTop(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigTop(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinStartTrigBtm(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigBtm(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigBtm(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinStartTrigCoupling(taskHandle: TaskHandle,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigCoupling(taskHandle: TaskHandle,
                                            data: int32) -> int32;
    pub fn DAQmxResetAnlgWinStartTrigCoupling(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetStartTrigDelay(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetStartTrigDelay(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetStartTrigDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetStartTrigDelayUnits(taskHandle: TaskHandle,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetStartTrigDelayUnits(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetStartTrigDelayUnits(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetStartTrigRetriggerable(taskHandle: TaskHandle,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetStartTrigRetriggerable(taskHandle: TaskHandle,
                                          data: bool32) -> int32;
    pub fn DAQmxResetStartTrigRetriggerable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetRefTrigType(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetRefTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefTrigPretrigSamples(taskHandle: TaskHandle,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxSetRefTrigPretrigSamples(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetRefTrigPretrigSamples(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefTrigTerm(taskHandle: TaskHandle,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDigEdgeRefTrigSrc(taskHandle: TaskHandle,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeRefTrigSrc(taskHandle: TaskHandle,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeRefTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeRefTrigEdge(taskHandle: TaskHandle,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeRefTrigEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigEdgeRefTrigEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      data: float64) -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    data:
                                                        *mut ::std::os::raw::c_char,
                                                    bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    data:
                                                        *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     data: float64) -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternRefTrigSrc(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternRefTrigSrc(taskHandle: TaskHandle,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternRefTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigPatternRefTrigPattern(taskHandle: TaskHandle,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternRefTrigPattern(taskHandle: TaskHandle,
                                            data:
                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternRefTrigPattern(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternRefTrigWhen(taskHandle: TaskHandle,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetDigPatternRefTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigPatternRefTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigSrc(taskHandle: TaskHandle,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigSrc(taskHandle: TaskHandle,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      data: float64) -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigSrc(taskHandle: TaskHandle,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigSrc(taskHandle: TaskHandle,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigWhen(taskHandle: TaskHandle,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigTop(taskHandle: TaskHandle,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigTop(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigTop(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigBtm(taskHandle: TaskHandle,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigBtm(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigBtm(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigCoupling(taskHandle: TaskHandle,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigCoupling(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigCoupling(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      data: float64) -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    data:
                                                        *mut ::std::os::raw::c_char,
                                                    bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    data:
                                                        *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     data: float64) -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetRefTrigAutoTrigEnable(taskHandle: TaskHandle,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetRefTrigAutoTrigEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetRefTrigAutoTrigEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefTrigAutoTriggered(taskHandle: TaskHandle,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxGetRefTrigDelay(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetRefTrigDelay(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetRefTrigDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAdvTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetAdvTrigType(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetAdvTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeAdvTrigSrc(taskHandle: TaskHandle,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeAdvTrigSrc(taskHandle: TaskHandle,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeAdvTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeAdvTrigEdge(taskHandle: TaskHandle,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeAdvTrigEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigEdgeAdvTrigEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetHshkTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetHshkTrigType(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetHshkTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetInterlockedHshkTrigSrc(taskHandle: TaskHandle,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetInterlockedHshkTrigSrc(taskHandle: TaskHandle,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetInterlockedHshkTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetInterlockedHshkTrigAssertedLvl(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetInterlockedHshkTrigAssertedLvl(taskHandle: TaskHandle,
                                                  data: int32) -> int32;
    pub fn DAQmxResetInterlockedHshkTrigAssertedLvl(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetPauseTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetPauseTrigType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetPauseTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetPauseTrigTerm(taskHandle: TaskHandle,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigSrc(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigSrc(taskHandle: TaskHandle,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle,
                                            data: int32) -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigSrc(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigSrc(taskHandle: TaskHandle,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigWhen(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigTop(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigTop(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigTop(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigBtm(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigBtm(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigBtm(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle,
                                            data: int32) -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigSrc(taskHandle: TaskHandle,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigLvlPauseTrigSrc(taskHandle: TaskHandle,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigLvlPauseTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigLvlPauseTrigWhen(taskHandle: TaskHandle,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetDigLvlPauseTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigLvlPauseTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      data: float64) -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternPauseTrigSrc(taskHandle: TaskHandle,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternPauseTrigSrc(taskHandle: TaskHandle,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternPauseTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigPatternPauseTrigPattern(taskHandle: TaskHandle,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternPauseTrigPattern(taskHandle: TaskHandle,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternPauseTrigPattern(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternPauseTrigWhen(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetDigPatternPauseTrigWhen(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetDigPatternPauseTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetArmStartTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetArmStartTrigType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetArmStartTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetArmStartTerm(taskHandle: TaskHandle,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigSrc(taskHandle: TaskHandle,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigSrc(taskHandle: TaskHandle,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                    data: *mut bool32)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                    data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle:
                                                               TaskHandle,
                                                           data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle:
                                                               TaskHandle,
                                                           data: float64)
     -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle:
                                                                 TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle:
                                                             TaskHandle,
                                                         data:
                                                             *mut ::std::os::raw::c_char,
                                                         bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle:
                                                             TaskHandle,
                                                         data:
                                                             *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle:
                                                               TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle:
                                                              TaskHandle,
                                                          data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle:
                                                              TaskHandle,
                                                          data: float64)
     -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                    data: *mut bool32)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                    data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetTriggerSyncType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetTriggerSyncType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetTriggerSyncType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWatchdogTimeout(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetWatchdogTimeout(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetWatchdogTimeout(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWatchdogExpirTrigType(taskHandle: TaskHandle,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetWatchdogExpirTrigType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetWatchdogExpirTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWatchdogExpirTrigTrigOnNetworkConnLoss(taskHandle:
                                                              TaskHandle,
                                                          data: *mut bool32)
     -> int32;
    pub fn DAQmxSetWatchdogExpirTrigTrigOnNetworkConnLoss(taskHandle:
                                                              TaskHandle,
                                                          data: bool32)
     -> int32;
    pub fn DAQmxResetWatchdogExpirTrigTrigOnNetworkConnLoss(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeWatchdogExpirTrigSrc(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeWatchdogExpirTrigSrc(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeWatchdogExpirTrigSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle,
                                                data: int32) -> int32;
    pub fn DAQmxResetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetWatchdogDOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetWatchdogDOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetWatchdogDOExpirState(taskHandle: TaskHandle,
                                          lines: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetWatchdogAOOutputType(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetWatchdogAOOutputType(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetWatchdogAOOutputType(taskHandle: TaskHandle,
                                          lines: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetWatchdogAOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetWatchdogAOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetWatchdogAOExpirState(taskHandle: TaskHandle,
                                          lines: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetWatchdogCOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetWatchdogCOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetWatchdogCOExpirState(taskHandle: TaskHandle,
                                          lines: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetWatchdogHasExpired(taskHandle: TaskHandle,
                                      data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteRelativeTo(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetWriteRelativeTo(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetWriteRelativeTo(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteOffset(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetWriteOffset(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetWriteOffset(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteRegenMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetWriteRegenMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetWriteRegenMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteCurrWritePos(taskHandle: TaskHandle,
                                     data: *mut uInt64) -> int32;
    pub fn DAQmxGetWriteOvercurrentChansExist(taskHandle: TaskHandle,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteOvercurrentChans(taskHandle: TaskHandle,
                                         data: *mut ::std::os::raw::c_char,
                                         bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteOvertemperatureChansExist(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteOvertemperatureChans(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteExternalOvervoltageChansExist(taskHandle: TaskHandle,
                                                      data: *mut bool32)
     -> int32;
    pub fn DAQmxGetWriteExternalOvervoltageChans(taskHandle: TaskHandle,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteOverloadedChansExist(taskHandle: TaskHandle,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteOverloadedChans(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteOpenCurrentLoopChansExist(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteOpenCurrentLoopChans(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWritePowerSupplyFaultChansExist(taskHandle: TaskHandle,
                                                   data: *mut bool32)
     -> int32;
    pub fn DAQmxGetWritePowerSupplyFaultChans(taskHandle: TaskHandle,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteSpaceAvail(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetWriteTotalSampPerChanGenerated(taskHandle: TaskHandle,
                                                  data: *mut uInt64) -> int32;
    pub fn DAQmxGetWriteAccessoryInsertionOrRemovalDetected(taskHandle:
                                                                TaskHandle,
                                                            data: *mut bool32)
     -> int32;
    pub fn DAQmxGetWriteDevsWithInsertedOrRemovedAccessories(taskHandle:
                                                                 TaskHandle,
                                                             data:
                                                                 *mut ::std::os::raw::c_char,
                                                             bufferSize:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxGetWriteRawDataWidth(taskHandle: TaskHandle,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxGetWriteNumChans(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetWriteWaitMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetWriteWaitMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetWriteWaitMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteSleepTime(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetWriteSleepTime(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetWriteSleepTime(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteDigitalLinesBytesPerChan(taskHandle: TaskHandle,
                                                 data: *mut uInt32) -> int32;
    pub fn DAQmxGetSampClkTimingResponseMode(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetSampClkTimingResponseMode(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetSampClkTimingResponseMode(taskHandle: TaskHandle)
     -> int32;
}
}
