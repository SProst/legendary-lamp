pub mod ni_daq_mx_gen {
/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const TRUE: ::std::os::raw::c_uchar = 1;
pub const FALSE: ::std::os::raw::c_uchar = 0;
pub const NULL: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Buf_Input_BufSize: ::std::os::raw::c_ushort = 6252;
pub const DAQmx_Buf_Input_OnbrdBufSize: ::std::os::raw::c_ushort = 8970;
pub const DAQmx_Buf_Output_BufSize: ::std::os::raw::c_ushort = 6253;
pub const DAQmx_Buf_Output_OnbrdBufSize: ::std::os::raw::c_ushort = 8971;
pub const DAQmx_SelfCal_Supported: ::std::os::raw::c_ushort = 6240;
pub const DAQmx_SelfCal_LastTemp: ::std::os::raw::c_ushort = 6244;
pub const DAQmx_ExtCal_RecommendedInterval: ::std::os::raw::c_ushort = 6248;
pub const DAQmx_ExtCal_LastTemp: ::std::os::raw::c_ushort = 6247;
pub const DAQmx_Cal_UserDefinedInfo: ::std::os::raw::c_ushort = 6241;
pub const DAQmx_Cal_UserDefinedInfo_MaxSize: ::std::os::raw::c_ushort = 6428;
pub const DAQmx_Cal_DevTemp: ::std::os::raw::c_ushort = 8763;
pub const DAQmx_Cal_AccConnectionCount: ::std::os::raw::c_ushort = 12267;
pub const DAQmx_Cal_RecommendedAccConnectionCountLimit:
          ::std::os::raw::c_ushort =
    12268;
pub const DAQmx_AI_Max: ::std::os::raw::c_ushort = 6109;
pub const DAQmx_AI_Min: ::std::os::raw::c_ushort = 6110;
pub const DAQmx_AI_CustomScaleName: ::std::os::raw::c_ushort = 6112;
pub const DAQmx_AI_MeasType: ::std::os::raw::c_ushort = 1685;
pub const DAQmx_AI_Voltage_Units: ::std::os::raw::c_ushort = 4244;
pub const DAQmx_AI_Voltage_dBRef: ::std::os::raw::c_ushort = 10672;
pub const DAQmx_AI_Voltage_ACRMS_Units: ::std::os::raw::c_ushort = 6114;
pub const DAQmx_AI_Temp_Units: ::std::os::raw::c_ushort = 4147;
pub const DAQmx_AI_Thrmcpl_Type: ::std::os::raw::c_ushort = 4176;
pub const DAQmx_AI_Thrmcpl_ScaleType: ::std::os::raw::c_ushort = 10704;
pub const DAQmx_AI_Thrmcpl_CJCSrc: ::std::os::raw::c_ushort = 4149;
pub const DAQmx_AI_Thrmcpl_CJCVal: ::std::os::raw::c_ushort = 4150;
pub const DAQmx_AI_Thrmcpl_CJCChan: ::std::os::raw::c_ushort = 4148;
pub const DAQmx_AI_RTD_Type: ::std::os::raw::c_ushort = 4146;
pub const DAQmx_AI_RTD_R0: ::std::os::raw::c_ushort = 4144;
pub const DAQmx_AI_RTD_A: ::std::os::raw::c_ushort = 4112;
pub const DAQmx_AI_RTD_B: ::std::os::raw::c_ushort = 4113;
pub const DAQmx_AI_RTD_C: ::std::os::raw::c_ushort = 4115;
pub const DAQmx_AI_Thrmstr_A: ::std::os::raw::c_ushort = 6345;
pub const DAQmx_AI_Thrmstr_B: ::std::os::raw::c_ushort = 6347;
pub const DAQmx_AI_Thrmstr_C: ::std::os::raw::c_ushort = 6346;
pub const DAQmx_AI_Thrmstr_R1: ::std::os::raw::c_ushort = 4193;
pub const DAQmx_AI_ForceReadFromChan: ::std::os::raw::c_ushort = 6392;
pub const DAQmx_AI_Current_Units: ::std::os::raw::c_ushort = 1793;
pub const DAQmx_AI_Current_ACRMS_Units: ::std::os::raw::c_ushort = 6115;
pub const DAQmx_AI_Strain_Units: ::std::os::raw::c_ushort = 2433;
pub const DAQmx_AI_StrainGage_ForceReadFromChan: ::std::os::raw::c_ushort =
    12282;
pub const DAQmx_AI_StrainGage_GageFactor: ::std::os::raw::c_ushort = 2452;
pub const DAQmx_AI_StrainGage_PoissonRatio: ::std::os::raw::c_ushort = 2456;
pub const DAQmx_AI_StrainGage_Cfg: ::std::os::raw::c_ushort = 2434;
pub const DAQmx_AI_RosetteStrainGage_RosetteType: ::std::os::raw::c_ushort =
    12286;
pub const DAQmx_AI_RosetteStrainGage_Orientation: ::std::os::raw::c_ushort =
    12284;
pub const DAQmx_AI_RosetteStrainGage_StrainChans: ::std::os::raw::c_ushort =
    12283;
pub const DAQmx_AI_RosetteStrainGage_RosetteMeasType: ::std::os::raw::c_ushort
          =
    12285;
pub const DAQmx_AI_Resistance_Units: ::std::os::raw::c_ushort = 2389;
pub const DAQmx_AI_Freq_Units: ::std::os::raw::c_ushort = 2054;
pub const DAQmx_AI_Freq_ThreshVoltage: ::std::os::raw::c_ushort = 2069;
pub const DAQmx_AI_Freq_Hyst: ::std::os::raw::c_ushort = 2068;
pub const DAQmx_AI_LVDT_Units: ::std::os::raw::c_ushort = 2320;
pub const DAQmx_AI_LVDT_Sensitivity: ::std::os::raw::c_ushort = 2361;
pub const DAQmx_AI_LVDT_SensitivityUnits: ::std::os::raw::c_ushort = 8602;
pub const DAQmx_AI_RVDT_Units: ::std::os::raw::c_ushort = 2167;
pub const DAQmx_AI_RVDT_Sensitivity: ::std::os::raw::c_ushort = 2307;
pub const DAQmx_AI_RVDT_SensitivityUnits: ::std::os::raw::c_ushort = 8603;
pub const DAQmx_AI_EddyCurrentProxProbe_Units: ::std::os::raw::c_ushort =
    10944;
pub const DAQmx_AI_EddyCurrentProxProbe_Sensitivity: ::std::os::raw::c_ushort
          =
    10942;
pub const DAQmx_AI_EddyCurrentProxProbe_SensitivityUnits:
          ::std::os::raw::c_ushort =
    10943;
pub const DAQmx_AI_SoundPressure_MaxSoundPressureLvl: ::std::os::raw::c_ushort
          =
    8762;
pub const DAQmx_AI_SoundPressure_Units: ::std::os::raw::c_ushort = 5416;
pub const DAQmx_AI_SoundPressure_dBRef: ::std::os::raw::c_ushort = 10673;
pub const DAQmx_AI_Microphone_Sensitivity: ::std::os::raw::c_ushort = 5430;
pub const DAQmx_AI_Accel_Units: ::std::os::raw::c_ushort = 1651;
pub const DAQmx_AI_Accel_dBRef: ::std::os::raw::c_ushort = 10674;
pub const DAQmx_AI_Accel_4WireDCVoltage_Sensitivity: ::std::os::raw::c_ushort
          =
    12565;
pub const DAQmx_AI_Accel_4WireDCVoltage_SensitivityUnits:
          ::std::os::raw::c_ushort =
    12566;
pub const DAQmx_AI_Accel_Sensitivity: ::std::os::raw::c_ushort = 1682;
pub const DAQmx_AI_Accel_SensitivityUnits: ::std::os::raw::c_ushort = 8604;
pub const DAQmx_AI_Accel_Charge_Sensitivity: ::std::os::raw::c_ushort = 12563;
pub const DAQmx_AI_Accel_Charge_SensitivityUnits: ::std::os::raw::c_ushort =
    12564;
pub const DAQmx_AI_Velocity_Units: ::std::os::raw::c_ushort = 12276;
pub const DAQmx_AI_Velocity_IEPESensor_dBRef: ::std::os::raw::c_ushort =
    12277;
pub const DAQmx_AI_Velocity_IEPESensor_Sensitivity: ::std::os::raw::c_ushort =
    12278;
pub const DAQmx_AI_Velocity_IEPESensor_SensitivityUnits:
          ::std::os::raw::c_ushort =
    12279;
pub const DAQmx_AI_Force_Units: ::std::os::raw::c_ushort = 12149;
pub const DAQmx_AI_Force_IEPESensor_Sensitivity: ::std::os::raw::c_ushort =
    12161;
pub const DAQmx_AI_Force_IEPESensor_SensitivityUnits: ::std::os::raw::c_ushort
          =
    12162;
pub const DAQmx_AI_Pressure_Units: ::std::os::raw::c_ushort = 12150;
pub const DAQmx_AI_Torque_Units: ::std::os::raw::c_ushort = 12151;
pub const DAQmx_AI_Bridge_Units: ::std::os::raw::c_ushort = 12178;
pub const DAQmx_AI_Bridge_ElectricalUnits: ::std::os::raw::c_ushort = 12167;
pub const DAQmx_AI_Bridge_PhysicalUnits: ::std::os::raw::c_ushort = 12168;
pub const DAQmx_AI_Bridge_ScaleType: ::std::os::raw::c_ushort = 12169;
pub const DAQmx_AI_Bridge_TwoPointLin_First_ElectricalVal:
          ::std::os::raw::c_ushort =
    12170;
pub const DAQmx_AI_Bridge_TwoPointLin_First_PhysicalVal:
          ::std::os::raw::c_ushort =
    12171;
pub const DAQmx_AI_Bridge_TwoPointLin_Second_ElectricalVal:
          ::std::os::raw::c_ushort =
    12172;
pub const DAQmx_AI_Bridge_TwoPointLin_Second_PhysicalVal:
          ::std::os::raw::c_ushort =
    12173;
pub const DAQmx_AI_Bridge_Table_ElectricalVals: ::std::os::raw::c_ushort =
    12174;
pub const DAQmx_AI_Bridge_Table_PhysicalVals: ::std::os::raw::c_ushort =
    12175;
pub const DAQmx_AI_Bridge_Poly_ForwardCoeff: ::std::os::raw::c_ushort = 12176;
pub const DAQmx_AI_Bridge_Poly_ReverseCoeff: ::std::os::raw::c_ushort = 12177;
pub const DAQmx_AI_Charge_Units: ::std::os::raw::c_ushort = 12562;
pub const DAQmx_AI_Is_TEDS: ::std::os::raw::c_ushort = 10627;
pub const DAQmx_AI_TEDS_Units: ::std::os::raw::c_ushort = 8672;
pub const DAQmx_AI_Coupling: ::std::os::raw::c_uchar = 100;
pub const DAQmx_AI_Impedance: ::std::os::raw::c_uchar = 98;
pub const DAQmx_AI_TermCfg: ::std::os::raw::c_ushort = 4247;
pub const DAQmx_AI_InputSrc: ::std::os::raw::c_ushort = 8600;
pub const DAQmx_AI_ResistanceCfg: ::std::os::raw::c_ushort = 6273;
pub const DAQmx_AI_LeadWireResistance: ::std::os::raw::c_ushort = 6126;
pub const DAQmx_AI_Bridge_Cfg: ::std::os::raw::c_uchar = 135;
pub const DAQmx_AI_Bridge_NomResistance: ::std::os::raw::c_ushort = 6124;
pub const DAQmx_AI_Bridge_InitialVoltage: ::std::os::raw::c_ushort = 6125;
pub const DAQmx_AI_Bridge_InitialRatio: ::std::os::raw::c_ushort = 12166;
pub const DAQmx_AI_Bridge_ShuntCal_Enable: ::std::os::raw::c_uchar = 148;
pub const DAQmx_AI_Bridge_ShuntCal_Select: ::std::os::raw::c_ushort = 8661;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalASrc: ::std::os::raw::c_ushort =
    12490;
pub const DAQmx_AI_Bridge_ShuntCal_GainAdjust: ::std::os::raw::c_ushort =
    6463;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalAResistance:
          ::std::os::raw::c_ushort =
    12152;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalAActualResistance:
          ::std::os::raw::c_ushort =
    12153;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalBResistance:
          ::std::os::raw::c_ushort =
    12154;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalBActualResistance:
          ::std::os::raw::c_ushort =
    12155;
pub const DAQmx_AI_Bridge_Balance_CoarsePot: ::std::os::raw::c_ushort = 6129;
pub const DAQmx_AI_Bridge_Balance_FinePot: ::std::os::raw::c_ushort = 6388;
pub const DAQmx_AI_CurrentShunt_Loc: ::std::os::raw::c_ushort = 6130;
pub const DAQmx_AI_CurrentShunt_Resistance: ::std::os::raw::c_ushort = 6131;
pub const DAQmx_AI_Excit_Sense: ::std::os::raw::c_ushort = 12541;
pub const DAQmx_AI_Excit_Src: ::std::os::raw::c_ushort = 6132;
pub const DAQmx_AI_Excit_Val: ::std::os::raw::c_ushort = 6133;
pub const DAQmx_AI_Excit_UseForScaling: ::std::os::raw::c_ushort = 6140;
pub const DAQmx_AI_Excit_UseMultiplexed: ::std::os::raw::c_ushort = 8576;
pub const DAQmx_AI_Excit_ActualVal: ::std::os::raw::c_ushort = 6275;
pub const DAQmx_AI_Excit_DCorAC: ::std::os::raw::c_ushort = 6139;
pub const DAQmx_AI_Excit_VoltageOrCurrent: ::std::os::raw::c_ushort = 6134;
pub const DAQmx_AI_Excit_IdleOutputBehavior: ::std::os::raw::c_ushort = 12472;
pub const DAQmx_AI_ACExcit_Freq: ::std::os::raw::c_ushort = 257;
pub const DAQmx_AI_ACExcit_SyncEnable: ::std::os::raw::c_ushort = 258;
pub const DAQmx_AI_ACExcit_WireMode: ::std::os::raw::c_ushort = 6349;
pub const DAQmx_AI_OpenThrmcplDetectEnable: ::std::os::raw::c_ushort = 12146;
pub const DAQmx_AI_Thrmcpl_LeadOffsetVoltage: ::std::os::raw::c_ushort =
    12216;
pub const DAQmx_AI_Atten: ::std::os::raw::c_ushort = 6145;
pub const DAQmx_AI_ProbeAtten: ::std::os::raw::c_ushort = 10888;
pub const DAQmx_AI_Lowpass_Enable: ::std::os::raw::c_ushort = 6146;
pub const DAQmx_AI_Lowpass_CutoffFreq: ::std::os::raw::c_ushort = 6147;
pub const DAQmx_AI_Lowpass_SwitchCap_ClkSrc: ::std::os::raw::c_ushort = 6276;
pub const DAQmx_AI_Lowpass_SwitchCap_ExtClkFreq: ::std::os::raw::c_ushort =
    6277;
pub const DAQmx_AI_Lowpass_SwitchCap_ExtClkDiv: ::std::os::raw::c_ushort =
    6278;
pub const DAQmx_AI_Lowpass_SwitchCap_OutClkDiv: ::std::os::raw::c_ushort =
    6279;
pub const DAQmx_AI_DigFltr_Enable: ::std::os::raw::c_ushort = 12477;
pub const DAQmx_AI_DigFltr_Type: ::std::os::raw::c_ushort = 12478;
pub const DAQmx_AI_DigFltr_Response: ::std::os::raw::c_ushort = 12479;
pub const DAQmx_AI_DigFltr_Order: ::std::os::raw::c_ushort = 12480;
pub const DAQmx_AI_DigFltr_Lowpass_CutoffFreq: ::std::os::raw::c_ushort =
    12481;
pub const DAQmx_AI_DigFltr_Highpass_CutoffFreq: ::std::os::raw::c_ushort =
    12482;
pub const DAQmx_AI_DigFltr_Bandpass_CenterFreq: ::std::os::raw::c_ushort =
    12483;
pub const DAQmx_AI_DigFltr_Bandpass_Width: ::std::os::raw::c_ushort = 12484;
pub const DAQmx_AI_DigFltr_Notch_CenterFreq: ::std::os::raw::c_ushort = 12485;
pub const DAQmx_AI_DigFltr_Notch_Width: ::std::os::raw::c_ushort = 12486;
pub const DAQmx_AI_DigFltr_Coeff: ::std::os::raw::c_ushort = 12487;
pub const DAQmx_AI_FilterDelay: ::std::os::raw::c_ushort = 12269;
pub const DAQmx_AI_FilterDelayUnits: ::std::os::raw::c_ushort = 12401;
pub const DAQmx_AI_RemoveFilterDelay: ::std::os::raw::c_ushort = 12221;
pub const DAQmx_AI_FilterDelayAdjustment: ::std::os::raw::c_ushort = 12404;
pub const DAQmx_AI_AveragingWinSize: ::std::os::raw::c_ushort = 12270;
pub const DAQmx_AI_ResolutionUnits: ::std::os::raw::c_ushort = 5988;
pub const DAQmx_AI_Resolution: ::std::os::raw::c_ushort = 5989;
pub const DAQmx_AI_RawSampSize: ::std::os::raw::c_ushort = 8922;
pub const DAQmx_AI_RawSampJustification: ::std::os::raw::c_uchar = 80;
pub const DAQmx_AI_ADCTimingMode: ::std::os::raw::c_ushort = 10745;
pub const DAQmx_AI_ADCCustomTimingMode: ::std::os::raw::c_ushort = 12139;
pub const DAQmx_AI_Dither_Enable: ::std::os::raw::c_uchar = 104;
pub const DAQmx_AI_ChanCal_HasValidCalInfo: ::std::os::raw::c_ushort = 8855;
pub const DAQmx_AI_ChanCal_EnableCal: ::std::os::raw::c_ushort = 8856;
pub const DAQmx_AI_ChanCal_ApplyCalIfExp: ::std::os::raw::c_ushort = 8857;
pub const DAQmx_AI_ChanCal_ScaleType: ::std::os::raw::c_ushort = 8860;
pub const DAQmx_AI_ChanCal_Table_PreScaledVals: ::std::os::raw::c_ushort =
    8861;
pub const DAQmx_AI_ChanCal_Table_ScaledVals: ::std::os::raw::c_ushort = 8862;
pub const DAQmx_AI_ChanCal_Poly_ForwardCoeff: ::std::os::raw::c_ushort = 8863;
pub const DAQmx_AI_ChanCal_Poly_ReverseCoeff: ::std::os::raw::c_ushort = 8864;
pub const DAQmx_AI_ChanCal_OperatorName: ::std::os::raw::c_ushort = 8867;
pub const DAQmx_AI_ChanCal_Desc: ::std::os::raw::c_ushort = 8868;
pub const DAQmx_AI_ChanCal_Verif_RefVals: ::std::os::raw::c_ushort = 8865;
pub const DAQmx_AI_ChanCal_Verif_AcqVals: ::std::os::raw::c_ushort = 8866;
pub const DAQmx_AI_Rng_High: ::std::os::raw::c_ushort = 6165;
pub const DAQmx_AI_Rng_Low: ::std::os::raw::c_ushort = 6166;
pub const DAQmx_AI_DCOffset: ::std::os::raw::c_ushort = 10889;
pub const DAQmx_AI_Gain: ::std::os::raw::c_ushort = 6168;
pub const DAQmx_AI_SampAndHold_Enable: ::std::os::raw::c_ushort = 6170;
pub const DAQmx_AI_AutoZeroMode: ::std::os::raw::c_ushort = 5984;
pub const DAQmx_AI_DataXferMech: ::std::os::raw::c_ushort = 6177;
pub const DAQmx_AI_DataXferReqCond: ::std::os::raw::c_ushort = 6283;
pub const DAQmx_AI_DataXferCustomThreshold: ::std::os::raw::c_ushort = 8972;
pub const DAQmx_AI_UsbXferReqSize: ::std::os::raw::c_ushort = 10894;
pub const DAQmx_AI_UsbXferReqCount: ::std::os::raw::c_ushort = 12288;
pub const DAQmx_AI_MemMapEnable: ::std::os::raw::c_ushort = 6284;
pub const DAQmx_AI_RawDataCompressionType: ::std::os::raw::c_ushort = 8920;
pub const DAQmx_AI_LossyLSBRemoval_CompressedSampSize:
          ::std::os::raw::c_ushort =
    8921;
pub const DAQmx_AI_DevScalingCoeff: ::std::os::raw::c_ushort = 6448;
pub const DAQmx_AI_EnhancedAliasRejectionEnable: ::std::os::raw::c_ushort =
    8852;
pub const DAQmx_AI_OpenChanDetectEnable: ::std::os::raw::c_ushort = 12543;
pub const DAQmx_AO_Max: ::std::os::raw::c_ushort = 4486;
pub const DAQmx_AO_Min: ::std::os::raw::c_ushort = 4487;
pub const DAQmx_AO_CustomScaleName: ::std::os::raw::c_ushort = 4488;
pub const DAQmx_AO_OutputType: ::std::os::raw::c_ushort = 4360;
pub const DAQmx_AO_Voltage_Units: ::std::os::raw::c_ushort = 4484;
pub const DAQmx_AO_Voltage_CurrentLimit: ::std::os::raw::c_ushort = 10781;
pub const DAQmx_AO_Current_Units: ::std::os::raw::c_ushort = 4361;
pub const DAQmx_AO_FuncGen_Type: ::std::os::raw::c_ushort = 10776;
pub const DAQmx_AO_FuncGen_Freq: ::std::os::raw::c_ushort = 10777;
pub const DAQmx_AO_FuncGen_Amplitude: ::std::os::raw::c_ushort = 10778;
pub const DAQmx_AO_FuncGen_Offset: ::std::os::raw::c_ushort = 10779;
pub const DAQmx_AO_FuncGen_Square_DutyCycle: ::std::os::raw::c_ushort = 10780;
pub const DAQmx_AO_FuncGen_ModulationType: ::std::os::raw::c_ushort = 10786;
pub const DAQmx_AO_FuncGen_FMDeviation: ::std::os::raw::c_ushort = 10787;
pub const DAQmx_AO_OutputImpedance: ::std::os::raw::c_ushort = 5264;
pub const DAQmx_AO_LoadImpedance: ::std::os::raw::c_ushort = 289;
pub const DAQmx_AO_IdleOutputBehavior: ::std::os::raw::c_ushort = 8768;
pub const DAQmx_AO_TermCfg: ::std::os::raw::c_ushort = 6286;
pub const DAQmx_AO_ResolutionUnits: ::std::os::raw::c_ushort = 6187;
pub const DAQmx_AO_Resolution: ::std::os::raw::c_ushort = 6188;
pub const DAQmx_AO_DAC_Rng_High: ::std::os::raw::c_ushort = 6190;
pub const DAQmx_AO_DAC_Rng_Low: ::std::os::raw::c_ushort = 6189;
pub const DAQmx_AO_DAC_Ref_ConnToGnd: ::std::os::raw::c_ushort = 304;
pub const DAQmx_AO_DAC_Ref_AllowConnToGnd: ::std::os::raw::c_ushort = 6192;
pub const DAQmx_AO_DAC_Ref_Src: ::std::os::raw::c_ushort = 306;
pub const DAQmx_AO_DAC_Ref_ExtSrc: ::std::os::raw::c_ushort = 8786;
pub const DAQmx_AO_DAC_Ref_Val: ::std::os::raw::c_ushort = 6194;
pub const DAQmx_AO_DAC_Offset_Src: ::std::os::raw::c_ushort = 8787;
pub const DAQmx_AO_DAC_Offset_ExtSrc: ::std::os::raw::c_ushort = 8788;
pub const DAQmx_AO_DAC_Offset_Val: ::std::os::raw::c_ushort = 8789;
pub const DAQmx_AO_ReglitchEnable: ::std::os::raw::c_ushort = 307;
pub const DAQmx_AO_FilterDelay: ::std::os::raw::c_ushort = 12405;
pub const DAQmx_AO_FilterDelayUnits: ::std::os::raw::c_ushort = 12406;
pub const DAQmx_AO_FilterDelayAdjustment: ::std::os::raw::c_ushort = 12402;
pub const DAQmx_AO_Gain: ::std::os::raw::c_ushort = 280;
pub const DAQmx_AO_UseOnlyOnBrdMem: ::std::os::raw::c_ushort = 6202;
pub const DAQmx_AO_DataXferMech: ::std::os::raw::c_ushort = 308;
pub const DAQmx_AO_DataXferReqCond: ::std::os::raw::c_ushort = 6204;
pub const DAQmx_AO_UsbXferReqSize: ::std::os::raw::c_ushort = 10895;
pub const DAQmx_AO_UsbXferReqCount: ::std::os::raw::c_ushort = 12289;
pub const DAQmx_AO_MemMapEnable: ::std::os::raw::c_ushort = 6287;
pub const DAQmx_AO_DevScalingCoeff: ::std::os::raw::c_ushort = 6449;
pub const DAQmx_AO_EnhancedImageRejectionEnable: ::std::os::raw::c_ushort =
    8769;
pub const DAQmx_DI_InvertLines: ::std::os::raw::c_ushort = 1939;
pub const DAQmx_DI_NumLines: ::std::os::raw::c_ushort = 8568;
pub const DAQmx_DI_DigFltr_Enable: ::std::os::raw::c_ushort = 8662;
pub const DAQmx_DI_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort = 8663;
pub const DAQmx_DI_DigFltr_EnableBusMode: ::std::os::raw::c_ushort = 12030;
pub const DAQmx_DI_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort = 11988;
pub const DAQmx_DI_DigFltr_TimebaseRate: ::std::os::raw::c_ushort = 11989;
pub const DAQmx_DI_DigSync_Enable: ::std::os::raw::c_ushort = 11990;
pub const DAQmx_DI_Tristate: ::std::os::raw::c_ushort = 6288;
pub const DAQmx_DI_LogicFamily: ::std::os::raw::c_ushort = 10605;
pub const DAQmx_DI_DataXferMech: ::std::os::raw::c_ushort = 8803;
pub const DAQmx_DI_DataXferReqCond: ::std::os::raw::c_ushort = 8804;
pub const DAQmx_DI_UsbXferReqSize: ::std::os::raw::c_ushort = 10896;
pub const DAQmx_DI_UsbXferReqCount: ::std::os::raw::c_ushort = 12290;
pub const DAQmx_DI_MemMapEnable: ::std::os::raw::c_ushort = 10602;
pub const DAQmx_DI_AcquireOn: ::std::os::raw::c_ushort = 10598;
pub const DAQmx_DO_OutputDriveType: ::std::os::raw::c_ushort = 4407;
pub const DAQmx_DO_InvertLines: ::std::os::raw::c_ushort = 4403;
pub const DAQmx_DO_NumLines: ::std::os::raw::c_ushort = 8569;
pub const DAQmx_DO_Tristate: ::std::os::raw::c_ushort = 6387;
pub const DAQmx_DO_LineStates_StartState: ::std::os::raw::c_ushort = 10610;
pub const DAQmx_DO_LineStates_PausedState: ::std::os::raw::c_ushort = 10599;
pub const DAQmx_DO_LineStates_DoneState: ::std::os::raw::c_ushort = 10600;
pub const DAQmx_DO_LogicFamily: ::std::os::raw::c_ushort = 10606;
pub const DAQmx_DO_Overcurrent_Limit: ::std::os::raw::c_ushort = 10885;
pub const DAQmx_DO_Overcurrent_AutoReenable: ::std::os::raw::c_ushort = 10886;
pub const DAQmx_DO_Overcurrent_ReenablePeriod: ::std::os::raw::c_ushort =
    10887;
pub const DAQmx_DO_UseOnlyOnBrdMem: ::std::os::raw::c_ushort = 8805;
pub const DAQmx_DO_DataXferMech: ::std::os::raw::c_ushort = 8806;
pub const DAQmx_DO_DataXferReqCond: ::std::os::raw::c_ushort = 8807;
pub const DAQmx_DO_UsbXferReqSize: ::std::os::raw::c_ushort = 10897;
pub const DAQmx_DO_UsbXferReqCount: ::std::os::raw::c_ushort = 12291;
pub const DAQmx_DO_MemMapEnable: ::std::os::raw::c_ushort = 10603;
pub const DAQmx_DO_GenerateOn: ::std::os::raw::c_ushort = 10601;
pub const DAQmx_CI_Max: ::std::os::raw::c_ushort = 6300;
pub const DAQmx_CI_Min: ::std::os::raw::c_ushort = 6301;
pub const DAQmx_CI_CustomScaleName: ::std::os::raw::c_ushort = 6302;
pub const DAQmx_CI_MeasType: ::std::os::raw::c_ushort = 6304;
pub const DAQmx_CI_Freq_Units: ::std::os::raw::c_ushort = 6305;
pub const DAQmx_CI_Freq_Term: ::std::os::raw::c_ushort = 6306;
pub const DAQmx_CI_Freq_TermCfg: ::std::os::raw::c_ushort = 12439;
pub const DAQmx_CI_Freq_LogicLvlBehavior: ::std::os::raw::c_ushort = 12440;
pub const DAQmx_CI_Freq_DigFltr_Enable: ::std::os::raw::c_ushort = 8679;
pub const DAQmx_CI_Freq_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort =
    8680;
pub const DAQmx_CI_Freq_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort = 8681;
pub const DAQmx_CI_Freq_DigFltr_TimebaseRate: ::std::os::raw::c_ushort = 8682;
pub const DAQmx_CI_Freq_DigSync_Enable: ::std::os::raw::c_ushort = 8683;
pub const DAQmx_CI_Freq_StartingEdge: ::std::os::raw::c_ushort = 1945;
pub const DAQmx_CI_Freq_MeasMeth: ::std::os::raw::c_ushort = 324;
pub const DAQmx_CI_Freq_EnableAveraging: ::std::os::raw::c_ushort = 11984;
pub const DAQmx_CI_Freq_MeasTime: ::std::os::raw::c_ushort = 325;
pub const DAQmx_CI_Freq_Div: ::std::os::raw::c_ushort = 327;
pub const DAQmx_CI_Period_Units: ::std::os::raw::c_ushort = 6307;
pub const DAQmx_CI_Period_Term: ::std::os::raw::c_ushort = 6308;
pub const DAQmx_CI_Period_TermCfg: ::std::os::raw::c_ushort = 12441;
pub const DAQmx_CI_Period_LogicLvlBehavior: ::std::os::raw::c_ushort = 12442;
pub const DAQmx_CI_Period_DigFltr_Enable: ::std::os::raw::c_ushort = 8684;
pub const DAQmx_CI_Period_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort =
    8685;
pub const DAQmx_CI_Period_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    8686;
pub const DAQmx_CI_Period_DigFltr_TimebaseRate: ::std::os::raw::c_ushort =
    8687;
pub const DAQmx_CI_Period_DigSync_Enable: ::std::os::raw::c_ushort = 8688;
pub const DAQmx_CI_Period_StartingEdge: ::std::os::raw::c_ushort = 2130;
pub const DAQmx_CI_Period_MeasMeth: ::std::os::raw::c_ushort = 6444;
pub const DAQmx_CI_Period_EnableAveraging: ::std::os::raw::c_ushort = 11985;
pub const DAQmx_CI_Period_MeasTime: ::std::os::raw::c_ushort = 6445;
pub const DAQmx_CI_Period_Div: ::std::os::raw::c_ushort = 6446;
pub const DAQmx_CI_CountEdges_Term: ::std::os::raw::c_ushort = 6343;
pub const DAQmx_CI_CountEdges_TermCfg: ::std::os::raw::c_ushort = 12443;
pub const DAQmx_CI_CountEdges_LogicLvlBehavior: ::std::os::raw::c_ushort =
    12444;
pub const DAQmx_CI_CountEdges_DigFltr_Enable: ::std::os::raw::c_ushort = 8694;
pub const DAQmx_CI_CountEdges_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort
          =
    8695;
pub const DAQmx_CI_CountEdges_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    8696;
pub const DAQmx_CI_CountEdges_DigFltr_TimebaseRate: ::std::os::raw::c_ushort =
    8697;
pub const DAQmx_CI_CountEdges_DigSync_Enable: ::std::os::raw::c_ushort = 8698;
pub const DAQmx_CI_CountEdges_Dir: ::std::os::raw::c_ushort = 1686;
pub const DAQmx_CI_CountEdges_DirTerm: ::std::os::raw::c_ushort = 8673;
pub const DAQmx_CI_CountEdges_CountDir_TermCfg: ::std::os::raw::c_ushort =
    12445;
pub const DAQmx_CI_CountEdges_CountDir_LogicLvlBehavior:
          ::std::os::raw::c_ushort =
    12446;
pub const DAQmx_CI_CountEdges_CountDir_DigFltr_Enable:
          ::std::os::raw::c_ushort =
    8689;
pub const DAQmx_CI_CountEdges_CountDir_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8690;
pub const DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    8691;
pub const DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8692;
pub const DAQmx_CI_CountEdges_CountDir_DigSync_Enable:
          ::std::os::raw::c_ushort =
    8693;
pub const DAQmx_CI_CountEdges_InitialCnt: ::std::os::raw::c_ushort = 1688;
pub const DAQmx_CI_CountEdges_ActiveEdge: ::std::os::raw::c_ushort = 1687;
pub const DAQmx_CI_CountEdges_CountReset_Enable: ::std::os::raw::c_ushort =
    12207;
pub const DAQmx_CI_CountEdges_CountReset_ResetCount: ::std::os::raw::c_ushort
          =
    12208;
pub const DAQmx_CI_CountEdges_CountReset_Term: ::std::os::raw::c_ushort =
    12209;
pub const DAQmx_CI_CountEdges_CountReset_TermCfg: ::std::os::raw::c_ushort =
    12447;
pub const DAQmx_CI_CountEdges_CountReset_LogicLvlBehavior:
          ::std::os::raw::c_ushort =
    12448;
pub const DAQmx_CI_CountEdges_CountReset_DigFltr_Enable:
          ::std::os::raw::c_ushort =
    12211;
pub const DAQmx_CI_CountEdges_CountReset_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12212;
pub const DAQmx_CI_CountEdges_CountReset_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    12213;
pub const DAQmx_CI_CountEdges_CountReset_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    12214;
pub const DAQmx_CI_CountEdges_CountReset_DigSync_Enable:
          ::std::os::raw::c_ushort =
    12215;
pub const DAQmx_CI_CountEdges_CountReset_ActiveEdge: ::std::os::raw::c_ushort
          =
    12210;
pub const DAQmx_CI_CountEdges_Gate_Enable: ::std::os::raw::c_ushort = 12525;
pub const DAQmx_CI_CountEdges_Gate_Term: ::std::os::raw::c_ushort = 12526;
pub const DAQmx_CI_CountEdges_Gate_TermCfg: ::std::os::raw::c_ushort = 12527;
pub const DAQmx_CI_CountEdges_Gate_LogicLvlBehavior: ::std::os::raw::c_ushort
          =
    12528;
pub const DAQmx_CI_CountEdges_Gate_DigFltrEnable: ::std::os::raw::c_ushort =
    12529;
pub const DAQmx_CI_CountEdges_Gate_DigFltrMinPulseWidth:
          ::std::os::raw::c_ushort =
    12530;
pub const DAQmx_CI_CountEdges_Gate_DigFltrTimebaseSrc:
          ::std::os::raw::c_ushort =
    12531;
pub const DAQmx_CI_CountEdges_Gate_DigFltrTimebaseRate:
          ::std::os::raw::c_ushort =
    12532;
pub const DAQmx_CI_CountEdges_GateWhen: ::std::os::raw::c_ushort = 12533;
pub const DAQmx_CI_DutyCycle_Term: ::std::os::raw::c_ushort = 12429;
pub const DAQmx_CI_DutyCycle_TermCfg: ::std::os::raw::c_ushort = 12449;
pub const DAQmx_CI_DutyCycle_LogicLvlBehavior: ::std::os::raw::c_ushort =
    12450;
pub const DAQmx_CI_DutyCycle_DigFltr_Enable: ::std::os::raw::c_ushort = 12430;
pub const DAQmx_CI_DutyCycle_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort =
    12431;
pub const DAQmx_CI_DutyCycle_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    12432;
pub const DAQmx_CI_DutyCycle_DigFltr_TimebaseRate: ::std::os::raw::c_ushort =
    12433;
pub const DAQmx_CI_DutyCycle_StartingEdge: ::std::os::raw::c_ushort = 12434;
pub const DAQmx_CI_AngEncoder_Units: ::std::os::raw::c_ushort = 6310;
pub const DAQmx_CI_AngEncoder_PulsesPerRev: ::std::os::raw::c_ushort = 2165;
pub const DAQmx_CI_AngEncoder_InitialAngle: ::std::os::raw::c_ushort = 2177;
pub const DAQmx_CI_LinEncoder_Units: ::std::os::raw::c_ushort = 6313;
pub const DAQmx_CI_LinEncoder_DistPerPulse: ::std::os::raw::c_ushort = 2321;
pub const DAQmx_CI_LinEncoder_InitialPos: ::std::os::raw::c_ushort = 2325;
pub const DAQmx_CI_Encoder_DecodingType: ::std::os::raw::c_ushort = 8678;
pub const DAQmx_CI_Encoder_AInputTerm: ::std::os::raw::c_ushort = 8605;
pub const DAQmx_CI_Encoder_AInputTermCfg: ::std::os::raw::c_ushort = 12451;
pub const DAQmx_CI_Encoder_AInputLogicLvlBehavior: ::std::os::raw::c_ushort =
    12452;
pub const DAQmx_CI_Encoder_AInput_DigFltr_Enable: ::std::os::raw::c_ushort =
    8699;
pub const DAQmx_CI_Encoder_AInput_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8700;
pub const DAQmx_CI_Encoder_AInput_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    8701;
pub const DAQmx_CI_Encoder_AInput_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8702;
pub const DAQmx_CI_Encoder_AInput_DigSync_Enable: ::std::os::raw::c_ushort =
    8703;
pub const DAQmx_CI_Encoder_BInputTerm: ::std::os::raw::c_ushort = 8606;
pub const DAQmx_CI_Encoder_BInputTermCfg: ::std::os::raw::c_ushort = 12453;
pub const DAQmx_CI_Encoder_BInputLogicLvlBehavior: ::std::os::raw::c_ushort =
    12454;
pub const DAQmx_CI_Encoder_BInput_DigFltr_Enable: ::std::os::raw::c_ushort =
    8704;
pub const DAQmx_CI_Encoder_BInput_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8705;
pub const DAQmx_CI_Encoder_BInput_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    8706;
pub const DAQmx_CI_Encoder_BInput_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8707;
pub const DAQmx_CI_Encoder_BInput_DigSync_Enable: ::std::os::raw::c_ushort =
    8708;
pub const DAQmx_CI_Encoder_ZInputTerm: ::std::os::raw::c_ushort = 8607;
pub const DAQmx_CI_Encoder_ZInputTermCfg: ::std::os::raw::c_ushort = 12455;
pub const DAQmx_CI_Encoder_ZInputLogicLvlBehavior: ::std::os::raw::c_ushort =
    12456;
pub const DAQmx_CI_Encoder_ZInput_DigFltr_Enable: ::std::os::raw::c_ushort =
    8709;
pub const DAQmx_CI_Encoder_ZInput_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8710;
pub const DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    8711;
pub const DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8712;
pub const DAQmx_CI_Encoder_ZInput_DigSync_Enable: ::std::os::raw::c_ushort =
    8713;
pub const DAQmx_CI_Encoder_ZIndexEnable: ::std::os::raw::c_ushort = 2192;
pub const DAQmx_CI_Encoder_ZIndexVal: ::std::os::raw::c_ushort = 2184;
pub const DAQmx_CI_Encoder_ZIndexPhase: ::std::os::raw::c_ushort = 2185;
pub const DAQmx_CI_PulseWidth_Units: ::std::os::raw::c_ushort = 2083;
pub const DAQmx_CI_PulseWidth_Term: ::std::os::raw::c_ushort = 6314;
pub const DAQmx_CI_PulseWidth_TermCfg: ::std::os::raw::c_ushort = 12457;
pub const DAQmx_CI_PulseWidth_LogicLvlBehavior: ::std::os::raw::c_ushort =
    12458;
pub const DAQmx_CI_PulseWidth_DigFltr_Enable: ::std::os::raw::c_ushort = 8714;
pub const DAQmx_CI_PulseWidth_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort
          =
    8715;
pub const DAQmx_CI_PulseWidth_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    8716;
pub const DAQmx_CI_PulseWidth_DigFltr_TimebaseRate: ::std::os::raw::c_ushort =
    8717;
pub const DAQmx_CI_PulseWidth_DigSync_Enable: ::std::os::raw::c_ushort = 8718;
pub const DAQmx_CI_PulseWidth_StartingEdge: ::std::os::raw::c_ushort = 2085;
pub const DAQmx_CI_Timestamp_Units: ::std::os::raw::c_ushort = 8883;
pub const DAQmx_CI_Timestamp_InitialSeconds: ::std::os::raw::c_ushort = 8884;
pub const DAQmx_CI_GPS_SyncMethod: ::std::os::raw::c_ushort = 4242;
pub const DAQmx_CI_GPS_SyncSrc: ::std::os::raw::c_ushort = 4243;
pub const DAQmx_CI_Velocity_AngEncoder_Units: ::std::os::raw::c_ushort =
    12504;
pub const DAQmx_CI_Velocity_AngEncoder_PulsesPerRev: ::std::os::raw::c_ushort
          =
    12505;
pub const DAQmx_CI_Velocity_LinEncoder_Units: ::std::os::raw::c_ushort =
    12506;
pub const DAQmx_CI_Velocity_LinEncoder_DistPerPulse: ::std::os::raw::c_ushort
          =
    12507;
pub const DAQmx_CI_Velocity_Encoder_DecodingType: ::std::os::raw::c_ushort =
    12508;
pub const DAQmx_CI_Velocity_Encoder_AInputTerm: ::std::os::raw::c_ushort =
    12509;
pub const DAQmx_CI_Velocity_Encoder_AInputTermCfg: ::std::os::raw::c_ushort =
    12510;
pub const DAQmx_CI_Velocity_Encoder_AInputLogicLvlBehavior:
          ::std::os::raw::c_ushort =
    12511;
pub const DAQmx_CI_Velocity_Encoder_AInputDigFltr_Enable:
          ::std::os::raw::c_ushort =
    12512;
pub const DAQmx_CI_Velocity_Encoder_AInputDigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12513;
pub const DAQmx_CI_Velocity_Encoder_AInputDigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    12514;
pub const DAQmx_CI_Velocity_Encoder_AInputDigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    12515;
pub const DAQmx_CI_Velocity_Encoder_BInputTerm: ::std::os::raw::c_ushort =
    12516;
pub const DAQmx_CI_Velocity_Encoder_BInputTermCfg: ::std::os::raw::c_ushort =
    12517;
pub const DAQmx_CI_Velocity_Encoder_BInputLogicLvlBehavior:
          ::std::os::raw::c_ushort =
    12518;
pub const DAQmx_CI_Velocity_Encoder_BInputDigFltr_Enable:
          ::std::os::raw::c_ushort =
    12519;
pub const DAQmx_CI_Velocity_Encoder_BInputDigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12520;
pub const DAQmx_CI_Velocity_Encoder_BInputDigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    12521;
pub const DAQmx_CI_Velocity_Encoder_BInputDigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    12522;
pub const DAQmx_CI_Velocity_MeasTime: ::std::os::raw::c_ushort = 12523;
pub const DAQmx_CI_Velocity_Div: ::std::os::raw::c_ushort = 12524;
pub const DAQmx_CI_TwoEdgeSep_Units: ::std::os::raw::c_ushort = 6316;
pub const DAQmx_CI_TwoEdgeSep_FirstTerm: ::std::os::raw::c_ushort = 6317;
pub const DAQmx_CI_TwoEdgeSep_FirstTermCfg: ::std::os::raw::c_ushort = 12459;
pub const DAQmx_CI_TwoEdgeSep_FirstLogicLvlBehavior: ::std::os::raw::c_ushort
          =
    12460;
pub const DAQmx_CI_TwoEdgeSep_First_DigFltr_Enable: ::std::os::raw::c_ushort =
    8719;
pub const DAQmx_CI_TwoEdgeSep_First_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8720;
pub const DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    8721;
pub const DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8722;
pub const DAQmx_CI_TwoEdgeSep_First_DigSync_Enable: ::std::os::raw::c_ushort =
    8723;
pub const DAQmx_CI_TwoEdgeSep_FirstEdge: ::std::os::raw::c_ushort = 2099;
pub const DAQmx_CI_TwoEdgeSep_SecondTerm: ::std::os::raw::c_ushort = 6318;
pub const DAQmx_CI_TwoEdgeSep_SecondTermCfg: ::std::os::raw::c_ushort = 12461;
pub const DAQmx_CI_TwoEdgeSep_SecondLogicLvlBehavior: ::std::os::raw::c_ushort
          =
    12462;
pub const DAQmx_CI_TwoEdgeSep_Second_DigFltr_Enable: ::std::os::raw::c_ushort
          =
    8724;
pub const DAQmx_CI_TwoEdgeSep_Second_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8725;
pub const DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    8726;
pub const DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8727;
pub const DAQmx_CI_TwoEdgeSep_Second_DigSync_Enable: ::std::os::raw::c_ushort
          =
    8728;
pub const DAQmx_CI_TwoEdgeSep_SecondEdge: ::std::os::raw::c_ushort = 2100;
pub const DAQmx_CI_SemiPeriod_Units: ::std::os::raw::c_ushort = 6319;
pub const DAQmx_CI_SemiPeriod_Term: ::std::os::raw::c_ushort = 6320;
pub const DAQmx_CI_SemiPeriod_TermCfg: ::std::os::raw::c_ushort = 12463;
pub const DAQmx_CI_SemiPeriod_LogicLvlBehavior: ::std::os::raw::c_ushort =
    12464;
pub const DAQmx_CI_SemiPeriod_DigFltr_Enable: ::std::os::raw::c_ushort = 8729;
pub const DAQmx_CI_SemiPeriod_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort
          =
    8730;
pub const DAQmx_CI_SemiPeriod_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    8731;
pub const DAQmx_CI_SemiPeriod_DigFltr_TimebaseRate: ::std::os::raw::c_ushort =
    8732;
pub const DAQmx_CI_SemiPeriod_DigSync_Enable: ::std::os::raw::c_ushort = 8733;
pub const DAQmx_CI_SemiPeriod_StartingEdge: ::std::os::raw::c_ushort = 8958;
pub const DAQmx_CI_Pulse_Freq_Units: ::std::os::raw::c_ushort = 12043;
pub const DAQmx_CI_Pulse_Freq_Term: ::std::os::raw::c_ushort = 12036;
pub const DAQmx_CI_Pulse_Freq_TermCfg: ::std::os::raw::c_ushort = 12465;
pub const DAQmx_CI_Pulse_Freq_LogicLvlBehavior: ::std::os::raw::c_ushort =
    12466;
pub const DAQmx_CI_Pulse_Freq_DigFltr_Enable: ::std::os::raw::c_ushort =
    12038;
pub const DAQmx_CI_Pulse_Freq_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort
          =
    12039;
pub const DAQmx_CI_Pulse_Freq_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    12040;
pub const DAQmx_CI_Pulse_Freq_DigFltr_TimebaseRate: ::std::os::raw::c_ushort =
    12041;
pub const DAQmx_CI_Pulse_Freq_DigSync_Enable: ::std::os::raw::c_ushort =
    12042;
pub const DAQmx_CI_Pulse_Freq_Start_Edge: ::std::os::raw::c_ushort = 12037;
pub const DAQmx_CI_Pulse_Time_Units: ::std::os::raw::c_ushort = 12051;
pub const DAQmx_CI_Pulse_Time_Term: ::std::os::raw::c_ushort = 12044;
pub const DAQmx_CI_Pulse_Time_TermCfg: ::std::os::raw::c_ushort = 12467;
pub const DAQmx_CI_Pulse_Time_LogicLvlBehavior: ::std::os::raw::c_ushort =
    12468;
pub const DAQmx_CI_Pulse_Time_DigFltr_Enable: ::std::os::raw::c_ushort =
    12046;
pub const DAQmx_CI_Pulse_Time_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort
          =
    12047;
pub const DAQmx_CI_Pulse_Time_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    12048;
pub const DAQmx_CI_Pulse_Time_DigFltr_TimebaseRate: ::std::os::raw::c_ushort =
    12049;
pub const DAQmx_CI_Pulse_Time_DigSync_Enable: ::std::os::raw::c_ushort =
    12050;
pub const DAQmx_CI_Pulse_Time_StartEdge: ::std::os::raw::c_ushort = 12045;
pub const DAQmx_CI_Pulse_Ticks_Term: ::std::os::raw::c_ushort = 12052;
pub const DAQmx_CI_Pulse_Ticks_TermCfg: ::std::os::raw::c_ushort = 12469;
pub const DAQmx_CI_Pulse_Ticks_LogicLvlBehavior: ::std::os::raw::c_ushort =
    12470;
pub const DAQmx_CI_Pulse_Ticks_DigFltr_Enable: ::std::os::raw::c_ushort =
    12054;
pub const DAQmx_CI_Pulse_Ticks_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort
          =
    12055;
pub const DAQmx_CI_Pulse_Ticks_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    12056;
pub const DAQmx_CI_Pulse_Ticks_DigFltr_TimebaseRate: ::std::os::raw::c_ushort
          =
    12057;
pub const DAQmx_CI_Pulse_Ticks_DigSync_Enable: ::std::os::raw::c_ushort =
    12058;
pub const DAQmx_CI_Pulse_Ticks_StartEdge: ::std::os::raw::c_ushort = 12053;
pub const DAQmx_CI_CtrTimebaseSrc: ::std::os::raw::c_ushort = 323;
pub const DAQmx_CI_CtrTimebaseRate: ::std::os::raw::c_ushort = 6322;
pub const DAQmx_CI_CtrTimebaseActiveEdge: ::std::os::raw::c_ushort = 322;
pub const DAQmx_CI_CtrTimebase_DigFltr_Enable: ::std::os::raw::c_ushort =
    8817;
pub const DAQmx_CI_CtrTimebase_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort
          =
    8818;
pub const DAQmx_CI_CtrTimebase_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    8819;
pub const DAQmx_CI_CtrTimebase_DigFltr_TimebaseRate: ::std::os::raw::c_ushort
          =
    8820;
pub const DAQmx_CI_CtrTimebase_DigSync_Enable: ::std::os::raw::c_ushort =
    8821;
pub const DAQmx_CI_ThreshVoltage: ::std::os::raw::c_ushort = 12471;
pub const DAQmx_CI_Count: ::std::os::raw::c_ushort = 328;
pub const DAQmx_CI_OutputState: ::std::os::raw::c_ushort = 329;
pub const DAQmx_CI_TCReached: ::std::os::raw::c_ushort = 336;
pub const DAQmx_CI_CtrTimebaseMasterTimebaseDiv: ::std::os::raw::c_ushort =
    6323;
pub const DAQmx_CI_SampClkOverrunBehavior: ::std::os::raw::c_ushort = 12435;
pub const DAQmx_CI_SampClkOverrunSentinelVal: ::std::os::raw::c_ushort =
    12436;
pub const DAQmx_CI_DataXferMech: ::std::os::raw::c_ushort = 512;
pub const DAQmx_CI_DataXferReqCond: ::std::os::raw::c_ushort = 12027;
pub const DAQmx_CI_UsbXferReqSize: ::std::os::raw::c_ushort = 10898;
pub const DAQmx_CI_UsbXferReqCount: ::std::os::raw::c_ushort = 12292;
pub const DAQmx_CI_MemMapEnable: ::std::os::raw::c_ushort = 11986;
pub const DAQmx_CI_NumPossiblyInvalidSamps: ::std::os::raw::c_ushort = 6460;
pub const DAQmx_CI_DupCountPrevent: ::std::os::raw::c_ushort = 8620;
pub const DAQmx_CI_Prescaler: ::std::os::raw::c_ushort = 8761;
pub const DAQmx_CI_MaxMeasPeriod: ::std::os::raw::c_ushort = 12437;
pub const DAQmx_CO_OutputType: ::std::os::raw::c_ushort = 6325;
pub const DAQmx_CO_Pulse_IdleState: ::std::os::raw::c_ushort = 4464;
pub const DAQmx_CO_Pulse_Term: ::std::os::raw::c_ushort = 6369;
pub const DAQmx_CO_Pulse_Time_Units: ::std::os::raw::c_ushort = 6358;
pub const DAQmx_CO_Pulse_HighTime: ::std::os::raw::c_ushort = 6330;
pub const DAQmx_CO_Pulse_LowTime: ::std::os::raw::c_ushort = 6331;
pub const DAQmx_CO_Pulse_Time_InitialDelay: ::std::os::raw::c_ushort = 6332;
pub const DAQmx_CO_Pulse_DutyCyc: ::std::os::raw::c_ushort = 4470;
pub const DAQmx_CO_Pulse_Freq_Units: ::std::os::raw::c_ushort = 6357;
pub const DAQmx_CO_Pulse_Freq: ::std::os::raw::c_ushort = 4472;
pub const DAQmx_CO_Pulse_Freq_InitialDelay: ::std::os::raw::c_ushort = 665;
pub const DAQmx_CO_Pulse_HighTicks: ::std::os::raw::c_ushort = 4457;
pub const DAQmx_CO_Pulse_LowTicks: ::std::os::raw::c_ushort = 4465;
pub const DAQmx_CO_Pulse_Ticks_InitialDelay: ::std::os::raw::c_ushort = 664;
pub const DAQmx_CO_CtrTimebaseSrc: ::std::os::raw::c_ushort = 825;
pub const DAQmx_CO_CtrTimebaseRate: ::std::os::raw::c_ushort = 6338;
pub const DAQmx_CO_CtrTimebaseActiveEdge: ::std::os::raw::c_ushort = 833;
pub const DAQmx_CO_CtrTimebase_DigFltr_Enable: ::std::os::raw::c_ushort =
    8822;
pub const DAQmx_CO_CtrTimebase_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort
          =
    8823;
pub const DAQmx_CO_CtrTimebase_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort =
    8824;
pub const DAQmx_CO_CtrTimebase_DigFltr_TimebaseRate: ::std::os::raw::c_ushort
          =
    8825;
pub const DAQmx_CO_CtrTimebase_DigSync_Enable: ::std::os::raw::c_ushort =
    8826;
pub const DAQmx_CO_Count: ::std::os::raw::c_ushort = 659;
pub const DAQmx_CO_OutputState: ::std::os::raw::c_ushort = 660;
pub const DAQmx_CO_AutoIncrCnt: ::std::os::raw::c_ushort = 661;
pub const DAQmx_CO_CtrTimebaseMasterTimebaseDiv: ::std::os::raw::c_ushort =
    6339;
pub const DAQmx_CO_PulseDone: ::std::os::raw::c_ushort = 6414;
pub const DAQmx_CO_EnableInitialDelayOnRetrigger: ::std::os::raw::c_ushort =
    11977;
pub const DAQmx_CO_ConstrainedGenMode: ::std::os::raw::c_ushort = 10738;
pub const DAQmx_CO_UseOnlyOnBrdMem: ::std::os::raw::c_ushort = 11979;
pub const DAQmx_CO_DataXferMech: ::std::os::raw::c_ushort = 11980;
pub const DAQmx_CO_DataXferReqCond: ::std::os::raw::c_ushort = 11981;
pub const DAQmx_CO_UsbXferReqSize: ::std::os::raw::c_ushort = 10899;
pub const DAQmx_CO_UsbXferReqCount: ::std::os::raw::c_ushort = 12293;
pub const DAQmx_CO_MemMapEnable: ::std::os::raw::c_ushort = 11987;
pub const DAQmx_CO_Prescaler: ::std::os::raw::c_ushort = 8813;
pub const DAQmx_CO_RdyForNewVal: ::std::os::raw::c_ushort = 8959;
pub const DAQmx_ChanType: ::std::os::raw::c_ushort = 6271;
pub const DAQmx_PhysicalChanName: ::std::os::raw::c_ushort = 6389;
pub const DAQmx_ChanDescr: ::std::os::raw::c_ushort = 6438;
pub const DAQmx_ChanIsGlobal: ::std::os::raw::c_ushort = 8964;
pub const DAQmx_Dev_IsSimulated: ::std::os::raw::c_ushort = 8906;
pub const DAQmx_Dev_ProductCategory: ::std::os::raw::c_ushort = 10665;
pub const DAQmx_Dev_ProductType: ::std::os::raw::c_ushort = 1585;
pub const DAQmx_Dev_ProductNum: ::std::os::raw::c_ushort = 8989;
pub const DAQmx_Dev_SerialNum: ::std::os::raw::c_ushort = 1586;
pub const DAQmx_Dev_Accessory_ProductTypes: ::std::os::raw::c_ushort = 12141;
pub const DAQmx_Dev_Accessory_ProductNums: ::std::os::raw::c_ushort = 12142;
pub const DAQmx_Dev_Accessory_SerialNums: ::std::os::raw::c_ushort = 12143;
pub const DAQmx_Carrier_SerialNum: ::std::os::raw::c_ushort = 10890;
pub const DAQmx_Dev_Chassis_ModuleDevNames: ::std::os::raw::c_ushort = 10678;
pub const DAQmx_Dev_AnlgTrigSupported: ::std::os::raw::c_ushort = 10628;
pub const DAQmx_Dev_DigTrigSupported: ::std::os::raw::c_ushort = 10629;
pub const DAQmx_Dev_AI_PhysicalChans: ::std::os::raw::c_ushort = 8990;
pub const DAQmx_Dev_AI_SupportedMeasTypes: ::std::os::raw::c_ushort = 12242;
pub const DAQmx_Dev_AI_MaxSingleChanRate: ::std::os::raw::c_ushort = 10636;
pub const DAQmx_Dev_AI_MaxMultiChanRate: ::std::os::raw::c_ushort = 10637;
pub const DAQmx_Dev_AI_MinRate: ::std::os::raw::c_ushort = 10638;
pub const DAQmx_Dev_AI_SimultaneousSamplingSupported: ::std::os::raw::c_ushort
          =
    10639;
pub const DAQmx_Dev_AI_SampModes: ::std::os::raw::c_ushort = 12252;
pub const DAQmx_Dev_AI_TrigUsage: ::std::os::raw::c_ushort = 10630;
pub const DAQmx_Dev_AI_VoltageRngs: ::std::os::raw::c_ushort = 10640;
pub const DAQmx_Dev_AI_VoltageIntExcitDiscreteVals: ::std::os::raw::c_ushort =
    10697;
pub const DAQmx_Dev_AI_VoltageIntExcitRangeVals: ::std::os::raw::c_ushort =
    10698;
pub const DAQmx_Dev_AI_ChargeRngs: ::std::os::raw::c_ushort = 12561;
pub const DAQmx_Dev_AI_CurrentRngs: ::std::os::raw::c_ushort = 10641;
pub const DAQmx_Dev_AI_CurrentIntExcitDiscreteVals: ::std::os::raw::c_ushort =
    10699;
pub const DAQmx_Dev_AI_BridgeRngs: ::std::os::raw::c_ushort = 12240;
pub const DAQmx_Dev_AI_ResistanceRngs: ::std::os::raw::c_ushort = 10773;
pub const DAQmx_Dev_AI_FreqRngs: ::std::os::raw::c_ushort = 10642;
pub const DAQmx_Dev_AI_Gains: ::std::os::raw::c_ushort = 10643;
pub const DAQmx_Dev_AI_Couplings: ::std::os::raw::c_ushort = 10644;
pub const DAQmx_Dev_AI_LowpassCutoffFreqDiscreteVals: ::std::os::raw::c_ushort
          =
    10645;
pub const DAQmx_Dev_AI_LowpassCutoffFreqRangeVals: ::std::os::raw::c_ushort =
    10703;
pub const DAQmx_AI_DigFltr_Types: ::std::os::raw::c_ushort = 12551;
pub const DAQmx_Dev_AI_DigFltr_LowpassCutoffFreqDiscreteVals:
          ::std::os::raw::c_ushort =
    12488;
pub const DAQmx_Dev_AI_DigFltr_LowpassCutoffFreqRangeVals:
          ::std::os::raw::c_ushort =
    12489;
pub const DAQmx_Dev_AO_PhysicalChans: ::std::os::raw::c_ushort = 8991;
pub const DAQmx_Dev_AO_SupportedOutputTypes: ::std::os::raw::c_ushort = 12243;
pub const DAQmx_Dev_AO_SampClkSupported: ::std::os::raw::c_ushort = 10646;
pub const DAQmx_Dev_AO_SampModes: ::std::os::raw::c_ushort = 12253;
pub const DAQmx_Dev_AO_MaxRate: ::std::os::raw::c_ushort = 10647;
pub const DAQmx_Dev_AO_MinRate: ::std::os::raw::c_ushort = 10648;
pub const DAQmx_Dev_AO_TrigUsage: ::std::os::raw::c_ushort = 10631;
pub const DAQmx_Dev_AO_VoltageRngs: ::std::os::raw::c_ushort = 10651;
pub const DAQmx_Dev_AO_CurrentRngs: ::std::os::raw::c_ushort = 10652;
pub const DAQmx_Dev_AO_Gains: ::std::os::raw::c_ushort = 10653;
pub const DAQmx_Dev_DI_Lines: ::std::os::raw::c_ushort = 8992;
pub const DAQmx_Dev_DI_Ports: ::std::os::raw::c_ushort = 8993;
pub const DAQmx_Dev_DI_MaxRate: ::std::os::raw::c_ushort = 10649;
pub const DAQmx_Dev_DI_TrigUsage: ::std::os::raw::c_ushort = 10632;
pub const DAQmx_Dev_DO_Lines: ::std::os::raw::c_ushort = 8994;
pub const DAQmx_Dev_DO_Ports: ::std::os::raw::c_ushort = 8995;
pub const DAQmx_Dev_DO_MaxRate: ::std::os::raw::c_ushort = 10650;
pub const DAQmx_Dev_DO_TrigUsage: ::std::os::raw::c_ushort = 10633;
pub const DAQmx_Dev_CI_PhysicalChans: ::std::os::raw::c_ushort = 8996;
pub const DAQmx_Dev_CI_SupportedMeasTypes: ::std::os::raw::c_ushort = 12244;
pub const DAQmx_Dev_CI_TrigUsage: ::std::os::raw::c_ushort = 10634;
pub const DAQmx_Dev_CI_SampClkSupported: ::std::os::raw::c_ushort = 10654;
pub const DAQmx_Dev_CI_SampModes: ::std::os::raw::c_ushort = 12254;
pub const DAQmx_Dev_CI_MaxSize: ::std::os::raw::c_ushort = 10655;
pub const DAQmx_Dev_CI_MaxTimebase: ::std::os::raw::c_ushort = 10656;
pub const DAQmx_Dev_CO_PhysicalChans: ::std::os::raw::c_ushort = 8997;
pub const DAQmx_Dev_CO_SupportedOutputTypes: ::std::os::raw::c_ushort = 12245;
pub const DAQmx_Dev_CO_SampClkSupported: ::std::os::raw::c_ushort = 12123;
pub const DAQmx_Dev_CO_SampModes: ::std::os::raw::c_ushort = 12255;
pub const DAQmx_Dev_CO_TrigUsage: ::std::os::raw::c_ushort = 10635;
pub const DAQmx_Dev_CO_MaxSize: ::std::os::raw::c_ushort = 10657;
pub const DAQmx_Dev_CO_MaxTimebase: ::std::os::raw::c_ushort = 10658;
pub const DAQmx_Dev_TEDS_HWTEDSSupported: ::std::os::raw::c_ushort = 12246;
pub const DAQmx_Dev_NumDMAChans: ::std::os::raw::c_ushort = 9020;
pub const DAQmx_Dev_BusType: ::std::os::raw::c_ushort = 8998;
pub const DAQmx_Dev_PCI_BusNum: ::std::os::raw::c_ushort = 8999;
pub const DAQmx_Dev_PCI_DevNum: ::std::os::raw::c_ushort = 9000;
pub const DAQmx_Dev_PXI_ChassisNum: ::std::os::raw::c_ushort = 9001;
pub const DAQmx_Dev_PXI_SlotNum: ::std::os::raw::c_ushort = 9002;
pub const DAQmx_Dev_CompactDAQ_ChassisDevName: ::std::os::raw::c_ushort =
    10679;
pub const DAQmx_Dev_CompactDAQ_SlotNum: ::std::os::raw::c_ushort = 10680;
pub const DAQmx_Dev_TCPIP_Hostname: ::std::os::raw::c_ushort = 10891;
pub const DAQmx_Dev_TCPIP_EthernetIP: ::std::os::raw::c_ushort = 10892;
pub const DAQmx_Dev_TCPIP_WirelessIP: ::std::os::raw::c_ushort = 10893;
pub const DAQmx_Dev_Terminals: ::std::os::raw::c_ushort = 10816;
pub const DAQmx_Exported_AIConvClk_OutputTerm: ::std::os::raw::c_ushort =
    5767;
pub const DAQmx_Exported_AIConvClk_Pulse_Polarity: ::std::os::raw::c_ushort =
    5768;
pub const DAQmx_Exported_10MHzRefClk_OutputTerm: ::std::os::raw::c_ushort =
    8814;
pub const DAQmx_Exported_20MHzTimebase_OutputTerm: ::std::os::raw::c_ushort =
    5719;
pub const DAQmx_Exported_SampClk_OutputBehavior: ::std::os::raw::c_ushort =
    6251;
pub const DAQmx_Exported_SampClk_OutputTerm: ::std::os::raw::c_ushort = 5731;
pub const DAQmx_Exported_SampClk_DelayOffset: ::std::os::raw::c_ushort = 8644;
pub const DAQmx_Exported_SampClk_Pulse_Polarity: ::std::os::raw::c_ushort =
    5732;
pub const DAQmx_Exported_SampClkTimebase_OutputTerm: ::std::os::raw::c_ushort
          =
    6393;
pub const DAQmx_Exported_DividedSampClkTimebase_OutputTerm:
          ::std::os::raw::c_ushort =
    8609;
pub const DAQmx_Exported_AdvTrig_OutputTerm: ::std::os::raw::c_ushort = 5701;
pub const DAQmx_Exported_AdvTrig_Pulse_Polarity: ::std::os::raw::c_ushort =
    5702;
pub const DAQmx_Exported_AdvTrig_Pulse_WidthUnits: ::std::os::raw::c_ushort =
    5703;
pub const DAQmx_Exported_AdvTrig_Pulse_Width: ::std::os::raw::c_ushort = 5704;
pub const DAQmx_Exported_PauseTrig_OutputTerm: ::std::os::raw::c_ushort =
    5653;
pub const DAQmx_Exported_PauseTrig_Lvl_ActiveLvl: ::std::os::raw::c_ushort =
    5654;
pub const DAQmx_Exported_RefTrig_OutputTerm: ::std::os::raw::c_ushort = 1424;
pub const DAQmx_Exported_RefTrig_Pulse_Polarity: ::std::os::raw::c_ushort =
    1425;
pub const DAQmx_Exported_StartTrig_OutputTerm: ::std::os::raw::c_ushort =
    1412;
pub const DAQmx_Exported_StartTrig_Pulse_Polarity: ::std::os::raw::c_ushort =
    1413;
pub const DAQmx_Exported_AdvCmpltEvent_OutputTerm: ::std::os::raw::c_ushort =
    5713;
pub const DAQmx_Exported_AdvCmpltEvent_Delay: ::std::os::raw::c_ushort = 5975;
pub const DAQmx_Exported_AdvCmpltEvent_Pulse_Polarity:
          ::std::os::raw::c_ushort =
    5714;
pub const DAQmx_Exported_AdvCmpltEvent_Pulse_Width: ::std::os::raw::c_ushort =
    5716;
pub const DAQmx_Exported_AIHoldCmpltEvent_OutputTerm: ::std::os::raw::c_ushort
          =
    6381;
pub const DAQmx_Exported_AIHoldCmpltEvent_PulsePolarity:
          ::std::os::raw::c_ushort =
    6382;
pub const DAQmx_Exported_ChangeDetectEvent_OutputTerm:
          ::std::os::raw::c_ushort =
    8599;
pub const DAQmx_Exported_ChangeDetectEvent_Pulse_Polarity:
          ::std::os::raw::c_ushort =
    8963;
pub const DAQmx_Exported_CtrOutEvent_OutputTerm: ::std::os::raw::c_ushort =
    5911;
pub const DAQmx_Exported_CtrOutEvent_OutputBehavior: ::std::os::raw::c_ushort
          =
    5967;
pub const DAQmx_Exported_CtrOutEvent_Pulse_Polarity: ::std::os::raw::c_ushort
          =
    5912;
pub const DAQmx_Exported_CtrOutEvent_Toggle_IdleState:
          ::std::os::raw::c_ushort =
    6250;
pub const DAQmx_Exported_HshkEvent_OutputTerm: ::std::os::raw::c_ushort =
    8890;
pub const DAQmx_Exported_HshkEvent_OutputBehavior: ::std::os::raw::c_ushort =
    8891;
pub const DAQmx_Exported_HshkEvent_Delay: ::std::os::raw::c_ushort = 8892;
pub const DAQmx_Exported_HshkEvent_Interlocked_AssertedLvl:
          ::std::os::raw::c_ushort =
    8893;
pub const DAQmx_Exported_HshkEvent_Interlocked_AssertOnStart:
          ::std::os::raw::c_ushort =
    8894;
pub const DAQmx_Exported_HshkEvent_Interlocked_DeassertDelay:
          ::std::os::raw::c_ushort =
    8895;
pub const DAQmx_Exported_HshkEvent_Pulse_Polarity: ::std::os::raw::c_ushort =
    8896;
pub const DAQmx_Exported_HshkEvent_Pulse_Width: ::std::os::raw::c_ushort =
    8897;
pub const DAQmx_Exported_RdyForXferEvent_OutputTerm: ::std::os::raw::c_ushort
          =
    8885;
pub const DAQmx_Exported_RdyForXferEvent_Lvl_ActiveLvl:
          ::std::os::raw::c_ushort =
    8886;
pub const DAQmx_Exported_RdyForXferEvent_DeassertCond:
          ::std::os::raw::c_ushort =
    10595;
pub const DAQmx_Exported_RdyForXferEvent_DeassertCondCustomThreshold:
          ::std::os::raw::c_ushort =
    10596;
pub const DAQmx_Exported_DataActiveEvent_OutputTerm: ::std::os::raw::c_ushort
          =
    5683;
pub const DAQmx_Exported_DataActiveEvent_Lvl_ActiveLvl:
          ::std::os::raw::c_ushort =
    5684;
pub const DAQmx_Exported_RdyForStartEvent_OutputTerm: ::std::os::raw::c_ushort
          =
    5641;
pub const DAQmx_Exported_RdyForStartEvent_Lvl_ActiveLvl:
          ::std::os::raw::c_ushort =
    5969;
pub const DAQmx_Exported_SyncPulseEvent_OutputTerm: ::std::os::raw::c_ushort =
    8764;
pub const DAQmx_Exported_WatchdogExpiredEvent_OutputTerm:
          ::std::os::raw::c_ushort =
    8618;
pub const DAQmx_PersistedChan_Author: ::std::os::raw::c_ushort = 8912;
pub const DAQmx_PersistedChan_AllowInteractiveEditing:
          ::std::os::raw::c_ushort =
    8913;
pub const DAQmx_PersistedChan_AllowInteractiveDeletion:
          ::std::os::raw::c_ushort =
    8914;
pub const DAQmx_PersistedScale_Author: ::std::os::raw::c_ushort = 8916;
pub const DAQmx_PersistedScale_AllowInteractiveEditing:
          ::std::os::raw::c_ushort =
    8917;
pub const DAQmx_PersistedScale_AllowInteractiveDeletion:
          ::std::os::raw::c_ushort =
    8918;
pub const DAQmx_PersistedTask_Author: ::std::os::raw::c_ushort = 8908;
pub const DAQmx_PersistedTask_AllowInteractiveEditing:
          ::std::os::raw::c_ushort =
    8909;
pub const DAQmx_PersistedTask_AllowInteractiveDeletion:
          ::std::os::raw::c_ushort =
    8910;
pub const DAQmx_PhysicalChan_AI_SupportedMeasTypes: ::std::os::raw::c_ushort =
    12247;
pub const DAQmx_PhysicalChan_AI_TermCfgs: ::std::os::raw::c_ushort = 9026;
pub const DAQmx_PhysicalChan_AI_InputSrcs: ::std::os::raw::c_ushort = 12248;
pub const DAQmx_PhysicalChan_AO_SupportedOutputTypes: ::std::os::raw::c_ushort
          =
    12249;
pub const DAQmx_PhysicalChan_AO_SupportedPowerUpOutputTypes:
          ::std::os::raw::c_ushort =
    12366;
pub const DAQmx_PhysicalChan_AO_TermCfgs: ::std::os::raw::c_ushort = 10659;
pub const DAQmx_PhysicalChan_AO_ManualControlEnable: ::std::os::raw::c_ushort
          =
    10782;
pub const DAQmx_PhysicalChan_AO_ManualControl_ShortDetected:
          ::std::os::raw::c_ushort =
    11971;
pub const DAQmx_PhysicalChan_AO_ManualControlAmplitude:
          ::std::os::raw::c_ushort =
    10783;
pub const DAQmx_PhysicalChan_AO_ManualControlFreq: ::std::os::raw::c_ushort =
    10784;
pub const DAQmx_AO_PowerAmp_ChannelEnable: ::std::os::raw::c_ushort = 12386;
pub const DAQmx_AO_PowerAmp_ScalingCoeff: ::std::os::raw::c_ushort = 12387;
pub const DAQmx_AO_PowerAmp_Overcurrent: ::std::os::raw::c_ushort = 12388;
pub const DAQmx_AO_PowerAmp_Gain: ::std::os::raw::c_ushort = 12389;
pub const DAQmx_AO_PowerAmp_Offset: ::std::os::raw::c_ushort = 12390;
pub const DAQmx_PhysicalChan_DI_PortWidth: ::std::os::raw::c_ushort = 10660;
pub const DAQmx_PhysicalChan_DI_SampClkSupported: ::std::os::raw::c_ushort =
    10661;
pub const DAQmx_PhysicalChan_DI_SampModes: ::std::os::raw::c_ushort = 12256;
pub const DAQmx_PhysicalChan_DI_ChangeDetectSupported:
          ::std::os::raw::c_ushort =
    10662;
pub const DAQmx_PhysicalChan_DO_PortWidth: ::std::os::raw::c_ushort = 10663;
pub const DAQmx_PhysicalChan_DO_SampClkSupported: ::std::os::raw::c_ushort =
    10664;
pub const DAQmx_PhysicalChan_DO_SampModes: ::std::os::raw::c_ushort = 12257;
pub const DAQmx_PhysicalChan_CI_SupportedMeasTypes: ::std::os::raw::c_ushort =
    12250;
pub const DAQmx_PhysicalChan_CO_SupportedOutputTypes: ::std::os::raw::c_ushort
          =
    12251;
pub const DAQmx_PhysicalChan_TEDS_MfgID: ::std::os::raw::c_ushort = 8666;
pub const DAQmx_PhysicalChan_TEDS_ModelNum: ::std::os::raw::c_ushort = 8667;
pub const DAQmx_PhysicalChan_TEDS_SerialNum: ::std::os::raw::c_ushort = 8668;
pub const DAQmx_PhysicalChan_TEDS_VersionNum: ::std::os::raw::c_ushort = 8669;
pub const DAQmx_PhysicalChan_TEDS_VersionLetter: ::std::os::raw::c_ushort =
    8670;
pub const DAQmx_PhysicalChan_TEDS_BitStream: ::std::os::raw::c_ushort = 8671;
pub const DAQmx_PhysicalChan_TEDS_TemplateIDs: ::std::os::raw::c_ushort =
    8847;
pub const DAQmx_Read_RelativeTo: ::std::os::raw::c_ushort = 6410;
pub const DAQmx_Read_Offset: ::std::os::raw::c_ushort = 6411;
pub const DAQmx_Read_ChannelsToRead: ::std::os::raw::c_ushort = 6179;
pub const DAQmx_Read_ReadAllAvailSamp: ::std::os::raw::c_ushort = 4629;
pub const DAQmx_Read_AutoStart: ::std::os::raw::c_ushort = 6182;
pub const DAQmx_Read_OverWrite: ::std::os::raw::c_ushort = 4625;
pub const DAQmx_Logging_FilePath: ::std::os::raw::c_ushort = 11972;
pub const DAQmx_Logging_Mode: ::std::os::raw::c_ushort = 11973;
pub const DAQmx_Logging_TDMS_GroupName: ::std::os::raw::c_ushort = 11974;
pub const DAQmx_Logging_TDMS_Operation: ::std::os::raw::c_ushort = 11975;
pub const DAQmx_Logging_Pause: ::std::os::raw::c_ushort = 12259;
pub const DAQmx_Logging_SampsPerFile: ::std::os::raw::c_ushort = 12260;
pub const DAQmx_Logging_FileWriteSize: ::std::os::raw::c_ushort = 12227;
pub const DAQmx_Logging_FilePreallocationSize: ::std::os::raw::c_ushort =
    12230;
pub const DAQmx_Read_CurrReadPos: ::std::os::raw::c_ushort = 4641;
pub const DAQmx_Read_AvailSampPerChan: ::std::os::raw::c_ushort = 4643;
pub const DAQmx_Read_TotalSampPerChanAcquired: ::std::os::raw::c_ushort =
    6442;
pub const DAQmx_Read_CommonModeRangeErrorChansExist: ::std::os::raw::c_ushort
          =
    10904;
pub const DAQmx_Read_CommonModeRangeErrorChans: ::std::os::raw::c_ushort =
    10905;
pub const DAQmx_Read_ExcitFaultChansExist: ::std::os::raw::c_ushort = 12424;
pub const DAQmx_Read_ExcitFaultChans: ::std::os::raw::c_ushort = 12425;
pub const DAQmx_Read_OvercurrentChansExist: ::std::os::raw::c_ushort = 10726;
pub const DAQmx_Read_OvercurrentChans: ::std::os::raw::c_ushort = 10727;
pub const DAQmx_Read_OvertemperatureChansExist: ::std::os::raw::c_ushort =
    12417;
pub const DAQmx_Read_OvertemperatureChans: ::std::os::raw::c_ushort = 12418;
pub const DAQmx_Read_OpenChansExist: ::std::os::raw::c_ushort = 12544;
pub const DAQmx_Read_OpenChans: ::std::os::raw::c_ushort = 12545;
pub const DAQmx_Read_OpenChansDetails: ::std::os::raw::c_ushort = 12546;
pub const DAQmx_Read_OpenCurrentLoopChansExist: ::std::os::raw::c_ushort =
    10761;
pub const DAQmx_Read_OpenCurrentLoopChans: ::std::os::raw::c_ushort = 10762;
pub const DAQmx_Read_OpenThrmcplChansExist: ::std::os::raw::c_ushort = 10902;
pub const DAQmx_Read_OpenThrmcplChans: ::std::os::raw::c_ushort = 10903;
pub const DAQmx_Read_OverloadedChansExist: ::std::os::raw::c_ushort = 8564;
pub const DAQmx_Read_OverloadedChans: ::std::os::raw::c_ushort = 8565;
pub const DAQmx_Read_AccessoryInsertionOrRemovalDetected:
          ::std::os::raw::c_ushort =
    12144;
pub const DAQmx_Read_DevsWithInsertedOrRemovedAccessories:
          ::std::os::raw::c_ushort =
    12145;
pub const DAQmx_Read_ChangeDetect_HasOverflowed: ::std::os::raw::c_ushort =
    8596;
pub const DAQmx_Read_RawDataWidth: ::std::os::raw::c_ushort = 8570;
pub const DAQmx_Read_NumChans: ::std::os::raw::c_ushort = 8571;
pub const DAQmx_Read_DigitalLines_BytesPerChan: ::std::os::raw::c_ushort =
    8572;
pub const DAQmx_Read_WaitMode: ::std::os::raw::c_ushort = 8754;
pub const DAQmx_Read_SleepTime: ::std::os::raw::c_ushort = 8880;
pub const DAQmx_RealTime_ConvLateErrorsToWarnings: ::std::os::raw::c_ushort =
    8942;
pub const DAQmx_RealTime_NumOfWarmupIters: ::std::os::raw::c_ushort = 8941;
pub const DAQmx_RealTime_WaitForNextSampClkWaitMode: ::std::os::raw::c_ushort
          =
    8943;
pub const DAQmx_RealTime_ReportMissedSamp: ::std::os::raw::c_ushort = 8985;
pub const DAQmx_RealTime_WriteRecoveryMode: ::std::os::raw::c_ushort = 8986;
pub const DAQmx_Scale_Descr: ::std::os::raw::c_ushort = 4646;
pub const DAQmx_Scale_ScaledUnits: ::std::os::raw::c_ushort = 6427;
pub const DAQmx_Scale_PreScaledUnits: ::std::os::raw::c_ushort = 6391;
pub const DAQmx_Scale_Type: ::std::os::raw::c_ushort = 6441;
pub const DAQmx_Scale_Lin_Slope: ::std::os::raw::c_ushort = 4647;
pub const DAQmx_Scale_Lin_YIntercept: ::std::os::raw::c_ushort = 4648;
pub const DAQmx_Scale_Map_ScaledMax: ::std::os::raw::c_ushort = 4649;
pub const DAQmx_Scale_Map_PreScaledMax: ::std::os::raw::c_ushort = 4657;
pub const DAQmx_Scale_Map_ScaledMin: ::std::os::raw::c_ushort = 4656;
pub const DAQmx_Scale_Map_PreScaledMin: ::std::os::raw::c_ushort = 4658;
pub const DAQmx_Scale_Poly_ForwardCoeff: ::std::os::raw::c_ushort = 4660;
pub const DAQmx_Scale_Poly_ReverseCoeff: ::std::os::raw::c_ushort = 4661;
pub const DAQmx_Scale_Table_ScaledVals: ::std::os::raw::c_ushort = 4662;
pub const DAQmx_Scale_Table_PreScaledVals: ::std::os::raw::c_ushort = 4663;
pub const DAQmx_SwitchChan_Usage: ::std::os::raw::c_ushort = 6372;
pub const DAQmx_SwitchChan_AnlgBusSharingEnable: ::std::os::raw::c_ushort =
    12190;
pub const DAQmx_SwitchChan_MaxACCarryCurrent: ::std::os::raw::c_ushort = 1608;
pub const DAQmx_SwitchChan_MaxACSwitchCurrent: ::std::os::raw::c_ushort =
    1606;
pub const DAQmx_SwitchChan_MaxACCarryPwr: ::std::os::raw::c_ushort = 1602;
pub const DAQmx_SwitchChan_MaxACSwitchPwr: ::std::os::raw::c_ushort = 1604;
pub const DAQmx_SwitchChan_MaxDCCarryCurrent: ::std::os::raw::c_ushort = 1607;
pub const DAQmx_SwitchChan_MaxDCSwitchCurrent: ::std::os::raw::c_ushort =
    1605;
pub const DAQmx_SwitchChan_MaxDCCarryPwr: ::std::os::raw::c_ushort = 1603;
pub const DAQmx_SwitchChan_MaxDCSwitchPwr: ::std::os::raw::c_ushort = 1609;
pub const DAQmx_SwitchChan_MaxACVoltage: ::std::os::raw::c_ushort = 1617;
pub const DAQmx_SwitchChan_MaxDCVoltage: ::std::os::raw::c_ushort = 1616;
pub const DAQmx_SwitchChan_WireMode: ::std::os::raw::c_ushort = 6373;
pub const DAQmx_SwitchChan_Bandwidth: ::std::os::raw::c_ushort = 1600;
pub const DAQmx_SwitchChan_Impedance: ::std::os::raw::c_ushort = 1601;
pub const DAQmx_SwitchDev_SettlingTime: ::std::os::raw::c_ushort = 4676;
pub const DAQmx_SwitchDev_AutoConnAnlgBus: ::std::os::raw::c_ushort = 6106;
pub const DAQmx_SwitchDev_PwrDownLatchRelaysAfterSettling:
          ::std::os::raw::c_ushort =
    8923;
pub const DAQmx_SwitchDev_Settled: ::std::os::raw::c_ushort = 4675;
pub const DAQmx_SwitchDev_RelayList: ::std::os::raw::c_ushort = 6108;
pub const DAQmx_SwitchDev_NumRelays: ::std::os::raw::c_ushort = 6374;
pub const DAQmx_SwitchDev_SwitchChanList: ::std::os::raw::c_ushort = 6375;
pub const DAQmx_SwitchDev_NumSwitchChans: ::std::os::raw::c_ushort = 6376;
pub const DAQmx_SwitchDev_NumRows: ::std::os::raw::c_ushort = 6377;
pub const DAQmx_SwitchDev_NumColumns: ::std::os::raw::c_ushort = 6378;
pub const DAQmx_SwitchDev_Topology: ::std::os::raw::c_ushort = 6461;
pub const DAQmx_SwitchDev_Temperature: ::std::os::raw::c_ushort = 12314;
pub const DAQmx_SwitchScan_BreakMode: ::std::os::raw::c_ushort = 4679;
pub const DAQmx_SwitchScan_RepeatMode: ::std::os::raw::c_ushort = 4680;
pub const DAQmx_SwitchScan_WaitingForAdv: ::std::os::raw::c_ushort = 6105;
pub const DAQmx_Sys_GlobalChans: ::std::os::raw::c_ushort = 4709;
pub const DAQmx_Sys_Scales: ::std::os::raw::c_ushort = 4710;
pub const DAQmx_Sys_Tasks: ::std::os::raw::c_ushort = 4711;
pub const DAQmx_Sys_DevNames: ::std::os::raw::c_ushort = 6459;
pub const DAQmx_Sys_NIDAQMajorVersion: ::std::os::raw::c_ushort = 4722;
pub const DAQmx_Sys_NIDAQMinorVersion: ::std::os::raw::c_ushort = 6435;
pub const DAQmx_Sys_NIDAQUpdateVersion: ::std::os::raw::c_ushort = 12066;
pub const DAQmx_Task_Name: ::std::os::raw::c_ushort = 4726;
pub const DAQmx_Task_Channels: ::std::os::raw::c_ushort = 4723;
pub const DAQmx_Task_NumChans: ::std::os::raw::c_ushort = 8577;
pub const DAQmx_Task_Devices: ::std::os::raw::c_ushort = 8974;
pub const DAQmx_Task_NumDevices: ::std::os::raw::c_ushort = 10682;
pub const DAQmx_Task_Complete: ::std::os::raw::c_ushort = 4724;
pub const DAQmx_SampQuant_SampMode: ::std::os::raw::c_ushort = 4864;
pub const DAQmx_SampQuant_SampPerChan: ::std::os::raw::c_ushort = 4880;
pub const DAQmx_SampTimingType: ::std::os::raw::c_ushort = 4935;
pub const DAQmx_SampClk_Rate: ::std::os::raw::c_ushort = 4932;
pub const DAQmx_SampClk_MaxRate: ::std::os::raw::c_ushort = 8904;
pub const DAQmx_SampClk_Src: ::std::os::raw::c_ushort = 6226;
pub const DAQmx_SampClk_ActiveEdge: ::std::os::raw::c_ushort = 4865;
pub const DAQmx_SampClk_OverrunBehavior: ::std::os::raw::c_ushort = 12028;
pub const DAQmx_SampClk_UnderflowBehavior: ::std::os::raw::c_ushort = 10593;
pub const DAQmx_SampClk_TimebaseDiv: ::std::os::raw::c_ushort = 6379;
pub const DAQmx_SampClk_Term: ::std::os::raw::c_ushort = 12059;
pub const DAQmx_SampClk_Timebase_Rate: ::std::os::raw::c_ushort = 4867;
pub const DAQmx_SampClk_Timebase_Src: ::std::os::raw::c_ushort = 4872;
pub const DAQmx_SampClk_Timebase_ActiveEdge: ::std::os::raw::c_ushort = 6380;
pub const DAQmx_SampClk_Timebase_MasterTimebaseDiv: ::std::os::raw::c_ushort =
    4869;
pub const DAQmx_SampClkTimebase_Term: ::std::os::raw::c_ushort = 12060;
pub const DAQmx_SampClk_DigFltr_Enable: ::std::os::raw::c_ushort = 8734;
pub const DAQmx_SampClk_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort =
    8735;
pub const DAQmx_SampClk_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort = 8736;
pub const DAQmx_SampClk_DigFltr_TimebaseRate: ::std::os::raw::c_ushort = 8737;
pub const DAQmx_SampClk_DigSync_Enable: ::std::os::raw::c_ushort = 8738;
pub const DAQmx_SampClk_WriteWfm_UseInitialWfmDT: ::std::os::raw::c_ushort =
    12540;
pub const DAQmx_Hshk_DelayAfterXfer: ::std::os::raw::c_ushort = 8898;
pub const DAQmx_Hshk_StartCond: ::std::os::raw::c_ushort = 8899;
pub const DAQmx_Hshk_SampleInputDataWhen: ::std::os::raw::c_ushort = 8900;
pub const DAQmx_ChangeDetect_DI_RisingEdgePhysicalChans:
          ::std::os::raw::c_ushort =
    8597;
pub const DAQmx_ChangeDetect_DI_FallingEdgePhysicalChans:
          ::std::os::raw::c_ushort =
    8598;
pub const DAQmx_ChangeDetect_DI_Tristate: ::std::os::raw::c_ushort = 12026;
pub const DAQmx_OnDemand_SimultaneousAOEnable: ::std::os::raw::c_ushort =
    8608;
pub const DAQmx_Implicit_UnderflowBehavior: ::std::os::raw::c_ushort = 12029;
pub const DAQmx_AIConv_Rate: ::std::os::raw::c_ushort = 6216;
pub const DAQmx_AIConv_MaxRate: ::std::os::raw::c_ushort = 8905;
pub const DAQmx_AIConv_Src: ::std::os::raw::c_ushort = 5378;
pub const DAQmx_AIConv_ActiveEdge: ::std::os::raw::c_ushort = 6227;
pub const DAQmx_AIConv_TimebaseDiv: ::std::os::raw::c_ushort = 4917;
pub const DAQmx_AIConv_Timebase_Src: ::std::os::raw::c_ushort = 4921;
pub const DAQmx_DelayFromSampClk_DelayUnits: ::std::os::raw::c_ushort = 4868;
pub const DAQmx_DelayFromSampClk_Delay: ::std::os::raw::c_ushort = 4887;
pub const DAQmx_AIConv_DigFltr_Enable: ::std::os::raw::c_ushort = 11996;
pub const DAQmx_AIConv_DigFltr_MinPulseWidth: ::std::os::raw::c_ushort =
    11997;
pub const DAQmx_AIConv_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort = 11998;
pub const DAQmx_AIConv_DigFltr_TimebaseRate: ::std::os::raw::c_ushort = 11999;
pub const DAQmx_AIConv_DigSync_Enable: ::std::os::raw::c_ushort = 12000;
pub const DAQmx_MasterTimebase_Rate: ::std::os::raw::c_ushort = 5269;
pub const DAQmx_MasterTimebase_Src: ::std::os::raw::c_ushort = 4931;
pub const DAQmx_RefClk_Rate: ::std::os::raw::c_ushort = 4885;
pub const DAQmx_RefClk_Src: ::std::os::raw::c_ushort = 4886;
pub const DAQmx_SyncPulse_Src: ::std::os::raw::c_ushort = 8765;
pub const DAQmx_SyncPulse_SyncTime: ::std::os::raw::c_ushort = 8766;
pub const DAQmx_SyncPulse_MinDelayToStart: ::std::os::raw::c_ushort = 8767;
pub const DAQmx_SyncPulse_ResetTime: ::std::os::raw::c_ushort = 12156;
pub const DAQmx_SyncPulse_ResetDelay: ::std::os::raw::c_ushort = 12157;
pub const DAQmx_SyncPulse_Term: ::std::os::raw::c_ushort = 12165;
pub const DAQmx_SyncClk_Interval: ::std::os::raw::c_ushort = 12158;
pub const DAQmx_SampTimingEngine: ::std::os::raw::c_ushort = 10790;
pub const DAQmx_StartTrig_Type: ::std::os::raw::c_ushort = 5011;
pub const DAQmx_StartTrig_Term: ::std::os::raw::c_ushort = 12062;
pub const DAQmx_DigEdge_StartTrig_Src: ::std::os::raw::c_ushort = 5127;
pub const DAQmx_DigEdge_StartTrig_Edge: ::std::os::raw::c_ushort = 5124;
pub const DAQmx_DigEdge_StartTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    8739;
pub const DAQmx_DigEdge_StartTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8740;
pub const DAQmx_DigEdge_StartTrig_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    8741;
pub const DAQmx_DigEdge_StartTrig_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8742;
pub const DAQmx_DigEdge_StartTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    8743;
pub const DAQmx_DigPattern_StartTrig_Src: ::std::os::raw::c_ushort = 5136;
pub const DAQmx_DigPattern_StartTrig_Pattern: ::std::os::raw::c_ushort = 8582;
pub const DAQmx_DigPattern_StartTrig_When: ::std::os::raw::c_ushort = 5137;
pub const DAQmx_AnlgEdge_StartTrig_Src: ::std::os::raw::c_ushort = 5016;
pub const DAQmx_AnlgEdge_StartTrig_Slope: ::std::os::raw::c_ushort = 5015;
pub const DAQmx_AnlgEdge_StartTrig_Lvl: ::std::os::raw::c_ushort = 5014;
pub const DAQmx_AnlgEdge_StartTrig_Hyst: ::std::os::raw::c_ushort = 5013;
pub const DAQmx_AnlgEdge_StartTrig_Coupling: ::std::os::raw::c_ushort = 8755;
pub const DAQmx_AnlgEdge_StartTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    12001;
pub const DAQmx_AnlgEdge_StartTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12002;
pub const DAQmx_AnlgEdge_StartTrig_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    12003;
pub const DAQmx_AnlgEdge_StartTrig_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    12004;
pub const DAQmx_AnlgEdge_StartTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    12005;
pub const DAQmx_AnlgWin_StartTrig_Src: ::std::os::raw::c_ushort = 5120;
pub const DAQmx_AnlgWin_StartTrig_When: ::std::os::raw::c_ushort = 5121;
pub const DAQmx_AnlgWin_StartTrig_Top: ::std::os::raw::c_ushort = 5123;
pub const DAQmx_AnlgWin_StartTrig_Btm: ::std::os::raw::c_ushort = 5122;
pub const DAQmx_AnlgWin_StartTrig_Coupling: ::std::os::raw::c_ushort = 8756;
pub const DAQmx_AnlgWin_StartTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    12031;
pub const DAQmx_AnlgWin_StartTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12032;
pub const DAQmx_AnlgWin_StartTrig_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    12033;
pub const DAQmx_AnlgWin_StartTrig_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    12034;
pub const DAQmx_AnlgWin_StartTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    12035;
pub const DAQmx_StartTrig_Delay: ::std::os::raw::c_ushort = 6230;
pub const DAQmx_StartTrig_DelayUnits: ::std::os::raw::c_ushort = 6344;
pub const DAQmx_StartTrig_Retriggerable: ::std::os::raw::c_ushort = 6415;
pub const DAQmx_RefTrig_Type: ::std::os::raw::c_ushort = 5145;
pub const DAQmx_RefTrig_PretrigSamples: ::std::os::raw::c_ushort = 5189;
pub const DAQmx_RefTrig_Term: ::std::os::raw::c_ushort = 12063;
pub const DAQmx_DigEdge_RefTrig_Src: ::std::os::raw::c_ushort = 5172;
pub const DAQmx_DigEdge_RefTrig_Edge: ::std::os::raw::c_ushort = 5168;
pub const DAQmx_DigEdge_RefTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    11991;
pub const DAQmx_DigEdge_RefTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    11992;
pub const DAQmx_DigEdge_RefTrig_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort
          =
    11993;
pub const DAQmx_DigEdge_RefTrig_DigFltr_TimebaseRate: ::std::os::raw::c_ushort
          =
    11994;
pub const DAQmx_DigEdge_RefTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    11995;
pub const DAQmx_DigPattern_RefTrig_Src: ::std::os::raw::c_ushort = 5175;
pub const DAQmx_DigPattern_RefTrig_Pattern: ::std::os::raw::c_ushort = 8583;
pub const DAQmx_DigPattern_RefTrig_When: ::std::os::raw::c_ushort = 5176;
pub const DAQmx_AnlgEdge_RefTrig_Src: ::std::os::raw::c_ushort = 5156;
pub const DAQmx_AnlgEdge_RefTrig_Slope: ::std::os::raw::c_ushort = 5155;
pub const DAQmx_AnlgEdge_RefTrig_Lvl: ::std::os::raw::c_ushort = 5154;
pub const DAQmx_AnlgEdge_RefTrig_Hyst: ::std::os::raw::c_ushort = 5153;
pub const DAQmx_AnlgEdge_RefTrig_Coupling: ::std::os::raw::c_ushort = 8757;
pub const DAQmx_AnlgEdge_RefTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    12006;
pub const DAQmx_AnlgEdge_RefTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12007;
pub const DAQmx_AnlgEdge_RefTrig_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort
          =
    12008;
pub const DAQmx_AnlgEdge_RefTrig_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    12009;
pub const DAQmx_AnlgEdge_RefTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    12010;
pub const DAQmx_AnlgWin_RefTrig_Src: ::std::os::raw::c_ushort = 5158;
pub const DAQmx_AnlgWin_RefTrig_When: ::std::os::raw::c_ushort = 5159;
pub const DAQmx_AnlgWin_RefTrig_Top: ::std::os::raw::c_ushort = 5161;
pub const DAQmx_AnlgWin_RefTrig_Btm: ::std::os::raw::c_ushort = 5160;
pub const DAQmx_AnlgWin_RefTrig_Coupling: ::std::os::raw::c_ushort = 6231;
pub const DAQmx_AnlgWin_RefTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    12011;
pub const DAQmx_AnlgWin_RefTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12012;
pub const DAQmx_AnlgWin_RefTrig_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort
          =
    12013;
pub const DAQmx_AnlgWin_RefTrig_DigFltr_TimebaseRate: ::std::os::raw::c_ushort
          =
    12014;
pub const DAQmx_AnlgWin_RefTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    12015;
pub const DAQmx_RefTrig_AutoTrigEnable: ::std::os::raw::c_ushort = 11969;
pub const DAQmx_RefTrig_AutoTriggered: ::std::os::raw::c_ushort = 11970;
pub const DAQmx_RefTrig_Delay: ::std::os::raw::c_ushort = 5251;
pub const DAQmx_AdvTrig_Type: ::std::os::raw::c_ushort = 4965;
pub const DAQmx_DigEdge_AdvTrig_Src: ::std::os::raw::c_ushort = 4962;
pub const DAQmx_DigEdge_AdvTrig_Edge: ::std::os::raw::c_ushort = 4960;
pub const DAQmx_DigEdge_AdvTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    8760;
pub const DAQmx_HshkTrig_Type: ::std::os::raw::c_ushort = 8887;
pub const DAQmx_Interlocked_HshkTrig_Src: ::std::os::raw::c_ushort = 8888;
pub const DAQmx_Interlocked_HshkTrig_AssertedLvl: ::std::os::raw::c_ushort =
    8889;
pub const DAQmx_PauseTrig_Type: ::std::os::raw::c_ushort = 4966;
pub const DAQmx_PauseTrig_Term: ::std::os::raw::c_ushort = 12064;
pub const DAQmx_AnlgLvl_PauseTrig_Src: ::std::os::raw::c_ushort = 4976;
pub const DAQmx_AnlgLvl_PauseTrig_When: ::std::os::raw::c_ushort = 4977;
pub const DAQmx_AnlgLvl_PauseTrig_Lvl: ::std::os::raw::c_ushort = 4969;
pub const DAQmx_AnlgLvl_PauseTrig_Hyst: ::std::os::raw::c_ushort = 4968;
pub const DAQmx_AnlgLvl_PauseTrig_Coupling: ::std::os::raw::c_ushort = 8758;
pub const DAQmx_AnlgLvl_PauseTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    12016;
pub const DAQmx_AnlgLvl_PauseTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12017;
pub const DAQmx_AnlgLvl_PauseTrig_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    12018;
pub const DAQmx_AnlgLvl_PauseTrig_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    12019;
pub const DAQmx_AnlgLvl_PauseTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    12020;
pub const DAQmx_AnlgWin_PauseTrig_Src: ::std::os::raw::c_ushort = 4979;
pub const DAQmx_AnlgWin_PauseTrig_When: ::std::os::raw::c_ushort = 4980;
pub const DAQmx_AnlgWin_PauseTrig_Top: ::std::os::raw::c_ushort = 4982;
pub const DAQmx_AnlgWin_PauseTrig_Btm: ::std::os::raw::c_ushort = 4981;
pub const DAQmx_AnlgWin_PauseTrig_Coupling: ::std::os::raw::c_ushort = 8759;
pub const DAQmx_AnlgWin_PauseTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    12021;
pub const DAQmx_AnlgWin_PauseTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    12022;
pub const DAQmx_AnlgWin_PauseTrig_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    12023;
pub const DAQmx_AnlgWin_PauseTrig_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    12024;
pub const DAQmx_AnlgWin_PauseTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    12025;
pub const DAQmx_DigLvl_PauseTrig_Src: ::std::os::raw::c_ushort = 4985;
pub const DAQmx_DigLvl_PauseTrig_When: ::std::os::raw::c_ushort = 4992;
pub const DAQmx_DigLvl_PauseTrig_DigFltr_Enable: ::std::os::raw::c_ushort =
    8744;
pub const DAQmx_DigLvl_PauseTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8745;
pub const DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseSrc: ::std::os::raw::c_ushort
          =
    8746;
pub const DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8747;
pub const DAQmx_DigLvl_PauseTrig_DigSync_Enable: ::std::os::raw::c_ushort =
    8748;
pub const DAQmx_DigPattern_PauseTrig_Src: ::std::os::raw::c_ushort = 8559;
pub const DAQmx_DigPattern_PauseTrig_Pattern: ::std::os::raw::c_ushort = 8584;
pub const DAQmx_DigPattern_PauseTrig_When: ::std::os::raw::c_ushort = 8560;
pub const DAQmx_ArmStartTrig_Type: ::std::os::raw::c_ushort = 5140;
pub const DAQmx_ArmStart_Term: ::std::os::raw::c_ushort = 12159;
pub const DAQmx_DigEdge_ArmStartTrig_Src: ::std::os::raw::c_ushort = 5143;
pub const DAQmx_DigEdge_ArmStartTrig_Edge: ::std::os::raw::c_ushort = 5141;
pub const DAQmx_DigEdge_ArmStartTrig_DigFltr_Enable: ::std::os::raw::c_ushort
          =
    8749;
pub const DAQmx_DigEdge_ArmStartTrig_DigFltr_MinPulseWidth:
          ::std::os::raw::c_ushort =
    8750;
pub const DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseSrc:
          ::std::os::raw::c_ushort =
    8751;
pub const DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseRate:
          ::std::os::raw::c_ushort =
    8752;
pub const DAQmx_DigEdge_ArmStartTrig_DigSync_Enable: ::std::os::raw::c_ushort
          =
    8753;
pub const DAQmx_Trigger_SyncType: ::std::os::raw::c_ushort = 12160;
pub const DAQmx_Watchdog_Timeout: ::std::os::raw::c_ushort = 8617;
pub const DAQmx_WatchdogExpirTrig_Type: ::std::os::raw::c_ushort = 8611;
pub const DAQmx_WatchdogExpirTrig_TrigOnNetworkConnLoss:
          ::std::os::raw::c_ushort =
    12381;
pub const DAQmx_DigEdge_WatchdogExpirTrig_Src: ::std::os::raw::c_ushort =
    8612;
pub const DAQmx_DigEdge_WatchdogExpirTrig_Edge: ::std::os::raw::c_ushort =
    8613;
pub const DAQmx_Watchdog_DO_ExpirState: ::std::os::raw::c_ushort = 8615;
pub const DAQmx_Watchdog_AO_OutputType: ::std::os::raw::c_ushort = 12382;
pub const DAQmx_Watchdog_AO_ExpirState: ::std::os::raw::c_ushort = 12383;
pub const DAQmx_Watchdog_CO_ExpirState: ::std::os::raw::c_ushort = 12384;
pub const DAQmx_Watchdog_HasExpired: ::std::os::raw::c_ushort = 8616;
pub const DAQmx_Write_RelativeTo: ::std::os::raw::c_ushort = 6412;
pub const DAQmx_Write_Offset: ::std::os::raw::c_ushort = 6413;
pub const DAQmx_Write_RegenMode: ::std::os::raw::c_ushort = 5203;
pub const DAQmx_Write_CurrWritePos: ::std::os::raw::c_ushort = 5208;
pub const DAQmx_Write_OvercurrentChansExist: ::std::os::raw::c_ushort = 10728;
pub const DAQmx_Write_OvercurrentChans: ::std::os::raw::c_ushort = 10729;
pub const DAQmx_Write_OvertemperatureChansExist: ::std::os::raw::c_ushort =
    10884;
pub const DAQmx_Write_OvertemperatureChans: ::std::os::raw::c_ushort = 12419;
pub const DAQmx_Write_ExternalOvervoltageChansExist: ::std::os::raw::c_ushort
          =
    12475;
pub const DAQmx_Write_ExternalOvervoltageChans: ::std::os::raw::c_ushort =
    12476;
pub const DAQmx_Write_OverloadedChansExist: ::std::os::raw::c_ushort = 12420;
pub const DAQmx_Write_OverloadedChans: ::std::os::raw::c_ushort = 12421;
pub const DAQmx_Write_OpenCurrentLoopChansExist: ::std::os::raw::c_ushort =
    10730;
pub const DAQmx_Write_OpenCurrentLoopChans: ::std::os::raw::c_ushort = 10731;
pub const DAQmx_Write_PowerSupplyFaultChansExist: ::std::os::raw::c_ushort =
    10732;
pub const DAQmx_Write_PowerSupplyFaultChans: ::std::os::raw::c_ushort = 10733;
pub const DAQmx_Write_SpaceAvail: ::std::os::raw::c_ushort = 5216;
pub const DAQmx_Write_TotalSampPerChanGenerated: ::std::os::raw::c_ushort =
    6443;
pub const DAQmx_Write_AccessoryInsertionOrRemovalDetected:
          ::std::os::raw::c_ushort =
    12371;
pub const DAQmx_Write_DevsWithInsertedOrRemovedAccessories:
          ::std::os::raw::c_ushort =
    12372;
pub const DAQmx_Write_RawDataWidth: ::std::os::raw::c_ushort = 8573;
pub const DAQmx_Write_NumChans: ::std::os::raw::c_ushort = 8574;
pub const DAQmx_Write_WaitMode: ::std::os::raw::c_ushort = 8881;
pub const DAQmx_Write_SleepTime: ::std::os::raw::c_ushort = 8882;
pub const DAQmx_Write_DigitalLines_BytesPerChan: ::std::os::raw::c_ushort =
    8575;
pub const DAQmx_ReadWaitMode: ::std::os::raw::c_ushort = 8754;
pub const DAQmx_Val_Task_Start: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Val_Task_Stop: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_Task_Verify: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_Task_Commit: ::std::os::raw::c_uchar = 3;
pub const DAQmx_Val_Task_Reserve: ::std::os::raw::c_uchar = 4;
pub const DAQmx_Val_Task_Unreserve: ::std::os::raw::c_uchar = 5;
pub const DAQmx_Val_Task_Abort: ::std::os::raw::c_uchar = 6;
pub const DAQmx_Val_SynchronousEventCallbacks: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_Acquired_Into_Buffer: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_Transferred_From_Buffer: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_ResetTimer: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Val_ClearExpiration: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_ChanPerLine: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Val_ChanForAllLines: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_GroupByChannel: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Val_GroupByScanNumber: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_DoNotInvertPolarity: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Val_InvertPolarity: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_Action_Commit: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Val_Action_Cancel: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_AdvanceTrigger: ::std::os::raw::c_ushort = 12488;
pub const DAQmx_Val_Rising: ::std::os::raw::c_ushort = 10280;
pub const DAQmx_Val_Falling: ::std::os::raw::c_ushort = 10171;
pub const DAQmx_Val_PathStatus_Available: ::std::os::raw::c_ushort = 10431;
pub const DAQmx_Val_PathStatus_AlreadyExists: ::std::os::raw::c_ushort =
    10432;
pub const DAQmx_Val_PathStatus_Unsupported: ::std::os::raw::c_ushort = 10433;
pub const DAQmx_Val_PathStatus_ChannelInUse: ::std::os::raw::c_ushort = 10434;
pub const DAQmx_Val_PathStatus_SourceChannelConflict: ::std::os::raw::c_ushort
          =
    10435;
pub const DAQmx_Val_PathStatus_ChannelReservedForRouting:
          ::std::os::raw::c_ushort =
    10436;
pub const DAQmx_Val_DegC: ::std::os::raw::c_ushort = 10143;
pub const DAQmx_Val_DegF: ::std::os::raw::c_ushort = 10144;
pub const DAQmx_Val_Kelvins: ::std::os::raw::c_ushort = 10325;
pub const DAQmx_Val_DegR: ::std::os::raw::c_ushort = 10145;
pub const DAQmx_Val_High: ::std::os::raw::c_ushort = 10192;
pub const DAQmx_Val_Low: ::std::os::raw::c_ushort = 10214;
pub const DAQmx_Val_Tristate: ::std::os::raw::c_ushort = 10310;
pub const DAQmx_Val_PullUp: ::std::os::raw::c_ushort = 15950;
pub const DAQmx_Val_PullDown: ::std::os::raw::c_ushort = 15951;
pub const DAQmx_Val_ChannelVoltage: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Val_ChannelCurrent: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_ChannelHighImpedance: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_Open: ::std::os::raw::c_ushort = 10437;
pub const DAQmx_Val_Closed: ::std::os::raw::c_ushort = 10438;
pub const DAQmx_Val_Loopback0: ::std::os::raw::c_uchar = 0;
pub const DAQmx_Val_Loopback180: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_Ground: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_Voltage: ::std::os::raw::c_ushort = 10322;
pub const DAQmx_Val_Bridge: ::std::os::raw::c_ushort = 15908;
pub const DAQmx_Val_Current: ::std::os::raw::c_ushort = 10134;
pub const DAQmx_Val_Diff: ::std::os::raw::c_ushort = 10106;
pub const DAQmx_Val_PseudoDiff: ::std::os::raw::c_ushort = 12529;
pub const DAQmx_Val_Charge: ::std::os::raw::c_ushort = 16105;
pub const DAQmx_Val_A: ::std::os::raw::c_ushort = 12513;
pub const DAQmx_Val_B: ::std::os::raw::c_ushort = 12514;
pub const DAQmx_Val_Newtons: ::std::os::raw::c_ushort = 15875;
pub const DAQmx_Val_Pounds: ::std::os::raw::c_ushort = 15876;
pub const DAQmx_Val_FromCustomScale: ::std::os::raw::c_ushort = 10065;
pub const DAQmx_Val_Cfg_Default: ::std::os::raw::c_char = -1;
pub const DAQmx_Val_Default: ::std::os::raw::c_char = -1;
pub const DAQmx_Val_Auto: ::std::os::raw::c_char = -1;
pub const DAQmx_Val_Save_Overwrite: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_Save_AllowInteractiveEditing: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_Save_AllowInteractiveDeletion: ::std::os::raw::c_uchar =
    4;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Advance: ::std::os::raw::c_uchar =
    1;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Pause: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Reference: ::std::os::raw::c_uchar =
    4;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Start: ::std::os::raw::c_uchar = 8;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Handshake: ::std::os::raw::c_uchar =
    16;
pub const DAQmx_Val_Bit_TriggerUsageTypes_ArmStart: ::std::os::raw::c_uchar =
    32;
pub const DAQmx_Val_Bit_CouplingTypes_AC: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_Bit_CouplingTypes_DC: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_Bit_CouplingTypes_Ground: ::std::os::raw::c_uchar = 4;
pub const DAQmx_Val_Bit_CouplingTypes_HFReject: ::std::os::raw::c_uchar = 8;
pub const DAQmx_Val_Bit_CouplingTypes_LFReject: ::std::os::raw::c_uchar = 16;
pub const DAQmx_Val_Bit_CouplingTypes_NoiseReject: ::std::os::raw::c_uchar =
    32;
pub const DAQmx_Val_Bit_TermCfg_RSE: ::std::os::raw::c_uchar = 1;
pub const DAQmx_Val_Bit_TermCfg_NRSE: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_Bit_TermCfg_Diff: ::std::os::raw::c_uchar = 4;
pub const DAQmx_Val_Bit_TermCfg_PseudoDIFF: ::std::os::raw::c_uchar = 8;
pub const DAQmx_Val_4Wire: ::std::os::raw::c_uchar = 4;
pub const DAQmx_Val_5Wire: ::std::os::raw::c_uchar = 5;
pub const DAQmx_Val_6Wire: ::std::os::raw::c_uchar = 6;
pub const DAQmx_Val_Automatic: ::std::os::raw::c_ushort = 16097;
pub const DAQmx_Val_HighResolution: ::std::os::raw::c_ushort = 10195;
pub const DAQmx_Val_HighSpeed: ::std::os::raw::c_ushort = 14712;
pub const DAQmx_Val_Best50HzRejection: ::std::os::raw::c_ushort = 14713;
pub const DAQmx_Val_Best60HzRejection: ::std::os::raw::c_ushort = 14714;
pub const DAQmx_Val_Custom: ::std::os::raw::c_ushort = 10137;
pub const DAQmx_Val_VoltageRMS: ::std::os::raw::c_ushort = 10350;
pub const DAQmx_Val_CurrentRMS: ::std::os::raw::c_ushort = 10351;
pub const DAQmx_Val_Voltage_CustomWithExcitation: ::std::os::raw::c_ushort =
    10323;
pub const DAQmx_Val_Freq_Voltage: ::std::os::raw::c_ushort = 10181;
pub const DAQmx_Val_Resistance: ::std::os::raw::c_ushort = 10278;
pub const DAQmx_Val_Temp_TC: ::std::os::raw::c_ushort = 10303;
pub const DAQmx_Val_Temp_Thrmstr: ::std::os::raw::c_ushort = 10302;
pub const DAQmx_Val_Temp_RTD: ::std::os::raw::c_ushort = 10301;
pub const DAQmx_Val_Temp_BuiltInSensor: ::std::os::raw::c_ushort = 10311;
pub const DAQmx_Val_Strain_Gage: ::std::os::raw::c_ushort = 10300;
pub const DAQmx_Val_Rosette_Strain_Gage: ::std::os::raw::c_ushort = 15980;
pub const DAQmx_Val_Position_LVDT: ::std::os::raw::c_ushort = 10352;
pub const DAQmx_Val_Position_RVDT: ::std::os::raw::c_ushort = 10353;
pub const DAQmx_Val_Position_EddyCurrentProximityProbe:
          ::std::os::raw::c_ushort =
    14835;
pub const DAQmx_Val_Accelerometer: ::std::os::raw::c_ushort = 10356;
pub const DAQmx_Val_Acceleration_Charge: ::std::os::raw::c_ushort = 16104;
pub const DAQmx_Val_Acceleration_4WireDCVoltage: ::std::os::raw::c_ushort =
    16106;
pub const DAQmx_Val_Velocity_IEPESensor: ::std::os::raw::c_ushort = 15966;
pub const DAQmx_Val_Force_Bridge: ::std::os::raw::c_ushort = 15899;
pub const DAQmx_Val_Force_IEPESensor: ::std::os::raw::c_ushort = 15895;
pub const DAQmx_Val_Pressure_Bridge: ::std::os::raw::c_ushort = 15902;
pub const DAQmx_Val_SoundPressure_Microphone: ::std::os::raw::c_ushort =
    10354;
pub const DAQmx_Val_Torque_Bridge: ::std::os::raw::c_ushort = 15905;
pub const DAQmx_Val_TEDS_Sensor: ::std::os::raw::c_ushort = 12531;
pub const DAQmx_Val_ZeroVolts: ::std::os::raw::c_ushort = 12526;
pub const DAQmx_Val_HighImpedance: ::std::os::raw::c_ushort = 12527;
pub const DAQmx_Val_MaintainExistingValue: ::std::os::raw::c_ushort = 12528;
pub const DAQmx_Val_FuncGen: ::std::os::raw::c_ushort = 14750;
pub const DAQmx_Val_PicoCoulombsPerG: ::std::os::raw::c_ushort = 16099;
pub const DAQmx_Val_PicoCoulombsPerMetersPerSecondSquared:
          ::std::os::raw::c_ushort =
    16100;
pub const DAQmx_Val_PicoCoulombsPerInchesPerSecondSquared:
          ::std::os::raw::c_ushort =
    16101;
pub const DAQmx_Val_mVoltsPerG: ::std::os::raw::c_ushort = 12509;
pub const DAQmx_Val_VoltsPerG: ::std::os::raw::c_ushort = 12510;
pub const DAQmx_Val_AccelUnit_g: ::std::os::raw::c_ushort = 10186;
pub const DAQmx_Val_MetersPerSecondSquared: ::std::os::raw::c_ushort = 12470;
pub const DAQmx_Val_InchesPerSecondSquared: ::std::os::raw::c_ushort = 12471;
pub const DAQmx_Val_FiniteSamps: ::std::os::raw::c_ushort = 10178;
pub const DAQmx_Val_ContSamps: ::std::os::raw::c_ushort = 10123;
pub const DAQmx_Val_HWTimedSinglePoint: ::std::os::raw::c_ushort = 12522;
pub const DAQmx_Val_AboveLvl: ::std::os::raw::c_ushort = 10093;
pub const DAQmx_Val_BelowLvl: ::std::os::raw::c_ushort = 10107;
pub const DAQmx_Val_Degrees: ::std::os::raw::c_ushort = 10146;
pub const DAQmx_Val_Radians: ::std::os::raw::c_ushort = 10273;
pub const DAQmx_Val_Ticks: ::std::os::raw::c_ushort = 10304;
pub const DAQmx_Val_RPM: ::std::os::raw::c_ushort = 16080;
pub const DAQmx_Val_RadiansPerSecond: ::std::os::raw::c_ushort = 16081;
pub const DAQmx_Val_DegreesPerSecond: ::std::os::raw::c_ushort = 16082;
pub const DAQmx_Val_None: ::std::os::raw::c_ushort = 10230;
pub const DAQmx_Val_Once: ::std::os::raw::c_ushort = 10244;
pub const DAQmx_Val_EverySample: ::std::os::raw::c_ushort = 10164;
pub const DAQmx_Val_NoAction: ::std::os::raw::c_ushort = 10227;
pub const DAQmx_Val_BreakBeforeMake: ::std::os::raw::c_ushort = 10110;
pub const DAQmx_Val_FullBridge: ::std::os::raw::c_ushort = 10182;
pub const DAQmx_Val_HalfBridge: ::std::os::raw::c_ushort = 10187;
pub const DAQmx_Val_QuarterBridge: ::std::os::raw::c_ushort = 10270;
pub const DAQmx_Val_NoBridge: ::std::os::raw::c_ushort = 10228;
pub const DAQmx_Val_VoltsPerVolt: ::std::os::raw::c_ushort = 15896;
pub const DAQmx_Val_mVoltsPerVolt: ::std::os::raw::c_ushort = 15897;
pub const DAQmx_Val_KilogramForce: ::std::os::raw::c_ushort = 15877;
pub const DAQmx_Val_Pascals: ::std::os::raw::c_ushort = 10081;
pub const DAQmx_Val_PoundsPerSquareInch: ::std::os::raw::c_ushort = 15879;
pub const DAQmx_Val_Bar: ::std::os::raw::c_ushort = 15880;
pub const DAQmx_Val_NewtonMeters: ::std::os::raw::c_ushort = 15881;
pub const DAQmx_Val_InchOunces: ::std::os::raw::c_ushort = 15882;
pub const DAQmx_Val_InchPounds: ::std::os::raw::c_ushort = 15883;
pub const DAQmx_Val_FootPounds: ::std::os::raw::c_ushort = 15884;
pub const DAQmx_Val_FromTEDS: ::std::os::raw::c_ushort = 12516;
pub const DAQmx_Val_PCI: ::std::os::raw::c_ushort = 12582;
pub const DAQmx_Val_PCIe: ::std::os::raw::c_ushort = 13612;
pub const DAQmx_Val_PXI: ::std::os::raw::c_ushort = 12583;
pub const DAQmx_Val_PXIe: ::std::os::raw::c_ushort = 14706;
pub const DAQmx_Val_SCXI: ::std::os::raw::c_ushort = 12584;
pub const DAQmx_Val_SCC: ::std::os::raw::c_ushort = 14707;
pub const DAQmx_Val_PCCard: ::std::os::raw::c_ushort = 12585;
pub const DAQmx_Val_USB: ::std::os::raw::c_ushort = 12586;
pub const DAQmx_Val_CompactDAQ: ::std::os::raw::c_ushort = 14637;
pub const DAQmx_Val_TCPIP: ::std::os::raw::c_ushort = 14828;
pub const DAQmx_Val_Unknown: ::std::os::raw::c_ushort = 12588;
pub const DAQmx_Val_SwitchBlock: ::std::os::raw::c_ushort = 15870;
pub const DAQmx_Val_CountEdges: ::std::os::raw::c_ushort = 10125;
pub const DAQmx_Val_Freq: ::std::os::raw::c_ushort = 10179;
pub const DAQmx_Val_Period: ::std::os::raw::c_ushort = 10256;
pub const DAQmx_Val_PulseWidth: ::std::os::raw::c_ushort = 10359;
pub const DAQmx_Val_SemiPeriod: ::std::os::raw::c_ushort = 10289;
pub const DAQmx_Val_PulseFrequency: ::std::os::raw::c_ushort = 15864;
pub const DAQmx_Val_PulseTime: ::std::os::raw::c_ushort = 15865;
pub const DAQmx_Val_PulseTicks: ::std::os::raw::c_ushort = 15866;
pub const DAQmx_Val_DutyCycle: ::std::os::raw::c_ushort = 16070;
pub const DAQmx_Val_Position_AngEncoder: ::std::os::raw::c_ushort = 10360;
pub const DAQmx_Val_Position_LinEncoder: ::std::os::raw::c_ushort = 10361;
pub const DAQmx_Val_Velocity_AngEncoder: ::std::os::raw::c_ushort = 16078;
pub const DAQmx_Val_Velocity_LinEncoder: ::std::os::raw::c_ushort = 16079;
pub const DAQmx_Val_TwoEdgeSep: ::std::os::raw::c_ushort = 10267;
pub const DAQmx_Val_GPS_Timestamp: ::std::os::raw::c_ushort = 10362;
pub const DAQmx_Val_BuiltIn: ::std::os::raw::c_ushort = 10200;
pub const DAQmx_Val_ConstVal: ::std::os::raw::c_ushort = 10116;
pub const DAQmx_Val_Chan: ::std::os::raw::c_ushort = 10113;
pub const DAQmx_Val_Pulse_Time: ::std::os::raw::c_ushort = 10269;
pub const DAQmx_Val_Pulse_Freq: ::std::os::raw::c_ushort = 10119;
pub const DAQmx_Val_Pulse_Ticks: ::std::os::raw::c_ushort = 10268;
pub const DAQmx_Val_AI: ::std::os::raw::c_ushort = 10100;
pub const DAQmx_Val_AO: ::std::os::raw::c_ushort = 10102;
pub const DAQmx_Val_DI: ::std::os::raw::c_ushort = 10151;
pub const DAQmx_Val_DO: ::std::os::raw::c_ushort = 10153;
pub const DAQmx_Val_CI: ::std::os::raw::c_ushort = 10131;
pub const DAQmx_Val_CO: ::std::os::raw::c_ushort = 10132;
pub const DAQmx_Val_Unconstrained: ::std::os::raw::c_ushort = 14708;
pub const DAQmx_Val_FixedHighFreq: ::std::os::raw::c_ushort = 14709;
pub const DAQmx_Val_FixedLowFreq: ::std::os::raw::c_ushort = 14710;
pub const DAQmx_Val_Fixed50PercentDutyCycle: ::std::os::raw::c_ushort = 14711;
pub const DAQmx_Val_CountUp: ::std::os::raw::c_ushort = 10128;
pub const DAQmx_Val_CountDown: ::std::os::raw::c_ushort = 10124;
pub const DAQmx_Val_ExtControlled: ::std::os::raw::c_ushort = 10326;
pub const DAQmx_Val_LowFreq1Ctr: ::std::os::raw::c_ushort = 10105;
pub const DAQmx_Val_HighFreq2Ctr: ::std::os::raw::c_ushort = 10157;
pub const DAQmx_Val_LargeRng2Ctr: ::std::os::raw::c_ushort = 10205;
pub const DAQmx_Val_DynAvg: ::std::os::raw::c_ushort = 16065;
pub const DAQmx_Val_AC: ::std::os::raw::c_ushort = 10045;
pub const DAQmx_Val_DC: ::std::os::raw::c_ushort = 10050;
pub const DAQmx_Val_GND: ::std::os::raw::c_ushort = 10066;
pub const DAQmx_Val_Internal: ::std::os::raw::c_ushort = 10200;
pub const DAQmx_Val_External: ::std::os::raw::c_ushort = 10167;
pub const DAQmx_Val_UserProvided: ::std::os::raw::c_ushort = 10167;
pub const DAQmx_Val_Coulombs: ::std::os::raw::c_ushort = 16102;
pub const DAQmx_Val_PicoCoulombs: ::std::os::raw::c_ushort = 16103;
pub const DAQmx_Val_Amps: ::std::os::raw::c_ushort = 10342;
pub const DAQmx_Val_RightJustified: ::std::os::raw::c_ushort = 10279;
pub const DAQmx_Val_LeftJustified: ::std::os::raw::c_ushort = 10209;
pub const DAQmx_Val_DMA: ::std::os::raw::c_ushort = 10054;
pub const DAQmx_Val_Interrupts: ::std::os::raw::c_ushort = 10204;
pub const DAQmx_Val_ProgrammedIO: ::std::os::raw::c_ushort = 10264;
pub const DAQmx_Val_USBbulk: ::std::os::raw::c_ushort = 12590;
pub const DAQmx_Val_OnbrdMemMoreThanHalfFull: ::std::os::raw::c_ushort =
    10237;
pub const DAQmx_Val_OnbrdMemFull: ::std::os::raw::c_ushort = 10236;
pub const DAQmx_Val_OnbrdMemCustomThreshold: ::std::os::raw::c_ushort = 12577;
pub const DAQmx_Val_ActiveDrive: ::std::os::raw::c_ushort = 12573;
pub const DAQmx_Val_OpenCollector: ::std::os::raw::c_ushort = 12574;
pub const DAQmx_Val_NoChange: ::std::os::raw::c_ushort = 10160;
pub const DAQmx_Val_PatternMatches: ::std::os::raw::c_ushort = 10254;
pub const DAQmx_Val_PatternDoesNotMatch: ::std::os::raw::c_ushort = 10253;
pub const DAQmx_Val_SampClkPeriods: ::std::os::raw::c_ushort = 10286;
pub const DAQmx_Val_Seconds: ::std::os::raw::c_ushort = 10364;
pub const DAQmx_Val_SampleClkPeriods: ::std::os::raw::c_ushort = 10286;
pub const DAQmx_Val_mVoltsPerMil: ::std::os::raw::c_ushort = 14836;
pub const DAQmx_Val_VoltsPerMil: ::std::os::raw::c_ushort = 14837;
pub const DAQmx_Val_mVoltsPerMillimeter: ::std::os::raw::c_ushort = 14838;
pub const DAQmx_Val_VoltsPerMillimeter: ::std::os::raw::c_ushort = 14839;
pub const DAQmx_Val_mVoltsPerMicron: ::std::os::raw::c_ushort = 14840;
pub const DAQmx_Val_X1: ::std::os::raw::c_ushort = 10090;
pub const DAQmx_Val_X2: ::std::os::raw::c_ushort = 10091;
pub const DAQmx_Val_X4: ::std::os::raw::c_ushort = 10092;
pub const DAQmx_Val_TwoPulseCounting: ::std::os::raw::c_ushort = 10313;
pub const DAQmx_Val_AHighBHigh: ::std::os::raw::c_ushort = 10040;
pub const DAQmx_Val_AHighBLow: ::std::os::raw::c_ushort = 10041;
pub const DAQmx_Val_ALowBHigh: ::std::os::raw::c_ushort = 10042;
pub const DAQmx_Val_ALowBLow: ::std::os::raw::c_ushort = 10043;
pub const DAQmx_Val_Pulse: ::std::os::raw::c_ushort = 10265;
pub const DAQmx_Val_Toggle: ::std::os::raw::c_ushort = 10307;
pub const DAQmx_Val_Lvl: ::std::os::raw::c_ushort = 10210;
pub const DAQmx_Val_Interlocked: ::std::os::raw::c_ushort = 12549;
pub const DAQmx_Val_Lowpass: ::std::os::raw::c_ushort = 16071;
pub const DAQmx_Val_Highpass: ::std::os::raw::c_ushort = 16072;
pub const DAQmx_Val_Bandpass: ::std::os::raw::c_ushort = 16073;
pub const DAQmx_Val_Notch: ::std::os::raw::c_ushort = 16074;
pub const DAQmx_Val_ConstantGroupDelay: ::std::os::raw::c_ushort = 16075;
pub const DAQmx_Val_Butterworth: ::std::os::raw::c_ushort = 16076;
pub const DAQmx_Val_Elliptical: ::std::os::raw::c_ushort = 16077;
pub const DAQmx_Val_HardwareDefined: ::std::os::raw::c_ushort = 10191;
pub const DAQmx_Val_mVoltsPerNewton: ::std::os::raw::c_ushort = 15891;
pub const DAQmx_Val_mVoltsPerPound: ::std::os::raw::c_ushort = 15892;
pub const DAQmx_Val_Hz: ::std::os::raw::c_ushort = 10373;
pub const DAQmx_Val_Sine: ::std::os::raw::c_ushort = 14751;
pub const DAQmx_Val_Triangle: ::std::os::raw::c_ushort = 14752;
pub const DAQmx_Val_Square: ::std::os::raw::c_ushort = 14753;
pub const DAQmx_Val_Sawtooth: ::std::os::raw::c_ushort = 14754;
pub const DAQmx_Val_IRIGB: ::std::os::raw::c_ushort = 10070;
pub const DAQmx_Val_PPS: ::std::os::raw::c_ushort = 10080;
pub const DAQmx_Val_Immediate: ::std::os::raw::c_ushort = 10198;
pub const DAQmx_Val_WaitForHandshakeTriggerAssert: ::std::os::raw::c_ushort =
    12550;
pub const DAQmx_Val_WaitForHandshakeTriggerDeassert: ::std::os::raw::c_ushort
          =
    12551;
pub const DAQmx_Val_OnBrdMemMoreThanHalfFull: ::std::os::raw::c_ushort =
    10237;
pub const DAQmx_Val_OnBrdMemNotEmpty: ::std::os::raw::c_ushort = 10241;
pub const DAQmx_Val_WhenAcqComplete: ::std::os::raw::c_ushort = 12546;
pub const DAQmx_Val_RSE: ::std::os::raw::c_ushort = 10083;
pub const DAQmx_Val_NRSE: ::std::os::raw::c_ushort = 10078;
pub const DAQmx_Val_mVoltsPerVoltPerMillimeter: ::std::os::raw::c_ushort =
    12506;
pub const DAQmx_Val_mVoltsPerVoltPerMilliInch: ::std::os::raw::c_ushort =
    12505;
pub const DAQmx_Val_Meters: ::std::os::raw::c_ushort = 10219;
pub const DAQmx_Val_Inches: ::std::os::raw::c_ushort = 10379;
pub const DAQmx_Val_Off: ::std::os::raw::c_ushort = 10231;
pub const DAQmx_Val_Log: ::std::os::raw::c_ushort = 15844;
pub const DAQmx_Val_LogAndRead: ::std::os::raw::c_ushort = 15842;
pub const DAQmx_Val_OpenOrCreate: ::std::os::raw::c_ushort = 15846;
pub const DAQmx_Val_CreateOrReplace: ::std::os::raw::c_ushort = 15847;
pub const DAQmx_Val_Create: ::std::os::raw::c_ushort = 15848;
pub const DAQmx_Val_2point5V: ::std::os::raw::c_ushort = 14620;
pub const DAQmx_Val_3point3V: ::std::os::raw::c_ushort = 14621;
pub const DAQmx_Val_5V: ::std::os::raw::c_ushort = 14619;
pub const DAQmx_Val_SameAsSampTimebase: ::std::os::raw::c_ushort = 10284;
pub const DAQmx_Val_SameAsMasterTimebase: ::std::os::raw::c_ushort = 10282;
pub const DAQmx_Val_100MHzTimebase: ::std::os::raw::c_ushort = 15857;
pub const DAQmx_Val_80MHzTimebase: ::std::os::raw::c_ushort = 14636;
pub const DAQmx_Val_20MHzTimebase: ::std::os::raw::c_ushort = 12537;
pub const DAQmx_Val_8MHzTimebase: ::std::os::raw::c_ushort = 16023;
pub const DAQmx_Val_AM: ::std::os::raw::c_ushort = 14756;
pub const DAQmx_Val_FM: ::std::os::raw::c_ushort = 14757;
pub const DAQmx_Val_OnBrdMemEmpty: ::std::os::raw::c_ushort = 10235;
pub const DAQmx_Val_OnBrdMemHalfFullOrLess: ::std::os::raw::c_ushort = 10239;
pub const DAQmx_Val_OnBrdMemNotFull: ::std::os::raw::c_ushort = 10242;
pub const DAQmx_Val_StopTaskAndError: ::std::os::raw::c_ushort = 15862;
pub const DAQmx_Val_IgnoreOverruns: ::std::os::raw::c_ushort = 15863;
pub const DAQmx_Val_OverwriteUnreadSamps: ::std::os::raw::c_ushort = 10252;
pub const DAQmx_Val_DoNotOverwriteUnreadSamps: ::std::os::raw::c_ushort =
    10159;
pub const DAQmx_Val_ActiveHigh: ::std::os::raw::c_ushort = 10095;
pub const DAQmx_Val_ActiveLow: ::std::os::raw::c_ushort = 10096;
pub const DAQmx_Val_MSeriesDAQ: ::std::os::raw::c_ushort = 14643;
pub const DAQmx_Val_XSeriesDAQ: ::std::os::raw::c_ushort = 15858;
pub const DAQmx_Val_ESeriesDAQ: ::std::os::raw::c_ushort = 14642;
pub const DAQmx_Val_SSeriesDAQ: ::std::os::raw::c_ushort = 14644;
pub const DAQmx_Val_BSeriesDAQ: ::std::os::raw::c_ushort = 14662;
pub const DAQmx_Val_SCSeriesDAQ: ::std::os::raw::c_ushort = 14645;
pub const DAQmx_Val_USBDAQ: ::std::os::raw::c_ushort = 14646;
pub const DAQmx_Val_AOSeries: ::std::os::raw::c_ushort = 14647;
pub const DAQmx_Val_DigitalIO: ::std::os::raw::c_ushort = 14648;
pub const DAQmx_Val_TIOSeries: ::std::os::raw::c_ushort = 14661;
pub const DAQmx_Val_DynamicSignalAcquisition: ::std::os::raw::c_ushort =
    14649;
pub const DAQmx_Val_Switches: ::std::os::raw::c_ushort = 14650;
pub const DAQmx_Val_CompactDAQChassis: ::std::os::raw::c_ushort = 14658;
pub const DAQmx_Val_CSeriesModule: ::std::os::raw::c_ushort = 14659;
pub const DAQmx_Val_SCXIModule: ::std::os::raw::c_ushort = 14660;
pub const DAQmx_Val_SCCConnectorBlock: ::std::os::raw::c_ushort = 14704;
pub const DAQmx_Val_SCCModule: ::std::os::raw::c_ushort = 14705;
pub const DAQmx_Val_NIELVIS: ::std::os::raw::c_ushort = 14755;
pub const DAQmx_Val_NetworkDAQ: ::std::os::raw::c_ushort = 14829;
pub const DAQmx_Val_SCExpress: ::std::os::raw::c_ushort = 15886;
pub const DAQmx_Val_Pt3750: ::std::os::raw::c_ushort = 12481;
pub const DAQmx_Val_Pt3851: ::std::os::raw::c_ushort = 10071;
pub const DAQmx_Val_Pt3911: ::std::os::raw::c_ushort = 12482;
pub const DAQmx_Val_Pt3916: ::std::os::raw::c_ushort = 10069;
pub const DAQmx_Val_Pt3920: ::std::os::raw::c_ushort = 10053;
pub const DAQmx_Val_Pt3928: ::std::os::raw::c_ushort = 12483;
pub const DAQmx_Val_mVoltsPerVoltPerDegree: ::std::os::raw::c_ushort = 12507;
pub const DAQmx_Val_mVoltsPerVoltPerRadian: ::std::os::raw::c_ushort = 12508;
pub const DAQmx_Val_LosslessPacking: ::std::os::raw::c_ushort = 12555;
pub const DAQmx_Val_LossyLSBRemoval: ::std::os::raw::c_ushort = 12556;
pub const DAQmx_Val_FirstSample: ::std::os::raw::c_ushort = 10424;
pub const DAQmx_Val_CurrReadPos: ::std::os::raw::c_ushort = 10425;
pub const DAQmx_Val_RefTrig: ::std::os::raw::c_ushort = 10426;
pub const DAQmx_Val_FirstPretrigSamp: ::std::os::raw::c_ushort = 10427;
pub const DAQmx_Val_MostRecentSamp: ::std::os::raw::c_ushort = 10428;
pub const DAQmx_Val_AllowRegen: ::std::os::raw::c_ushort = 10097;
pub const DAQmx_Val_DoNotAllowRegen: ::std::os::raw::c_ushort = 10158;
pub const DAQmx_Val_2Wire: ::std::os::raw::c_uchar = 2;
pub const DAQmx_Val_3Wire: ::std::os::raw::c_uchar = 3;
pub const DAQmx_Val_Ohms: ::std::os::raw::c_ushort = 10384;
pub const DAQmx_Val_Bits: ::std::os::raw::c_ushort = 10109;
pub const DAQmx_Val_SCXI1124Range0to1V: ::std::os::raw::c_ushort = 14629;
pub const DAQmx_Val_SCXI1124Range0to5V: ::std::os::raw::c_ushort = 14630;
pub const DAQmx_Val_SCXI1124Range0to10V: ::std::os::raw::c_ushort = 14631;
pub const DAQmx_Val_SCXI1124RangeNeg1to1V: ::std::os::raw::c_ushort = 14632;
pub const DAQmx_Val_SCXI1124RangeNeg5to5V: ::std::os::raw::c_ushort = 14633;
pub const DAQmx_Val_SCXI1124RangeNeg10to10V: ::std::os::raw::c_ushort = 14634;
pub const DAQmx_Val_SCXI1124Range0to20mA: ::std::os::raw::c_ushort = 14635;
pub const DAQmx_Val_SampClkActiveEdge: ::std::os::raw::c_ushort = 14617;
pub const DAQmx_Val_SampClkInactiveEdge: ::std::os::raw::c_ushort = 14618;
pub const DAQmx_Val_HandshakeTriggerAsserts: ::std::os::raw::c_ushort = 12552;
pub const DAQmx_Val_HandshakeTriggerDeasserts: ::std::os::raw::c_ushort =
    12553;
pub const DAQmx_Val_SampClk: ::std::os::raw::c_ushort = 10388;
pub const DAQmx_Val_BurstHandshake: ::std::os::raw::c_ushort = 12548;
pub const DAQmx_Val_Handshake: ::std::os::raw::c_ushort = 10389;
pub const DAQmx_Val_Implicit: ::std::os::raw::c_ushort = 10451;
pub const DAQmx_Val_OnDemand: ::std::os::raw::c_ushort = 10390;
pub const DAQmx_Val_ChangeDetection: ::std::os::raw::c_ushort = 12504;
pub const DAQmx_Val_PipelinedSampClk: ::std::os::raw::c_ushort = 14668;
pub const DAQmx_Val_Linear: ::std::os::raw::c_ushort = 10447;
pub const DAQmx_Val_MapRanges: ::std::os::raw::c_ushort = 10448;
pub const DAQmx_Val_Polynomial: ::std::os::raw::c_ushort = 10449;
pub const DAQmx_Val_Table: ::std::os::raw::c_ushort = 10450;
pub const DAQmx_Val_TwoPointLinear: ::std::os::raw::c_ushort = 15898;
pub const DAQmx_Val_AandB: ::std::os::raw::c_ushort = 12515;
pub const DAQmx_Val_R1: ::std::os::raw::c_ushort = 12465;
pub const DAQmx_Val_R2: ::std::os::raw::c_ushort = 12466;
pub const DAQmx_Val_R3: ::std::os::raw::c_ushort = 12467;
pub const DAQmx_Val_R4: ::std::os::raw::c_ushort = 14813;
pub const DAQmx_Val_AIConvertClock: ::std::os::raw::c_ushort = 12484;
pub const DAQmx_Val_10MHzRefClock: ::std::os::raw::c_ushort = 12536;
pub const DAQmx_Val_20MHzTimebaseClock: ::std::os::raw::c_ushort = 12486;
pub const DAQmx_Val_SampleClock: ::std::os::raw::c_ushort = 12487;
pub const DAQmx_Val_ReferenceTrigger: ::std::os::raw::c_ushort = 12490;
pub const DAQmx_Val_StartTrigger: ::std::os::raw::c_ushort = 12491;
pub const DAQmx_Val_AdvCmpltEvent: ::std::os::raw::c_ushort = 12492;
pub const DAQmx_Val_AIHoldCmpltEvent: ::std::os::raw::c_ushort = 12493;
pub const DAQmx_Val_CounterOutputEvent: ::std::os::raw::c_ushort = 12494;
pub const DAQmx_Val_ChangeDetectionEvent: ::std::os::raw::c_ushort = 12511;
pub const DAQmx_Val_WDTExpiredEvent: ::std::os::raw::c_ushort = 12512;
pub const DAQmx_Val_SampleCompleteEvent: ::std::os::raw::c_ushort = 12530;
pub const DAQmx_Val_RisingSlope: ::std::os::raw::c_ushort = 10280;
pub const DAQmx_Val_FallingSlope: ::std::os::raw::c_ushort = 10171;
pub const DAQmx_Val_FullBridgeI: ::std::os::raw::c_ushort = 10183;
pub const DAQmx_Val_FullBridgeII: ::std::os::raw::c_ushort = 10184;
pub const DAQmx_Val_FullBridgeIII: ::std::os::raw::c_ushort = 10185;
pub const DAQmx_Val_HalfBridgeI: ::std::os::raw::c_ushort = 10188;
pub const DAQmx_Val_HalfBridgeII: ::std::os::raw::c_ushort = 10189;
pub const DAQmx_Val_QuarterBridgeI: ::std::os::raw::c_ushort = 10271;
pub const DAQmx_Val_QuarterBridgeII: ::std::os::raw::c_ushort = 10272;
pub const DAQmx_Val_RectangularRosette: ::std::os::raw::c_ushort = 15968;
pub const DAQmx_Val_DeltaRosette: ::std::os::raw::c_ushort = 15969;
pub const DAQmx_Val_TeeRosette: ::std::os::raw::c_ushort = 15970;
pub const DAQmx_Val_PrincipalStrain1: ::std::os::raw::c_ushort = 15971;
pub const DAQmx_Val_PrincipalStrain2: ::std::os::raw::c_ushort = 15972;
pub const DAQmx_Val_PrincipalStrainAngle: ::std::os::raw::c_ushort = 15973;
pub const DAQmx_Val_CartesianStrainX: ::std::os::raw::c_ushort = 15974;
pub const DAQmx_Val_CartesianStrainY: ::std::os::raw::c_ushort = 15975;
pub const DAQmx_Val_CartesianShearStrainXY: ::std::os::raw::c_ushort = 15976;
pub const DAQmx_Val_MaxShearStrain: ::std::os::raw::c_ushort = 15977;
pub const DAQmx_Val_MaxShearStrainAngle: ::std::os::raw::c_ushort = 15978;
pub const DAQmx_Val_Strain: ::std::os::raw::c_ushort = 10299;
pub const DAQmx_Val_Finite: ::std::os::raw::c_ushort = 10172;
pub const DAQmx_Val_Cont: ::std::os::raw::c_ushort = 10117;
pub const DAQmx_Val_Source: ::std::os::raw::c_ushort = 10439;
pub const DAQmx_Val_Load: ::std::os::raw::c_ushort = 10440;
pub const DAQmx_Val_ReservedForRouting: ::std::os::raw::c_ushort = 10441;
pub const DAQmx_Val_Master: ::std::os::raw::c_ushort = 15888;
pub const DAQmx_Val_Slave: ::std::os::raw::c_ushort = 15889;
pub const DAQmx_Val_J_Type_TC: ::std::os::raw::c_ushort = 10072;
pub const DAQmx_Val_K_Type_TC: ::std::os::raw::c_ushort = 10073;
pub const DAQmx_Val_N_Type_TC: ::std::os::raw::c_ushort = 10077;
pub const DAQmx_Val_R_Type_TC: ::std::os::raw::c_ushort = 10082;
pub const DAQmx_Val_S_Type_TC: ::std::os::raw::c_ushort = 10085;
pub const DAQmx_Val_T_Type_TC: ::std::os::raw::c_ushort = 10086;
pub const DAQmx_Val_B_Type_TC: ::std::os::raw::c_ushort = 10047;
pub const DAQmx_Val_E_Type_TC: ::std::os::raw::c_ushort = 10055;
pub const DAQmx_Val_SingleCycle: ::std::os::raw::c_ushort = 14613;
pub const DAQmx_Val_Multicycle: ::std::os::raw::c_ushort = 14614;
pub const DAQmx_Val_DigEdge: ::std::os::raw::c_ushort = 10150;
pub const DAQmx_Val_Software: ::std::os::raw::c_ushort = 10292;
pub const DAQmx_Val_AnlgLvl: ::std::os::raw::c_ushort = 10101;
pub const DAQmx_Val_AnlgWin: ::std::os::raw::c_ushort = 10103;
pub const DAQmx_Val_DigLvl: ::std::os::raw::c_ushort = 10152;
pub const DAQmx_Val_DigPattern: ::std::os::raw::c_ushort = 10398;
pub const DAQmx_Val_AnlgEdge: ::std::os::raw::c_ushort = 10099;
pub const DAQmx_Val_HaltOutputAndError: ::std::os::raw::c_ushort = 14615;
pub const DAQmx_Val_PauseUntilDataAvailable: ::std::os::raw::c_ushort = 14616;
pub const DAQmx_Val_Volts: ::std::os::raw::c_ushort = 10348;
pub const DAQmx_Val_g: ::std::os::raw::c_ushort = 10186;
pub const DAQmx_Val_MetersPerSecond: ::std::os::raw::c_ushort = 15959;
pub const DAQmx_Val_InchesPerSecond: ::std::os::raw::c_ushort = 15960;
pub const DAQmx_Val_MillivoltsPerMillimeterPerSecond: ::std::os::raw::c_ushort
          =
    15963;
pub const DAQmx_Val_MilliVoltsPerInchPerSecond: ::std::os::raw::c_ushort =
    15964;
pub const DAQmx_Val_WaitForInterrupt: ::std::os::raw::c_ushort = 12523;
pub const DAQmx_Val_Poll: ::std::os::raw::c_ushort = 12524;
pub const DAQmx_Val_Yield: ::std::os::raw::c_ushort = 12525;
pub const DAQmx_Val_Sleep: ::std::os::raw::c_ushort = 12547;
pub const DAQmx_Val_EnteringWin: ::std::os::raw::c_ushort = 10163;
pub const DAQmx_Val_LeavingWin: ::std::os::raw::c_ushort = 10208;
pub const DAQmx_Val_InsideWin: ::std::os::raw::c_ushort = 10199;
pub const DAQmx_Val_OutsideWin: ::std::os::raw::c_ushort = 10251;
pub const DAQmx_Val_WriteToEEPROM: ::std::os::raw::c_ushort = 12538;
pub const DAQmx_Val_WriteToPROM: ::std::os::raw::c_ushort = 12539;
pub const DAQmx_Val_DoNotWrite: ::std::os::raw::c_ushort = 12540;
pub const DAQmx_Val_CurrWritePos: ::std::os::raw::c_ushort = 10430;
pub const DAQmx_Val_ZeroVoltsOrAmps: ::std::os::raw::c_ushort = 12526;
pub const DAQmx_Val_RepeatedData: ::std::os::raw::c_ushort = 16062;
pub const DAQmx_Val_SentinelValue: ::std::os::raw::c_ushort = 16063;
pub const DAQmx_Val_LogicLevelPullUp: ::std::os::raw::c_ushort = 16064;
pub const DAQmx_Val_Local: ::std::os::raw::c_ushort = 16095;
pub const DAQmx_Val_Remote: ::std::os::raw::c_ushort = 16096;
pub const DAQmxSuccess: ::std::os::raw::c_uchar = 0;
pub const DAQmxErrorTrigWinTimeoutExpired: ::std::os::raw::c_int = -209832;
pub const DAQmxErrorInvalidTriggerCfgForDevice: ::std::os::raw::c_int =
    -209831;
pub const DAQmxErrorInvalidDataTransferMechanismForDevice:
          ::std::os::raw::c_int =
    -209830;
pub const DAQmxErrorInputFIFOOverflow3: ::std::os::raw::c_int = -209829;
pub const DAQmxErrorTooManyDevicesForAnalogMultiEdgeTrigCDAQ:
          ::std::os::raw::c_int =
    -209828;
pub const DAQmxErrorTooManyTriggersTypesSpecifiedInTask: ::std::os::raw::c_int
          =
    -209827;
pub const DAQmxErrorMismatchedMultiTriggerConfigValues: ::std::os::raw::c_int
          =
    -209826;
pub const DAQmxErrorInconsistentAODACRangeAcrossTasks: ::std::os::raw::c_int =
    -209825;
pub const DAQmxErrorInconsistentDTToWrite: ::std::os::raw::c_int = -209824;
pub const DAQmxErrorFunctionObsolete: ::std::os::raw::c_int = -209823;
pub const DAQmxErrorNegativeDurationNotSupported: ::std::os::raw::c_int =
    -209822;
pub const DAQmxErrorDurationTooSmall: ::std::os::raw::c_int = -209821;
pub const DAQmxErrorDurationTooLong: ::std::os::raw::c_int = -209820;
pub const DAQmxErrorDurationBasedNotSupportedForSpecifiedTimingMode:
          ::std::os::raw::c_int =
    -209819;
pub const DAQmxErrorInvalidLEDState: ::std::os::raw::c_int = -209818;
pub const DAQmxErrorWatchdogStatesNotUniform: ::std::os::raw::c_int = -209817;
pub const DAQmxErrorSelfTestFailedPowerSupplyOutOfTolerance:
          ::std::os::raw::c_int =
    -209816;
pub const DAQmxErrorHWTSPMultiSampleWrite: ::std::os::raw::c_int = -209815;
pub const DAQmxErrorOnboardRegenExceedsChannelLimit: ::std::os::raw::c_int =
    -209814;
pub const DAQmxErrorWatchdogChannelExpirationStateNotSpecified:
          ::std::os::raw::c_int =
    -209813;
pub const DAQmxErrorInvalidShuntSourceForCalibration: ::std::os::raw::c_int =
    -209812;
pub const DAQmxErrorInvalidShuntSelectForCalibration: ::std::os::raw::c_int =
    -209811;
pub const DAQmxErrorInvalidShuntCalibrationConfiguration:
          ::std::os::raw::c_int =
    -209810;
pub const DAQmxErrorBufferedOperationsNotSupportedOnChannelStandalone:
          ::std::os::raw::c_int =
    -209809;
pub const DAQmxErrorFeatureNotAvailableOnAccessory: ::std::os::raw::c_int =
    -209808;
pub const DAQmxErrorInconsistentThreshVoltageAcrossTerminals:
          ::std::os::raw::c_int =
    -209807;
pub const DAQmxErrorDAQmxIsNotInstalledOnTarget: ::std::os::raw::c_int =
    -209806;
pub const DAQmxErrorCOCannotKeepUpInHWTimedSinglePoint: ::std::os::raw::c_int
          =
    -209805;
pub const DAQmxErrorWaitForNextSampClkDetected3OrMoreSampClks:
          ::std::os::raw::c_int =
    -209803;
pub const DAQmxErrorWaitForNextSampClkDetectedMissedSampClk:
          ::std::os::raw::c_int =
    -209802;
pub const DAQmxErrorWriteNotCompleteBeforeSampClk: ::std::os::raw::c_int =
    -209801;
pub const DAQmxErrorReadNotCompleteBeforeSampClk: ::std::os::raw::c_int =
    -209800;
pub const DAQmxErrorInconsistentDigitalFilteringAcrossTerminals:
          ::std::os::raw::c_int =
    -201510;
pub const DAQmxErrorInconsistentPullUpCfgAcrossTerminals:
          ::std::os::raw::c_int =
    -201509;
pub const DAQmxErrorInconsistentTermCfgAcrossTerminals: ::std::os::raw::c_int
          =
    -201508;
pub const DAQmxErrorVCXODCMBecameUnlocked: ::std::os::raw::c_int = -201507;
pub const DAQmxErrorPLLDACUpdateFailed: ::std::os::raw::c_int = -201506;
pub const DAQmxErrorNoCabledDevice: ::std::os::raw::c_int = -201505;
pub const DAQmxErrorLostRefClk: ::std::os::raw::c_int = -201504;
pub const DAQmxErrorCantUseAITimingEngineWithCounters: ::std::os::raw::c_int =
    -201503;
pub const DAQmxErrorDACOffsetValNotSet: ::std::os::raw::c_int = -201502;
pub const DAQmxErrorCalAdjustRefValOutOfRange: ::std::os::raw::c_int =
    -201501;
pub const DAQmxErrorChansForCalAdjustMustPerformSetContext:
          ::std::os::raw::c_int =
    -201500;
pub const DAQmxErrorGetCalDataInvalidForCalMode: ::std::os::raw::c_int =
    -201499;
pub const DAQmxErrorNoIEPEWithACNotAllowed: ::std::os::raw::c_int = -201498;
pub const DAQmxErrorSetupCalNeededBeforeGetCalDataPoints:
          ::std::os::raw::c_int =
    -201497;
pub const DAQmxErrorVoltageNotCalibrated: ::std::os::raw::c_int = -201496;
pub const DAQmxErrorMissingRangeForCalibration: ::std::os::raw::c_int =
    -201495;
pub const DAQmxErrorMultipleChansNotSupportedDuringCalAdjust:
          ::std::os::raw::c_int =
    -201494;
pub const DAQmxErrorShuntCalFailedOutOfRange: ::std::os::raw::c_int = -201493;
pub const DAQmxErrorOperationNotSupportedOnSimulatedDevice:
          ::std::os::raw::c_int =
    -201492;
pub const DAQmxErrorFirmwareVersionSameAsInstalledVersion:
          ::std::os::raw::c_int =
    -201491;
pub const DAQmxErrorFirmwareVersionOlderThanInstalledVersion:
          ::std::os::raw::c_int =
    -201490;
pub const DAQmxErrorFirmwareUpdateInvalidState: ::std::os::raw::c_int =
    -201489;
pub const DAQmxErrorFirmwareUpdateInvalidID: ::std::os::raw::c_int = -201488;
pub const DAQmxErrorFirmwareUpdateAutomaticManagementEnabled:
          ::std::os::raw::c_int =
    -201487;
pub const DAQmxErrorSetupCalibrationNotCalled: ::std::os::raw::c_int =
    -201486;
pub const DAQmxErrorCalMeasuredDataSizeVsActualDataSizeMismatch:
          ::std::os::raw::c_int =
    -201485;
pub const DAQmxErrorCDAQMissingDSAMasterForChanExpansion:
          ::std::os::raw::c_int =
    -201484;
pub const DAQmxErrorCDAQMasterNotFoundForChanExpansion: ::std::os::raw::c_int
          =
    -201483;
pub const DAQmxErrorAllChansShouldBeProvidedForCalibration:
          ::std::os::raw::c_int =
    -201482;
pub const DAQmxErrorMustSpecifyExpirationStateForAllLinesInRange:
          ::std::os::raw::c_int =
    -201481;
pub const DAQmxErrorOpenSessionExists: ::std::os::raw::c_int = -201480;
pub const DAQmxErrorCannotQueryTerminalForSWArmStart: ::std::os::raw::c_int =
    -201479;
pub const DAQmxErrorChassisWatchdogTimerExpired: ::std::os::raw::c_int =
    -201478;
pub const DAQmxErrorCantReserveWatchdogTaskWhileOtherTasksReserved:
          ::std::os::raw::c_int =
    -201477;
pub const DAQmxErrorCantReserveTaskWhileWatchdogTaskReserving:
          ::std::os::raw::c_int =
    -201476;
pub const DAQmxErrorAuxPowerSourceRequired: ::std::os::raw::c_int = -201475;
pub const DAQmxErrorDeviceNotSupportedOnLocalSystem: ::std::os::raw::c_int =
    -201474;
pub const DAQmxErrorOneTimestampChannelRequiredForCombinedNavigationRead:
          ::std::os::raw::c_int =
    -201472;
pub const DAQmxErrorMultDevsMultPhysChans: ::std::os::raw::c_int = -201471;
pub const DAQmxErrorInvalidCalAdjustmentPointValues: ::std::os::raw::c_int =
    -201470;
pub const DAQmxErrorDifferentDigitizerFromCommunicator: ::std::os::raw::c_int
          =
    -201469;
pub const DAQmxErrorCDAQSyncMasterClockNotPresent: ::std::os::raw::c_int =
    -201468;
pub const DAQmxErrorAssociatedChansHaveConflictingProps: ::std::os::raw::c_int
          =
    -201467;
pub const DAQmxErrorAutoConfigBetweenMultipleDeviceStatesInvalid:
          ::std::os::raw::c_int =
    -201466;
pub const DAQmxErrorAutoConfigOfOfflineDevicesInvalid: ::std::os::raw::c_int =
    -201465;
pub const DAQmxErrorExternalFIFOFault: ::std::os::raw::c_int = -201464;
pub const DAQmxErrorConnectionsNotReciprocal: ::std::os::raw::c_int = -201463;
pub const DAQmxErrorInvalidOutputToInputCDAQSyncConnection:
          ::std::os::raw::c_int =
    -201462;
pub const DAQmxErrorReferenceClockNotPresent: ::std::os::raw::c_int = -201461;
pub const DAQmxErrorBlankStringExpansionFoundNoSupportedCDAQSyncConnectionDevices:
          ::std::os::raw::c_int =
    -201460;
pub const DAQmxErrorNoDevicesSupportCDAQSyncConnections: ::std::os::raw::c_int
          =
    -201459;
pub const DAQmxErrorInvalidCDAQSyncTimeoutValue: ::std::os::raw::c_int =
    -201458;
pub const DAQmxErrorCDAQSyncConnectionToSamePort: ::std::os::raw::c_int =
    -201457;
pub const DAQmxErrorDevsWithoutCommonSyncConnectionStrategy:
          ::std::os::raw::c_int =
    -201456;
pub const DAQmxErrorNoCDAQSyncBetweenPhysAndSimulatedDevs:
          ::std::os::raw::c_int =
    -201455;
pub const DAQmxErrorUnableToContainCards: ::std::os::raw::c_int = -201454;
pub const DAQmxErrorFindDisconnectedBetweenPhysAndSimDeviceStatesInvalid:
          ::std::os::raw::c_int =
    -201453;
pub const DAQmxErrorOperationAborted: ::std::os::raw::c_int = -201452;
pub const DAQmxErrorTwoPortsRequired: ::std::os::raw::c_int = -201451;
pub const DAQmxErrorDeviceDoesNotSupportCDAQSyncConnections:
          ::std::os::raw::c_int =
    -201450;
pub const DAQmxErrorInvalidcDAQSyncPortConnectionFormat: ::std::os::raw::c_int
          =
    -201449;
pub const DAQmxErrorRosetteMeasurementsNotSpecified: ::std::os::raw::c_int =
    -201448;
pub const DAQmxErrorInvalidNumOfPhysChansForDeltaRosette:
          ::std::os::raw::c_int =
    -201447;
pub const DAQmxErrorInvalidNumOfPhysChansForTeeRosette: ::std::os::raw::c_int
          =
    -201446;
pub const DAQmxErrorRosetteStrainChanNamesNeeded: ::std::os::raw::c_int =
    -201445;
pub const DAQmxErrorMultideviceWithOnDemandTiming: ::std::os::raw::c_int =
    -201444;
pub const DAQmxErrorFREQOUTCannotProduceDesiredFrequency3:
          ::std::os::raw::c_int =
    -201443;
pub const DAQmxErrorTwoEdgeSeparationSameTerminalSameEdge:
          ::std::os::raw::c_int =
    -201442;
pub const DAQmxErrorDontMixSyncPulseAndSampClkTimebaseOn449x:
          ::std::os::raw::c_int =
    -201441;
pub const DAQmxErrorNeitherRefClkNorSampClkTimebaseConfiguredForDSASync:
          ::std::os::raw::c_int =
    -201440;
pub const DAQmxErrorRetriggeringFiniteCONotAllowed: ::std::os::raw::c_int =
    -201439;
pub const DAQmxErrorDeviceRebootedFromWDTTimeout: ::std::os::raw::c_int =
    -201438;
pub const DAQmxErrorTimeoutValueExceedsMaximum: ::std::os::raw::c_int =
    -201437;
pub const DAQmxErrorSharingDifferentWireModes: ::std::os::raw::c_int =
    -201436;
pub const DAQmxErrorCantPrimeWithEmptyBuffer: ::std::os::raw::c_int = -201435;
pub const DAQmxErrorConfigFailedBecauseWatchdogExpired: ::std::os::raw::c_int
          =
    -201434;
pub const DAQmxErrorWriteFailedBecauseWatchdogChangedLineDirection:
          ::std::os::raw::c_int =
    -201433;
pub const DAQmxErrorMultipleSubsytemCalibration: ::std::os::raw::c_int =
    -201432;
pub const DAQmxErrorIncorrectChannelForOffsetAdjustment: ::std::os::raw::c_int
          =
    -201431;
pub const DAQmxErrorInvalidNumRefVoltagesToWrite: ::std::os::raw::c_int =
    -201430;
pub const DAQmxErrorStartTrigDelayWithDSAModule: ::std::os::raw::c_int =
    -201429;
pub const DAQmxErrorMoreThanOneSyncPulseDetected: ::std::os::raw::c_int =
    -201428;
pub const DAQmxErrorDevNotSupportedWithinDAQmxAPI: ::std::os::raw::c_int =
    -201427;
pub const DAQmxErrorDevsWithoutSyncStrategies: ::std::os::raw::c_int =
    -201426;
pub const DAQmxErrorDevsWithoutCommonSyncStrategy: ::std::os::raw::c_int =
    -201425;
pub const DAQmxErrorSyncStrategiesCannotSync: ::std::os::raw::c_int = -201424;
pub const DAQmxErrorChassisCommunicationInterrupted: ::std::os::raw::c_int =
    -201423;
pub const DAQmxErrorUnknownCardPowerProfileInCarrier: ::std::os::raw::c_int =
    -201422;
pub const DAQmxErrorAttrNotSupportedOnAccessory: ::std::os::raw::c_int =
    -201421;
pub const DAQmxErrorNetworkDeviceReservedByAnotherHost: ::std::os::raw::c_int
          =
    -201420;
pub const DAQmxErrorIncorrectFirmwareFileUploaded: ::std::os::raw::c_int =
    -201419;
pub const DAQmxErrorInvalidFirmwareFileUploaded: ::std::os::raw::c_int =
    -201418;
pub const DAQmxErrorInTimerTimeoutOnArm: ::std::os::raw::c_int = -201417;
pub const DAQmxErrorCantExceedSlotRelayDriveLimit: ::std::os::raw::c_int =
    -201416;
pub const DAQmxErrorModuleUnsupportedFor9163: ::std::os::raw::c_int = -201415;
pub const DAQmxErrorConnectionsNotSupported: ::std::os::raw::c_int = -201414;
pub const DAQmxErrorAccessoryNotPresent: ::std::os::raw::c_int = -201413;
pub const DAQmxErrorSpecifiedAccessoryChannelsNotPresentOnDevice:
          ::std::os::raw::c_int =
    -201412;
pub const DAQmxErrorConnectionsNotSupportedOnAccessory: ::std::os::raw::c_int
          =
    -201411;
pub const DAQmxErrorRateTooFastForHWTSP: ::std::os::raw::c_int = -201410;
pub const DAQmxErrorDelayFromSampleClockOutOfRangeForHWTSP:
          ::std::os::raw::c_int =
    -201409;
pub const DAQmxErrorAveragingWhenNotInternalHWTSP: ::std::os::raw::c_int =
    -201408;
pub const DAQmxErrorAttributeNotSupportedUnlessHWTSP: ::std::os::raw::c_int =
    -201407;
pub const DAQmxErrorFiveVoltDetectFailed: ::std::os::raw::c_int = -201406;
pub const DAQmxErrorAnalogBusStateInconsistent: ::std::os::raw::c_int =
    -201405;
pub const DAQmxErrorCardDetectedDoesNotMatchExpectedCard:
          ::std::os::raw::c_int =
    -201404;
pub const DAQmxErrorLoggingStartNewFileNotCalled: ::std::os::raw::c_int =
    -201403;
pub const DAQmxErrorLoggingSampsPerFileNotDivisible: ::std::os::raw::c_int =
    -201402;
pub const DAQmxErrorRetrievingNetworkDeviceProperties: ::std::os::raw::c_int =
    -201401;
pub const DAQmxErrorFilePreallocationFailed: ::std::os::raw::c_int = -201400;
pub const DAQmxErrorModuleMismatchInSameTimedTask: ::std::os::raw::c_int =
    -201399;
pub const DAQmxErrorInvalidAttributeValuePossiblyDueToOtherAttributeValues:
          ::std::os::raw::c_int =
    -201398;
pub const DAQmxErrorChangeDetectionStoppedToPreventDeviceHang:
          ::std::os::raw::c_int =
    -201397;
pub const DAQmxErrorFilterDelayRemovalNotPosssibleWithAnalogTrigger:
          ::std::os::raw::c_int =
    -201396;
pub const DAQmxErrorNonbufferedOrNoChannels: ::std::os::raw::c_int = -201395;
pub const DAQmxErrorTristateLogicLevelNotSpecdForEntirePort:
          ::std::os::raw::c_int =
    -201394;
pub const DAQmxErrorTristateLogicLevelNotSupportedOnDigOutChan:
          ::std::os::raw::c_int =
    -201393;
pub const DAQmxErrorTristateLogicLevelNotSupported: ::std::os::raw::c_int =
    -201392;
pub const DAQmxErrorIncompleteGainAndCouplingCalAdjustment:
          ::std::os::raw::c_int =
    -201391;
pub const DAQmxErrorNetworkStatusConnectionLost: ::std::os::raw::c_int =
    -201390;
pub const DAQmxErrorModuleChangeDuringConnectionLoss: ::std::os::raw::c_int =
    -201389;
pub const DAQmxErrorNetworkDeviceNotReservedByHost: ::std::os::raw::c_int =
    -201388;
pub const DAQmxErrorDuplicateCalibrationAdjustmentInput: ::std::os::raw::c_int
          =
    -201387;
pub const DAQmxErrorSelfCalFailedContactTechSupport: ::std::os::raw::c_int =
    -201386;
pub const DAQmxErrorSelfCalFailedToConverge: ::std::os::raw::c_int = -201385;
pub const DAQmxErrorUnsupportedSimulatedModuleForSimulatedChassis:
          ::std::os::raw::c_int =
    -201384;
pub const DAQmxErrorLoggingWriteSizeTooBig: ::std::os::raw::c_int = -201383;
pub const DAQmxErrorLoggingWriteSizeNotDivisible: ::std::os::raw::c_int =
    -201382;
pub const DAQmxErrorMyDAQPowerRailFault: ::std::os::raw::c_int = -201381;
pub const DAQmxErrorDeviceDoesNotSupportThisOperation: ::std::os::raw::c_int =
    -201380;
pub const DAQmxErrorNetworkDevicesNotSupportedOnThisPlatform:
          ::std::os::raw::c_int =
    -201379;
pub const DAQmxErrorUnknownFirmwareVersion: ::std::os::raw::c_int = -201378;
pub const DAQmxErrorFirmwareIsUpdating: ::std::os::raw::c_int = -201377;
pub const DAQmxErrorAccessoryEEPROMIsCorrupt: ::std::os::raw::c_int = -201376;
pub const DAQmxErrorThrmcplLeadOffsetNullingCalNotSupported:
          ::std::os::raw::c_int =
    -201375;
pub const DAQmxErrorSelfCalFailedTryExtCal: ::std::os::raw::c_int = -201374;
pub const DAQmxErrorOutputP2PNotSupportedWithMultithreadedScripts:
          ::std::os::raw::c_int =
    -201373;
pub const DAQmxErrorThrmcplCalibrationChannelsOpen: ::std::os::raw::c_int =
    -201372;
pub const DAQmxErrorMDNSServiceInstanceAlreadyInUse: ::std::os::raw::c_int =
    -201371;
pub const DAQmxErrorIPAddressAlreadyInUse: ::std::os::raw::c_int = -201370;
pub const DAQmxErrorHostnameAlreadyInUse: ::std::os::raw::c_int = -201369;
pub const DAQmxErrorInvalidNumberOfCalAdjustmentPoints: ::std::os::raw::c_int
          =
    -201368;
pub const DAQmxErrorFilterOrDigitalSyncInternalSignal: ::std::os::raw::c_int =
    -201367;
pub const DAQmxErrorBadDDSSource: ::std::os::raw::c_int = -201366;
pub const DAQmxErrorOnboardRegenWithMoreThan16Channels: ::std::os::raw::c_int
          =
    -201365;
pub const DAQmxErrorTriggerTooFast: ::std::os::raw::c_int = -201364;
pub const DAQmxErrorMinMaxOutsideTableRange: ::std::os::raw::c_int = -201363;
pub const DAQmxErrorChannelExpansionWithInvalidAnalogTriggerDevice:
          ::std::os::raw::c_int =
    -201362;
pub const DAQmxErrorSyncPulseSrcInvalidForTask: ::std::os::raw::c_int =
    -201361;
pub const DAQmxErrorInvalidCarrierSlotNumberSpecd: ::std::os::raw::c_int =
    -201360;
pub const DAQmxErrorCardsMustBeInSameCarrier: ::std::os::raw::c_int = -201359;
pub const DAQmxErrorCardDevCarrierSimMustMatch: ::std::os::raw::c_int =
    -201358;
pub const DAQmxErrorDevMustHaveAtLeastOneCard: ::std::os::raw::c_int =
    -201357;
pub const DAQmxErrorCardTopologyError: ::std::os::raw::c_int = -201356;
pub const DAQmxErrorExceededCarrierPowerLimit: ::std::os::raw::c_int =
    -201355;
pub const DAQmxErrorCardsIncompatible: ::std::os::raw::c_int = -201354;
pub const DAQmxErrorAnalogBusNotValid: ::std::os::raw::c_int = -201353;
pub const DAQmxErrorReservationConflict: ::std::os::raw::c_int = -201352;
pub const DAQmxErrorMemMappedOnDemandNotSupported: ::std::os::raw::c_int =
    -201351;
pub const DAQmxErrorSlaveWithNoStartTriggerConfigured: ::std::os::raw::c_int =
    -201350;
pub const DAQmxErrorChannelExpansionWithDifferentTriggerDevices:
          ::std::os::raw::c_int =
    -201349;
pub const DAQmxErrorCounterSyncAndRetriggered: ::std::os::raw::c_int =
    -201348;
pub const DAQmxErrorNoExternalSyncPulseDetected: ::std::os::raw::c_int =
    -201347;
pub const DAQmxErrorSlaveAndNoExternalSyncPulse: ::std::os::raw::c_int =
    -201346;
pub const DAQmxErrorCustomTimingRequiredForAttribute: ::std::os::raw::c_int =
    -201345;
pub const DAQmxErrorCustomTimingModeNotSet: ::std::os::raw::c_int = -201344;
pub const DAQmxErrorAccessoryPowerTripped: ::std::os::raw::c_int = -201343;
pub const DAQmxErrorUnsupportedAccessory: ::std::os::raw::c_int = -201342;
pub const DAQmxErrorInvalidAccessoryChange: ::std::os::raw::c_int = -201341;
pub const DAQmxErrorFirmwareRequiresUpgrade: ::std::os::raw::c_int = -201340;
pub const DAQmxErrorFastExternalTimebaseNotSupportedForDevice:
          ::std::os::raw::c_int =
    -201339;
pub const DAQmxErrorInvalidShuntLocationForCalibration: ::std::os::raw::c_int
          =
    -201338;
pub const DAQmxErrorDeviceNameTooLong: ::std::os::raw::c_int = -201337;
pub const DAQmxErrorBridgeScalesUnsupported: ::std::os::raw::c_int = -201336;
pub const DAQmxErrorMismatchedElecPhysValues: ::std::os::raw::c_int = -201335;
pub const DAQmxErrorLinearRequiresUniquePoints: ::std::os::raw::c_int =
    -201334;
pub const DAQmxErrorMissingRequiredScalingParameter: ::std::os::raw::c_int =
    -201333;
pub const DAQmxErrorLoggingNotSupportOnOutputTasks: ::std::os::raw::c_int =
    -201332;
pub const DAQmxErrorMemoryMappedHardwareTimedNonBufferedUnsupported:
          ::std::os::raw::c_int =
    -201331;
pub const DAQmxErrorCannotUpdatePulseTrainWithAutoIncrementEnabled:
          ::std::os::raw::c_int =
    -201330;
pub const DAQmxErrorHWTimedSinglePointAndDataXferNotDMA: ::std::os::raw::c_int
          =
    -201329;
pub const DAQmxErrorSCCSecondStageEmpty: ::std::os::raw::c_int = -201328;
pub const DAQmxErrorSCCInvalidDualStageCombo: ::std::os::raw::c_int = -201327;
pub const DAQmxErrorSCCInvalidSecondStage: ::std::os::raw::c_int = -201326;
pub const DAQmxErrorSCCInvalidFirstStage: ::std::os::raw::c_int = -201325;
pub const DAQmxErrorCounterMultipleSampleClockedChannels:
          ::std::os::raw::c_int =
    -201324;
pub const DAQmxError2CounterMeasurementModeAndSampleClocked:
          ::std::os::raw::c_int =
    -201323;
pub const DAQmxErrorCantHaveBothMemMappedAndNonMemMappedTasks:
          ::std::os::raw::c_int =
    -201322;
pub const DAQmxErrorMemMappedDataReadByAnotherProcess: ::std::os::raw::c_int =
    -201321;
pub const DAQmxErrorRetriggeringInvalidForGivenSettings: ::std::os::raw::c_int
          =
    -201320;
pub const DAQmxErrorAIOverrun: ::std::os::raw::c_int = -201319;
pub const DAQmxErrorCOOverrun: ::std::os::raw::c_int = -201318;
pub const DAQmxErrorCounterMultipleBufferedChannels: ::std::os::raw::c_int =
    -201317;
pub const DAQmxErrorInvalidTimebaseForCOHWTSP: ::std::os::raw::c_int =
    -201316;
pub const DAQmxErrorWriteBeforeEvent: ::std::os::raw::c_int = -201315;
pub const DAQmxErrorCIOverrun: ::std::os::raw::c_int = -201314;
pub const DAQmxErrorCounterNonResponsiveAndReset: ::std::os::raw::c_int =
    -201313;
pub const DAQmxErrorMeasTypeOrChannelNotSupportedForLogging:
          ::std::os::raw::c_int =
    -201312;
pub const DAQmxErrorFileAlreadyOpenedForWrite: ::std::os::raw::c_int =
    -201311;
pub const DAQmxErrorTdmsNotFound: ::std::os::raw::c_int = -201310;
pub const DAQmxErrorGenericFileIO: ::std::os::raw::c_int = -201309;
pub const DAQmxErrorFiniteSTCCounterNotSupportedForLogging:
          ::std::os::raw::c_int =
    -201308;
pub const DAQmxErrorMeasurementTypeNotSupportedForLogging:
          ::std::os::raw::c_int =
    -201307;
pub const DAQmxErrorFileAlreadyOpened: ::std::os::raw::c_int = -201306;
pub const DAQmxErrorDiskFull: ::std::os::raw::c_int = -201305;
pub const DAQmxErrorFilePathInvalid: ::std::os::raw::c_int = -201304;
pub const DAQmxErrorFileVersionMismatch: ::std::os::raw::c_int = -201303;
pub const DAQmxErrorFileWriteProtected: ::std::os::raw::c_int = -201302;
pub const DAQmxErrorReadNotSupportedForLoggingMode: ::std::os::raw::c_int =
    -201301;
pub const DAQmxErrorAttributeNotSupportedWhenLogging: ::std::os::raw::c_int =
    -201300;
pub const DAQmxErrorLoggingModeNotSupportedNonBuffered: ::std::os::raw::c_int
          =
    -201299;
pub const DAQmxErrorPropertyNotSupportedWithConflictingProperty:
          ::std::os::raw::c_int =
    -201298;
pub const DAQmxErrorParallelSSHOnConnector1: ::std::os::raw::c_int = -201297;
pub const DAQmxErrorCOOnlyImplicitSampleTimingTypeSupported:
          ::std::os::raw::c_int =
    -201296;
pub const DAQmxErrorCalibrationFailedAOOutOfRange: ::std::os::raw::c_int =
    -201295;
pub const DAQmxErrorCalibrationFailedAIOutOfRange: ::std::os::raw::c_int =
    -201294;
pub const DAQmxErrorCalPWMLinearityFailed: ::std::os::raw::c_int = -201293;
pub const DAQmxErrorOverrunUnderflowConfigurationCombo: ::std::os::raw::c_int
          =
    -201292;
pub const DAQmxErrorCannotWriteToFiniteCOTask: ::std::os::raw::c_int =
    -201291;
pub const DAQmxErrorNetworkDAQInvalidWEPKeyLength: ::std::os::raw::c_int =
    -201290;
pub const DAQmxErrorCalInputsShortedNotSupported: ::std::os::raw::c_int =
    -201289;
pub const DAQmxErrorCannotSetPropertyWhenTaskIsReserved: ::std::os::raw::c_int
          =
    -201288;
pub const DAQmxErrorMinus12VFuseBlown: ::std::os::raw::c_int = -201287;
pub const DAQmxErrorPlus12VFuseBlown: ::std::os::raw::c_int = -201286;
pub const DAQmxErrorPlus5VFuseBlown: ::std::os::raw::c_int = -201285;
pub const DAQmxErrorPlus3VFuseBlown: ::std::os::raw::c_int = -201284;
pub const DAQmxErrorDeviceSerialPortError: ::std::os::raw::c_int = -201283;
pub const DAQmxErrorPowerUpStateMachineNotDone: ::std::os::raw::c_int =
    -201282;
pub const DAQmxErrorTooManyTriggersSpecifiedInTask: ::std::os::raw::c_int =
    -201281;
pub const DAQmxErrorVerticalOffsetNotSupportedOnDevice: ::std::os::raw::c_int
          =
    -201280;
pub const DAQmxErrorInvalidCouplingForMeasurementType: ::std::os::raw::c_int =
    -201279;
pub const DAQmxErrorDigitalLineUpdateTooFastForDevice: ::std::os::raw::c_int =
    -201278;
pub const DAQmxErrorCertificateIsTooBigToTransfer: ::std::os::raw::c_int =
    -201277;
pub const DAQmxErrorOnlyPEMOrDERCertiticatesAccepted: ::std::os::raw::c_int =
    -201276;
pub const DAQmxErrorCalCouplingNotSupported: ::std::os::raw::c_int = -201275;
pub const DAQmxErrorDeviceNotSupportedIn64Bit: ::std::os::raw::c_int =
    -201274;
pub const DAQmxErrorNetworkDeviceInUse: ::std::os::raw::c_int = -201273;
pub const DAQmxErrorInvalidIPv4AddressFormat: ::std::os::raw::c_int = -201272;
pub const DAQmxErrorNetworkProductTypeMismatch: ::std::os::raw::c_int =
    -201271;
pub const DAQmxErrorOnlyPEMCertificatesAccepted: ::std::os::raw::c_int =
    -201270;
pub const DAQmxErrorCalibrationRequiresPrototypingBoardEnabled:
          ::std::os::raw::c_int =
    -201269;
pub const DAQmxErrorAllCurrentLimitingResourcesAlreadyTaken:
          ::std::os::raw::c_int =
    -201268;
pub const DAQmxErrorUserDefInfoStringBadLength: ::std::os::raw::c_int =
    -201267;
pub const DAQmxErrorPropertyNotFound: ::std::os::raw::c_int = -201266;
pub const DAQmxErrorOverVoltageProtectionActivated: ::std::os::raw::c_int =
    -201265;
pub const DAQmxErrorScaledIQWaveformTooLarge: ::std::os::raw::c_int = -201264;
pub const DAQmxErrorFirmwareFailedToDownload: ::std::os::raw::c_int = -201263;
pub const DAQmxErrorPropertyNotSupportedForBusType: ::std::os::raw::c_int =
    -201262;
pub const DAQmxErrorChangeRateWhileRunningCouldNotBeCompleted:
          ::std::os::raw::c_int =
    -201261;
pub const DAQmxErrorCannotQueryManualControlAttribute: ::std::os::raw::c_int =
    -201260;
pub const DAQmxErrorInvalidNetworkConfiguration: ::std::os::raw::c_int =
    -201259;
pub const DAQmxErrorInvalidWirelessConfiguration: ::std::os::raw::c_int =
    -201258;
pub const DAQmxErrorInvalidWirelessCountryCode: ::std::os::raw::c_int =
    -201257;
pub const DAQmxErrorInvalidWirelessChannel: ::std::os::raw::c_int = -201256;
pub const DAQmxErrorNetworkEEPROMHasChanged: ::std::os::raw::c_int = -201255;
pub const DAQmxErrorNetworkSerialNumberMismatch: ::std::os::raw::c_int =
    -201254;
pub const DAQmxErrorNetworkStatusDown: ::std::os::raw::c_int = -201253;
pub const DAQmxErrorNetworkTargetUnreachable: ::std::os::raw::c_int = -201252;
pub const DAQmxErrorNetworkTargetNotFound: ::std::os::raw::c_int = -201251;
pub const DAQmxErrorNetworkStatusTimedOut: ::std::os::raw::c_int = -201250;
pub const DAQmxErrorInvalidWirelessSecuritySelection: ::std::os::raw::c_int =
    -201249;
pub const DAQmxErrorNetworkDeviceConfigurationLocked: ::std::os::raw::c_int =
    -201248;
pub const DAQmxErrorNetworkDAQDeviceNotSupported: ::std::os::raw::c_int =
    -201247;
pub const DAQmxErrorNetworkDAQCannotCreateEmptySleeve: ::std::os::raw::c_int =
    -201246;
pub const DAQmxErrorUserDefInfoStringTooLong: ::std::os::raw::c_int = -201245;
pub const DAQmxErrorModuleTypeDoesNotMatchModuleTypeInDestination:
          ::std::os::raw::c_int =
    -201244;
pub const DAQmxErrorInvalidTEDSInterfaceAddress: ::std::os::raw::c_int =
    -201243;
pub const DAQmxErrorDevDoesNotSupportSCXIComm: ::std::os::raw::c_int =
    -201242;
pub const DAQmxErrorSCXICommDevConnector0MustBeCabledToModule:
          ::std::os::raw::c_int =
    -201241;
pub const DAQmxErrorSCXIModuleDoesNotSupportDigitizationMode:
          ::std::os::raw::c_int =
    -201240;
pub const DAQmxErrorDevDoesNotSupportMultiplexedSCXIDigitizationMode:
          ::std::os::raw::c_int =
    -201239;
pub const DAQmxErrorDevOrDevPhysChanDoesNotSupportSCXIDigitization:
          ::std::os::raw::c_int =
    -201238;
pub const DAQmxErrorInvalidPhysChanName: ::std::os::raw::c_int = -201237;
pub const DAQmxErrorSCXIChassisCommModeInvalid: ::std::os::raw::c_int =
    -201236;
pub const DAQmxErrorRequiredDependencyNotFound: ::std::os::raw::c_int =
    -201235;
pub const DAQmxErrorInvalidStorage: ::std::os::raw::c_int = -201234;
pub const DAQmxErrorInvalidObject: ::std::os::raw::c_int = -201233;
pub const DAQmxErrorStorageAlteredPriorToSave: ::std::os::raw::c_int =
    -201232;
pub const DAQmxErrorTaskDoesNotReferenceLocalChannel: ::std::os::raw::c_int =
    -201231;
pub const DAQmxErrorReferencedDevSimMustMatchTarget: ::std::os::raw::c_int =
    -201230;
pub const DAQmxErrorProgrammedIOFailsBecauseOfWatchdogTimer:
          ::std::os::raw::c_int =
    -201229;
pub const DAQmxErrorWatchdogTimerFailsBecauseOfProgrammedIO:
          ::std::os::raw::c_int =
    -201228;
pub const DAQmxErrorCantUseThisTimingEngineWithAPort: ::std::os::raw::c_int =
    -201227;
pub const DAQmxErrorProgrammedIOConflict: ::std::os::raw::c_int = -201226;
pub const DAQmxErrorChangeDetectionIncompatibleWithProgrammedIO:
          ::std::os::raw::c_int =
    -201225;
pub const DAQmxErrorTristateNotEnoughLines: ::std::os::raw::c_int = -201224;
pub const DAQmxErrorTristateConflict: ::std::os::raw::c_int = -201223;
pub const DAQmxErrorGenerateOrFiniteWaitExpectedBeforeBreakBlock:
          ::std::os::raw::c_int =
    -201222;
pub const DAQmxErrorBreakBlockNotAllowedInLoop: ::std::os::raw::c_int =
    -201221;
pub const DAQmxErrorClearTriggerNotAllowedInBreakBlock: ::std::os::raw::c_int
          =
    -201220;
pub const DAQmxErrorNestingNotAllowedInBreakBlock: ::std::os::raw::c_int =
    -201219;
pub const DAQmxErrorIfElseBlockNotAllowedInBreakBlock: ::std::os::raw::c_int =
    -201218;
pub const DAQmxErrorRepeatUntilTriggerLoopNotAllowedInBreakBlock:
          ::std::os::raw::c_int =
    -201217;
pub const DAQmxErrorWaitUntilTriggerNotAllowedInBreakBlock:
          ::std::os::raw::c_int =
    -201216;
pub const DAQmxErrorMarkerPosInvalidInBreakBlock: ::std::os::raw::c_int =
    -201215;
pub const DAQmxErrorInvalidWaitDurationInBreakBlock: ::std::os::raw::c_int =
    -201214;
pub const DAQmxErrorInvalidSubsetLengthInBreakBlock: ::std::os::raw::c_int =
    -201213;
pub const DAQmxErrorInvalidWaveformLengthInBreakBlock: ::std::os::raw::c_int =
    -201212;
pub const DAQmxErrorInvalidWaitDurationBeforeBreakBlock: ::std::os::raw::c_int
          =
    -201211;
pub const DAQmxErrorInvalidSubsetLengthBeforeBreakBlock: ::std::os::raw::c_int
          =
    -201210;
pub const DAQmxErrorInvalidWaveformLengthBeforeBreakBlock:
          ::std::os::raw::c_int =
    -201209;
pub const DAQmxErrorSampleRateTooHighForADCTimingMode: ::std::os::raw::c_int =
    -201208;
pub const DAQmxErrorActiveDevNotSupportedWithMultiDevTask:
          ::std::os::raw::c_int =
    -201207;
pub const DAQmxErrorRealDevAndSimDevNotSupportedInSameTask:
          ::std::os::raw::c_int =
    -201206;
pub const DAQmxErrorRTSISimMustMatchDevSim: ::std::os::raw::c_int = -201205;
pub const DAQmxErrorBridgeShuntCaNotSupported: ::std::os::raw::c_int =
    -201204;
pub const DAQmxErrorStrainShuntCaNotSupported: ::std::os::raw::c_int =
    -201203;
pub const DAQmxErrorGainTooLargeForGainCalConst: ::std::os::raw::c_int =
    -201202;
pub const DAQmxErrorOffsetTooLargeForOffsetCalConst: ::std::os::raw::c_int =
    -201201;
pub const DAQmxErrorElvisPrototypingBoardRemoved: ::std::os::raw::c_int =
    -201200;
pub const DAQmxErrorElvis2PowerRailFault: ::std::os::raw::c_int = -201199;
pub const DAQmxErrorElvis2PhysicalChansFault: ::std::os::raw::c_int = -201198;
pub const DAQmxErrorElvis2PhysicalChansThermalEvent: ::std::os::raw::c_int =
    -201197;
pub const DAQmxErrorRXBitErrorRateLimitExceeded: ::std::os::raw::c_int =
    -201196;
pub const DAQmxErrorPHYBitErrorRateLimitExceeded: ::std::os::raw::c_int =
    -201195;
pub const DAQmxErrorTwoPartAttributeCalledOutOfOrder: ::std::os::raw::c_int =
    -201194;
pub const DAQmxErrorInvalidSCXIChassisAddress: ::std::os::raw::c_int =
    -201193;
pub const DAQmxErrorCouldNotConnectToRemoteMXS: ::std::os::raw::c_int =
    -201192;
pub const DAQmxErrorExcitationStateRequiredForAttributes:
          ::std::os::raw::c_int =
    -201191;
pub const DAQmxErrorDeviceNotUsableUntilUSBReplug: ::std::os::raw::c_int =
    -201190;
pub const DAQmxErrorInputFIFOOverflowDuringCalibrationOnFullSpeedUSB:
          ::std::os::raw::c_int =
    -201189;
pub const DAQmxErrorInputFIFOOverflowDuringCalibration: ::std::os::raw::c_int
          =
    -201188;
pub const DAQmxErrorCJCChanConflictsWithNonThermocoupleChan:
          ::std::os::raw::c_int =
    -201187;
pub const DAQmxErrorCommDeviceForPXIBackplaneNotInRightmostSlot:
          ::std::os::raw::c_int =
    -201186;
pub const DAQmxErrorCommDeviceForPXIBackplaneNotInSameChassis:
          ::std::os::raw::c_int =
    -201185;
pub const DAQmxErrorCommDeviceForPXIBackplaneNotPXI: ::std::os::raw::c_int =
    -201184;
pub const DAQmxErrorInvalidCalExcitFrequency: ::std::os::raw::c_int = -201183;
pub const DAQmxErrorInvalidCalExcitVoltage: ::std::os::raw::c_int = -201182;
pub const DAQmxErrorInvalidAIInputSrc: ::std::os::raw::c_int = -201181;
pub const DAQmxErrorInvalidCalInputRef: ::std::os::raw::c_int = -201180;
pub const DAQmxErrordBReferenceValueNotGreaterThanZero: ::std::os::raw::c_int
          =
    -201179;
pub const DAQmxErrorSampleClockRateIsTooFastForSampleClockTiming:
          ::std::os::raw::c_int =
    -201178;
pub const DAQmxErrorDeviceNotUsableUntilColdStart: ::std::os::raw::c_int =
    -201177;
pub const DAQmxErrorSampleClockRateIsTooFastForBurstTiming:
          ::std::os::raw::c_int =
    -201176;
pub const DAQmxErrorDevImportFailedAssociatedResourceIDsNotSupported:
          ::std::os::raw::c_int =
    -201175;
pub const DAQmxErrorSCXI1600ImportNotSupported: ::std::os::raw::c_int =
    -201174;
pub const DAQmxErrorPowerSupplyConfigurationFailed: ::std::os::raw::c_int =
    -201173;
pub const DAQmxErrorIEPEWithDCNotAllowed: ::std::os::raw::c_int = -201172;
pub const DAQmxErrorMinTempForThermocoupleTypeOutsideAccuracyForPolyScaling:
          ::std::os::raw::c_int =
    -201171;
pub const DAQmxErrorDevImportFailedNoDeviceToOverwriteAndSimulationNotSupported:
          ::std::os::raw::c_int =
    -201170;
pub const DAQmxErrorDevImportFailedDeviceNotSupportedOnDestination:
          ::std::os::raw::c_int =
    -201169;
pub const DAQmxErrorFirmwareIsTooOld: ::std::os::raw::c_int = -201168;
pub const DAQmxErrorFirmwareCouldntUpdate: ::std::os::raw::c_int = -201167;
pub const DAQmxErrorFirmwareIsCorrupt: ::std::os::raw::c_int = -201166;
pub const DAQmxErrorFirmwareTooNew: ::std::os::raw::c_int = -201165;
pub const DAQmxErrorSampClockCannotBeExportedFromExternalSampClockSrc:
          ::std::os::raw::c_int =
    -201164;
pub const DAQmxErrorPhysChanReservedForInputWhenDesiredForOutput:
          ::std::os::raw::c_int =
    -201163;
pub const DAQmxErrorPhysChanReservedForOutputWhenDesiredForInput:
          ::std::os::raw::c_int =
    -201162;
pub const DAQmxErrorSpecifiedCDAQSlotNotEmpty: ::std::os::raw::c_int =
    -201161;
pub const DAQmxErrorDeviceDoesNotSupportSimulation: ::std::os::raw::c_int =
    -201160;
pub const DAQmxErrorInvalidCDAQSlotNumberSpecd: ::std::os::raw::c_int =
    -201159;
pub const DAQmxErrorCSeriesModSimMustMatchCDAQChassisSim:
          ::std::os::raw::c_int =
    -201158;
pub const DAQmxErrorSCCCabledDevMustNotBeSimWhenSCCCarrierIsNotSim:
          ::std::os::raw::c_int =
    -201157;
pub const DAQmxErrorSCCModSimMustMatchSCCCarrierSim: ::std::os::raw::c_int =
    -201156;
pub const DAQmxErrorSCXIModuleDoesNotSupportSimulation: ::std::os::raw::c_int
          =
    -201155;
pub const DAQmxErrorSCXICableDevMustNotBeSimWhenModIsNotSim:
          ::std::os::raw::c_int =
    -201154;
pub const DAQmxErrorSCXIDigitizerSimMustNotBeSimWhenModIsNotSim:
          ::std::os::raw::c_int =
    -201153;
pub const DAQmxErrorSCXIModSimMustMatchSCXIChassisSim: ::std::os::raw::c_int =
    -201152;
pub const DAQmxErrorSimPXIDevReqSlotAndChassisSpecd: ::std::os::raw::c_int =
    -201151;
pub const DAQmxErrorSimDevConflictWithRealDev: ::std::os::raw::c_int =
    -201150;
pub const DAQmxErrorInsufficientDataForCalibration: ::std::os::raw::c_int =
    -201149;
pub const DAQmxErrorTriggerChannelMustBeEnabled: ::std::os::raw::c_int =
    -201148;
pub const DAQmxErrorCalibrationDataConflictCouldNotBeResolved:
          ::std::os::raw::c_int =
    -201147;
pub const DAQmxErrorSoftwareTooNewForSelfCalibrationData:
          ::std::os::raw::c_int =
    -201146;
pub const DAQmxErrorSoftwareTooNewForExtCalibrationData: ::std::os::raw::c_int
          =
    -201145;
pub const DAQmxErrorSelfCalibrationDataTooNewForSoftware:
          ::std::os::raw::c_int =
    -201144;
pub const DAQmxErrorExtCalibrationDataTooNewForSoftware: ::std::os::raw::c_int
          =
    -201143;
pub const DAQmxErrorSoftwareTooNewForEEPROM: ::std::os::raw::c_int = -201142;
pub const DAQmxErrorEEPROMTooNewForSoftware: ::std::os::raw::c_int = -201141;
pub const DAQmxErrorSoftwareTooNewForHardware: ::std::os::raw::c_int =
    -201140;
pub const DAQmxErrorHardwareTooNewForSoftware: ::std::os::raw::c_int =
    -201139;
pub const DAQmxErrorTaskCannotRestartFirstSampNotAvailToGenerate:
          ::std::os::raw::c_int =
    -201138;
pub const DAQmxErrorOnlyUseStartTrigSrcPrptyWithDevDataLines:
          ::std::os::raw::c_int =
    -201137;
pub const DAQmxErrorOnlyUsePauseTrigSrcPrptyWithDevDataLines:
          ::std::os::raw::c_int =
    -201136;
pub const DAQmxErrorOnlyUseRefTrigSrcPrptyWithDevDataLines:
          ::std::os::raw::c_int =
    -201135;
pub const DAQmxErrorPauseTrigDigPatternSizeDoesNotMatchSrcSize:
          ::std::os::raw::c_int =
    -201134;
pub const DAQmxErrorLineConflictCDAQ: ::std::os::raw::c_int = -201133;
pub const DAQmxErrorCannotWriteBeyondFinalFiniteSample: ::std::os::raw::c_int
          =
    -201132;
pub const DAQmxErrorRefAndStartTriggerSrcCantBeSame: ::std::os::raw::c_int =
    -201131;
pub const DAQmxErrorMemMappingIncompatibleWithPhysChansInTask:
          ::std::os::raw::c_int =
    -201130;
pub const DAQmxErrorOutputDriveTypeMemMappingConflict: ::std::os::raw::c_int =
    -201129;
pub const DAQmxErrorCAPIDeviceIndexInvalid: ::std::os::raw::c_int = -201128;
pub const DAQmxErrorRatiometricDevicesMustUseExcitationForScaling:
          ::std::os::raw::c_int =
    -201127;
pub const DAQmxErrorPropertyRequiresPerDeviceCfg: ::std::os::raw::c_int =
    -201126;
pub const DAQmxErrorAICouplingAndAIInputSourceConflict: ::std::os::raw::c_int
          =
    -201125;
pub const DAQmxErrorOnlyOneTaskCanPerformDOMemoryMappingAtATime:
          ::std::os::raw::c_int =
    -201124;
pub const DAQmxErrorTooManyChansForAnalogRefTrigCDAQ: ::std::os::raw::c_int =
    -201123;
pub const DAQmxErrorSpecdPropertyValueIsIncompatibleWithSampleTimingType:
          ::std::os::raw::c_int =
    -201122;
pub const DAQmxErrorCPUNotSupportedRequireSSE: ::std::os::raw::c_int =
    -201121;
pub const DAQmxErrorSpecdPropertyValueIsIncompatibleWithSampleTimingResponseMode:
          ::std::os::raw::c_int =
    -201120;
pub const DAQmxErrorConflictingNextWriteIsLastAndRegenModeProperties:
          ::std::os::raw::c_int =
    -201119;
pub const DAQmxErrorMStudioOperationDoesNotSupportDeviceContext:
          ::std::os::raw::c_int =
    -201118;
pub const DAQmxErrorPropertyValueInChannelExpansionContextInvalid:
          ::std::os::raw::c_int =
    -201117;
pub const DAQmxErrorHWTimedNonBufferedAONotSupported: ::std::os::raw::c_int =
    -201116;
pub const DAQmxErrorWaveformLengthNotMultOfQuantum: ::std::os::raw::c_int =
    -201115;
pub const DAQmxErrorDSAExpansionMixedBoardsWrongOrderInPXIChassis:
          ::std::os::raw::c_int =
    -201114;
pub const DAQmxErrorPowerLevelTooLowForOOK: ::std::os::raw::c_int = -201113;
pub const DAQmxErrorDeviceComponentTestFailure: ::std::os::raw::c_int =
    -201112;
pub const DAQmxErrorUserDefinedWfmWithOOKUnsupported: ::std::os::raw::c_int =
    -201111;
pub const DAQmxErrorInvalidDigitalModulationUserDefinedWaveform:
          ::std::os::raw::c_int =
    -201110;
pub const DAQmxErrorBothRefInAndRefOutEnabled: ::std::os::raw::c_int =
    -201109;
pub const DAQmxErrorBothAnalogAndDigitalModulationEnabled:
          ::std::os::raw::c_int =
    -201108;
pub const DAQmxErrorBufferedOpsNotSupportedInSpecdSlotForCDAQ:
          ::std::os::raw::c_int =
    -201107;
pub const DAQmxErrorPhysChanNotSupportedInSpecdSlotForCDAQ:
          ::std::os::raw::c_int =
    -201106;
pub const DAQmxErrorResourceReservedWithConflictingSettings:
          ::std::os::raw::c_int =
    -201105;
pub const DAQmxErrorInconsistentAnalogTrigSettingsCDAQ: ::std::os::raw::c_int
          =
    -201104;
pub const DAQmxErrorTooManyChansForAnalogPauseTrigCDAQ: ::std::os::raw::c_int
          =
    -201103;
pub const DAQmxErrorAnalogTrigNotFirstInScanListCDAQ: ::std::os::raw::c_int =
    -201102;
pub const DAQmxErrorTooManyChansGivenTimingType: ::std::os::raw::c_int =
    -201101;
pub const DAQmxErrorSampClkTimebaseDivWithExtSampClk: ::std::os::raw::c_int =
    -201100;
pub const DAQmxErrorCantSaveTaskWithPerDeviceTimingProperties:
          ::std::os::raw::c_int =
    -201099;
pub const DAQmxErrorConflictingAutoZeroMode: ::std::os::raw::c_int = -201098;
pub const DAQmxErrorSampClkRateNotSupportedWithEAREnabled:
          ::std::os::raw::c_int =
    -201097;
pub const DAQmxErrorSampClkTimebaseRateNotSpecd: ::std::os::raw::c_int =
    -201096;
pub const DAQmxErrorSessionCorruptedByDLLReload: ::std::os::raw::c_int =
    -201095;
pub const DAQmxErrorActiveDevNotSupportedWithChanExpansion:
          ::std::os::raw::c_int =
    -201094;
pub const DAQmxErrorSampClkRateInvalid: ::std::os::raw::c_int = -201093;
pub const DAQmxErrorExtSyncPulseSrcCannotBeExported: ::std::os::raw::c_int =
    -201092;
pub const DAQmxErrorSyncPulseMinDelayToStartNeededForExtSyncPulseSrc:
          ::std::os::raw::c_int =
    -201091;
pub const DAQmxErrorSyncPulseSrcInvalid: ::std::os::raw::c_int = -201090;
pub const DAQmxErrorSampClkTimebaseRateInvalid: ::std::os::raw::c_int =
    -201089;
pub const DAQmxErrorSampClkTimebaseSrcInvalid: ::std::os::raw::c_int =
    -201088;
pub const DAQmxErrorSampClkRateMustBeSpecd: ::std::os::raw::c_int = -201087;
pub const DAQmxErrorInvalidAttributeName: ::std::os::raw::c_int = -201086;
pub const DAQmxErrorCJCChanNameMustBeSetWhenCJCSrcIsScannableChan:
          ::std::os::raw::c_int =
    -201085;
pub const DAQmxErrorHiddenChanMissingInChansPropertyInCfgFile:
          ::std::os::raw::c_int =
    -201084;
pub const DAQmxErrorChanNamesNotSpecdInCfgFile: ::std::os::raw::c_int =
    -201083;
pub const DAQmxErrorDuplicateHiddenChanNamesInCfgFile: ::std::os::raw::c_int =
    -201082;
pub const DAQmxErrorDuplicateChanNameInCfgFile: ::std::os::raw::c_int =
    -201081;
pub const DAQmxErrorInvalidSCCModuleForSlotSpecd: ::std::os::raw::c_int =
    -201080;
pub const DAQmxErrorInvalidSCCSlotNumberSpecd: ::std::os::raw::c_int =
    -201079;
pub const DAQmxErrorInvalidSectionIdentifier: ::std::os::raw::c_int = -201078;
pub const DAQmxErrorInvalidSectionName: ::std::os::raw::c_int = -201077;
pub const DAQmxErrorDAQmxVersionNotSupported: ::std::os::raw::c_int = -201076;
pub const DAQmxErrorSWObjectsFoundInFile: ::std::os::raw::c_int = -201075;
pub const DAQmxErrorHWObjectsFoundInFile: ::std::os::raw::c_int = -201074;
pub const DAQmxErrorLocalChannelSpecdWithNoParentTask: ::std::os::raw::c_int =
    -201073;
pub const DAQmxErrorTaskReferencesMissingLocalChannel: ::std::os::raw::c_int =
    -201072;
pub const DAQmxErrorTaskReferencesLocalChannelFromOtherTask:
          ::std::os::raw::c_int =
    -201071;
pub const DAQmxErrorTaskMissingChannelProperty: ::std::os::raw::c_int =
    -201070;
pub const DAQmxErrorInvalidLocalChanName: ::std::os::raw::c_int = -201069;
pub const DAQmxErrorInvalidEscapeCharacterInString: ::std::os::raw::c_int =
    -201068;
pub const DAQmxErrorInvalidTableIdentifier: ::std::os::raw::c_int = -201067;
pub const DAQmxErrorValueFoundInInvalidColumn: ::std::os::raw::c_int =
    -201066;
pub const DAQmxErrorMissingStartOfTable: ::std::os::raw::c_int = -201065;
pub const DAQmxErrorFileMissingRequiredDAQmxHeader: ::std::os::raw::c_int =
    -201064;
pub const DAQmxErrorDeviceIDDoesNotMatch: ::std::os::raw::c_int = -201063;
pub const DAQmxErrorBufferedOperationsNotSupportedOnSelectedLines:
          ::std::os::raw::c_int =
    -201062;
pub const DAQmxErrorPropertyConflictsWithScale: ::std::os::raw::c_int =
    -201061;
pub const DAQmxErrorInvalidINIFileSyntax: ::std::os::raw::c_int = -201060;
pub const DAQmxErrorDeviceInfoFailedPXIChassisNotIdentified:
          ::std::os::raw::c_int =
    -201059;
pub const DAQmxErrorInvalidHWProductNumber: ::std::os::raw::c_int = -201058;
pub const DAQmxErrorInvalidHWProductType: ::std::os::raw::c_int = -201057;
pub const DAQmxErrorInvalidNumericFormatSpecd: ::std::os::raw::c_int =
    -201056;
pub const DAQmxErrorDuplicatePropertyInObject: ::std::os::raw::c_int =
    -201055;
pub const DAQmxErrorInvalidEnumValueSpecd: ::std::os::raw::c_int = -201054;
pub const DAQmxErrorTEDSSensorPhysicalChannelConflict: ::std::os::raw::c_int =
    -201053;
pub const DAQmxErrorTooManyPhysicalChansForTEDSInterfaceSpecd:
          ::std::os::raw::c_int =
    -201052;
pub const DAQmxErrorIncapableTEDSInterfaceControllingDeviceSpecd:
          ::std::os::raw::c_int =
    -201051;
pub const DAQmxErrorSCCCarrierSpecdIsMissing: ::std::os::raw::c_int = -201050;
pub const DAQmxErrorIncapableSCCDigitizingDeviceSpecd: ::std::os::raw::c_int =
    -201049;
pub const DAQmxErrorAccessorySettingNotApplicable: ::std::os::raw::c_int =
    -201048;
pub const DAQmxErrorDeviceAndConnectorSpecdAlreadyOccupied:
          ::std::os::raw::c_int =
    -201047;
pub const DAQmxErrorIllegalAccessoryTypeForDeviceSpecd: ::std::os::raw::c_int
          =
    -201046;
pub const DAQmxErrorInvalidDeviceConnectorNumberSpecd: ::std::os::raw::c_int =
    -201045;
pub const DAQmxErrorInvalidAccessoryName: ::std::os::raw::c_int = -201044;
pub const DAQmxErrorMoreThanOneMatchForSpecdDevice: ::std::os::raw::c_int =
    -201043;
pub const DAQmxErrorNoMatchForSpecdDevice: ::std::os::raw::c_int = -201042;
pub const DAQmxErrorProductTypeAndProductNumberConflict: ::std::os::raw::c_int
          =
    -201041;
pub const DAQmxErrorExtraPropertyDetectedInSpecdObject: ::std::os::raw::c_int
          =
    -201040;
pub const DAQmxErrorRequiredPropertyMissing: ::std::os::raw::c_int = -201039;
pub const DAQmxErrorCantSetAuthorForLocalChan: ::std::os::raw::c_int =
    -201038;
pub const DAQmxErrorInvalidTimeValue: ::std::os::raw::c_int = -201037;
pub const DAQmxErrorInvalidTimeFormat: ::std::os::raw::c_int = -201036;
pub const DAQmxErrorDigDevChansSpecdInModeOtherThanParallel:
          ::std::os::raw::c_int =
    -201035;
pub const DAQmxErrorCascadeDigitizationModeNotSupported: ::std::os::raw::c_int
          =
    -201034;
pub const DAQmxErrorSpecdSlotAlreadyOccupied: ::std::os::raw::c_int = -201033;
pub const DAQmxErrorInvalidSCXISlotNumberSpecd: ::std::os::raw::c_int =
    -201032;
pub const DAQmxErrorAddressAlreadyInUse: ::std::os::raw::c_int = -201031;
pub const DAQmxErrorSpecdDeviceDoesNotSupportRTSI: ::std::os::raw::c_int =
    -201030;
pub const DAQmxErrorSpecdDeviceIsAlreadyOnRTSIBus: ::std::os::raw::c_int =
    -201029;
pub const DAQmxErrorIdentifierInUse: ::std::os::raw::c_int = -201028;
pub const DAQmxErrorWaitForNextSampleClockOrReadDetected3OrMoreMissedSampClks:
          ::std::os::raw::c_int =
    -201027;
pub const DAQmxErrorHWTimedAndDataXferPIO: ::std::os::raw::c_int = -201026;
pub const DAQmxErrorNonBufferedAndHWTimed: ::std::os::raw::c_int = -201025;
pub const DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriodPolled:
          ::std::os::raw::c_int =
    -201024;
pub const DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod2:
          ::std::os::raw::c_int =
    -201023;
pub const DAQmxErrorCOCannotKeepUpInHWTimedSinglePointPolled:
          ::std::os::raw::c_int =
    -201022;
pub const DAQmxErrorWriteRecoveryCannotKeepUpInHWTimedSinglePoint:
          ::std::os::raw::c_int =
    -201021;
pub const DAQmxErrorNoChangeDetectionOnSelectedLineForDevice:
          ::std::os::raw::c_int =
    -201020;
pub const DAQmxErrorSMIOPauseTriggersNotSupportedWithChannelExpansion:
          ::std::os::raw::c_int =
    -201019;
pub const DAQmxErrorClockMasterForExternalClockNotLongestPipeline:
          ::std::os::raw::c_int =
    -201018;
pub const DAQmxErrorUnsupportedUnicodeByteOrderMarker: ::std::os::raw::c_int =
    -201017;
pub const DAQmxErrorTooManyInstructionsInLoopInScript: ::std::os::raw::c_int =
    -201016;
pub const DAQmxErrorPLLNotLocked: ::std::os::raw::c_int = -201015;
pub const DAQmxErrorIfElseBlockNotAllowedInFiniteRepeatLoopInScript:
          ::std::os::raw::c_int =
    -201014;
pub const DAQmxErrorIfElseBlockNotAllowedInConditionalRepeatLoopInScript:
          ::std::os::raw::c_int =
    -201013;
pub const DAQmxErrorClearIsLastInstructionInIfElseBlockInScript:
          ::std::os::raw::c_int =
    -201012;
pub const DAQmxErrorInvalidWaitDurationBeforeIfElseBlockInScript:
          ::std::os::raw::c_int =
    -201011;
pub const DAQmxErrorMarkerPosInvalidBeforeIfElseBlockInScript:
          ::std::os::raw::c_int =
    -201010;
pub const DAQmxErrorInvalidSubsetLengthBeforeIfElseBlockInScript:
          ::std::os::raw::c_int =
    -201009;
pub const DAQmxErrorInvalidWaveformLengthBeforeIfElseBlockInScript:
          ::std::os::raw::c_int =
    -201008;
pub const DAQmxErrorGenerateOrFiniteWaitInstructionExpectedBeforeIfElseBlockInScript:
          ::std::os::raw::c_int =
    -201007;
pub const DAQmxErrorCalPasswordNotSupported: ::std::os::raw::c_int = -201006;
pub const DAQmxErrorSetupCalNeededBeforeAdjustCal: ::std::os::raw::c_int =
    -201005;
pub const DAQmxErrorMultipleChansNotSupportedDuringCalSetup:
          ::std::os::raw::c_int =
    -201004;
pub const DAQmxErrorDevCannotBeAccessed: ::std::os::raw::c_int = -201003;
pub const DAQmxErrorSampClkRateDoesntMatchSampClkSrc: ::std::os::raw::c_int =
    -201002;
pub const DAQmxErrorSampClkRateNotSupportedWithEARDisabled:
          ::std::os::raw::c_int =
    -201001;
pub const DAQmxErrorLabVIEWVersionDoesntSupportDAQmxEvents:
          ::std::os::raw::c_int =
    -201000;
pub const DAQmxErrorCOReadyForNewValNotSupportedWithOnDemand:
          ::std::os::raw::c_int =
    -200999;
pub const DAQmxErrorCIHWTimedSinglePointNotSupportedForMeasType:
          ::std::os::raw::c_int =
    -200998;
pub const DAQmxErrorOnDemandNotSupportedWithHWTimedSinglePoint:
          ::std::os::raw::c_int =
    -200997;
pub const DAQmxErrorHWTimedSinglePointAndDataXferNotProgIO:
          ::std::os::raw::c_int =
    -200996;
pub const DAQmxErrorMemMapAndHWTimedSinglePoint: ::std::os::raw::c_int =
    -200995;
pub const DAQmxErrorCannotSetPropertyWhenHWTimedSinglePointTaskIsRunning:
          ::std::os::raw::c_int =
    -200994;
pub const DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod:
          ::std::os::raw::c_int =
    -200993;
pub const DAQmxErrorTooManyEventsGenerated: ::std::os::raw::c_int = -200992;
pub const DAQmxErrorMStudioCppRemoveEventsBeforeStop: ::std::os::raw::c_int =
    -200991;
pub const DAQmxErrorCAPICannotRegisterSyncEventsFromMultipleThreads:
          ::std::os::raw::c_int =
    -200990;
pub const DAQmxErrorReadWaitNextSampClkWaitMismatchTwo: ::std::os::raw::c_int
          =
    -200989;
pub const DAQmxErrorReadWaitNextSampClkWaitMismatchOne: ::std::os::raw::c_int
          =
    -200988;
pub const DAQmxErrorDAQmxSignalEventTypeNotSupportedByChanTypesOrDevicesInTask:
          ::std::os::raw::c_int =
    -200987;
pub const DAQmxErrorCannotUnregisterDAQmxSoftwareEventWhileTaskIsRunning:
          ::std::os::raw::c_int =
    -200986;
pub const DAQmxErrorAutoStartWriteNotAllowedEventRegistered:
          ::std::os::raw::c_int =
    -200985;
pub const DAQmxErrorAutoStartReadNotAllowedEventRegistered:
          ::std::os::raw::c_int =
    -200984;
pub const DAQmxErrorCannotGetPropertyWhenTaskNotReservedCommittedOrRunning:
          ::std::os::raw::c_int =
    -200983;
pub const DAQmxErrorSignalEventsNotSupportedByDevice: ::std::os::raw::c_int =
    -200982;
pub const DAQmxErrorEveryNSamplesAcqIntoBufferEventNotSupportedByDevice:
          ::std::os::raw::c_int =
    -200981;
pub const DAQmxErrorEveryNSampsTransferredFromBufferEventNotSupportedByDevice:
          ::std::os::raw::c_int =
    -200980;
pub const DAQmxErrorCAPISyncEventsTaskStateChangeNotAllowedFromDifferentThread:
          ::std::os::raw::c_int =
    -200979;
pub const DAQmxErrorDAQmxSWEventsWithDifferentCallMechanisms:
          ::std::os::raw::c_int =
    -200978;
pub const DAQmxErrorCantSaveChanWithPolyCalScaleAndAllowInteractiveEdit:
          ::std::os::raw::c_int =
    -200977;
pub const DAQmxErrorChanDoesNotSupportCJC: ::std::os::raw::c_int = -200976;
pub const DAQmxErrorCOReadyForNewValNotSupportedWithHWTimedSinglePoint:
          ::std::os::raw::c_int =
    -200975;
pub const DAQmxErrorDACAllowConnToGndNotSupportedByDevWhenRefSrcExt:
          ::std::os::raw::c_int =
    -200974;
pub const DAQmxErrorCantGetPropertyTaskNotRunning: ::std::os::raw::c_int =
    -200973;
pub const DAQmxErrorCantSetPropertyTaskNotRunning: ::std::os::raw::c_int =
    -200972;
pub const DAQmxErrorCantSetPropertyTaskNotRunningCommitted:
          ::std::os::raw::c_int =
    -200971;
pub const DAQmxErrorAIEveryNSampsEventIntervalNotMultipleOf2:
          ::std::os::raw::c_int =
    -200970;
pub const DAQmxErrorInvalidTEDSPhysChanNotAI: ::std::os::raw::c_int = -200969;
pub const DAQmxErrorCAPICannotPerformTaskOperationInAsyncCallback:
          ::std::os::raw::c_int =
    -200968;
pub const DAQmxErrorEveryNSampsTransferredFromBufferEventAlreadyRegistered:
          ::std::os::raw::c_int =
    -200967;
pub const DAQmxErrorEveryNSampsAcqIntoBufferEventAlreadyRegistered:
          ::std::os::raw::c_int =
    -200966;
pub const DAQmxErrorEveryNSampsTransferredFromBufferNotForInput:
          ::std::os::raw::c_int =
    -200965;
pub const DAQmxErrorEveryNSampsAcqIntoBufferNotForOutput:
          ::std::os::raw::c_int =
    -200964;
pub const DAQmxErrorAOSampTimingTypeDifferentIn2Tasks: ::std::os::raw::c_int =
    -200963;
pub const DAQmxErrorCouldNotDownloadFirmwareHWDamaged: ::std::os::raw::c_int =
    -200962;
pub const DAQmxErrorCouldNotDownloadFirmwareFileMissingOrDamaged:
          ::std::os::raw::c_int =
    -200961;
pub const DAQmxErrorCannotRegisterDAQmxSoftwareEventWhileTaskIsRunning:
          ::std::os::raw::c_int =
    -200960;
pub const DAQmxErrorDifferentRawDataCompression: ::std::os::raw::c_int =
    -200959;
pub const DAQmxErrorConfiguredTEDSInterfaceDevNotDetected:
          ::std::os::raw::c_int =
    -200958;
pub const DAQmxErrorCompressedSampSizeExceedsResolution: ::std::os::raw::c_int
          =
    -200957;
pub const DAQmxErrorChanDoesNotSupportCompression: ::std::os::raw::c_int =
    -200956;
pub const DAQmxErrorDifferentRawDataFormats: ::std::os::raw::c_int = -200955;
pub const DAQmxErrorSampClkOutputTermIncludesStartTrigSrc:
          ::std::os::raw::c_int =
    -200954;
pub const DAQmxErrorStartTrigSrcEqualToSampClkSrc: ::std::os::raw::c_int =
    -200953;
pub const DAQmxErrorEventOutputTermIncludesTrigSrc: ::std::os::raw::c_int =
    -200952;
pub const DAQmxErrorCOMultipleWritesBetweenSampClks: ::std::os::raw::c_int =
    -200951;
pub const DAQmxErrorDoneEventAlreadyRegistered: ::std::os::raw::c_int =
    -200950;
pub const DAQmxErrorSignalEventAlreadyRegistered: ::std::os::raw::c_int =
    -200949;
pub const DAQmxErrorCannotHaveTimedLoopAndDAQmxSignalEventsInSameTask:
          ::std::os::raw::c_int =
    -200948;
pub const DAQmxErrorNeedLabVIEW711PatchToUseDAQmxEvents: ::std::os::raw::c_int
          =
    -200947;
pub const DAQmxErrorStartFailedDueToWriteFailure: ::std::os::raw::c_int =
    -200946;
pub const DAQmxErrorDataXferCustomThresholdNotDMAXferMethodSpecifiedForDev:
          ::std::os::raw::c_int =
    -200945;
pub const DAQmxErrorDataXferRequestConditionNotSpecifiedForCustomThreshold:
          ::std::os::raw::c_int =
    -200944;
pub const DAQmxErrorDataXferCustomThresholdNotSpecified: ::std::os::raw::c_int
          =
    -200943;
pub const DAQmxErrorCAPISyncCallbackNotSupportedOnThisPlatform:
          ::std::os::raw::c_int =
    -200942;
pub const DAQmxErrorCalChanReversePolyCoefNotSpecd: ::std::os::raw::c_int =
    -200941;
pub const DAQmxErrorCalChanForwardPolyCoefNotSpecd: ::std::os::raw::c_int =
    -200940;
pub const DAQmxErrorChanCalRepeatedNumberInPreScaledVals:
          ::std::os::raw::c_int =
    -200939;
pub const DAQmxErrorChanCalTableNumScaledNotEqualNumPrescaledVals:
          ::std::os::raw::c_int =
    -200938;
pub const DAQmxErrorChanCalTableScaledValsNotSpecd: ::std::os::raw::c_int =
    -200937;
pub const DAQmxErrorChanCalTablePreScaledValsNotSpecd: ::std::os::raw::c_int =
    -200936;
pub const DAQmxErrorChanCalScaleTypeNotSet: ::std::os::raw::c_int = -200935;
pub const DAQmxErrorChanCalExpired: ::std::os::raw::c_int = -200934;
pub const DAQmxErrorChanCalExpirationDateNotSet: ::std::os::raw::c_int =
    -200933;
pub const DAQmxError3OutputPortCombinationGivenSampTimingType653x:
          ::std::os::raw::c_int =
    -200932;
pub const DAQmxError3InputPortCombinationGivenSampTimingType653x:
          ::std::os::raw::c_int =
    -200931;
pub const DAQmxError2OutputPortCombinationGivenSampTimingType653x:
          ::std::os::raw::c_int =
    -200930;
pub const DAQmxError2InputPortCombinationGivenSampTimingType653x:
          ::std::os::raw::c_int =
    -200929;
pub const DAQmxErrorPatternMatcherMayBeUsedByOneTrigOnly:
          ::std::os::raw::c_int =
    -200928;
pub const DAQmxErrorNoChansSpecdForPatternSource: ::std::os::raw::c_int =
    -200927;
pub const DAQmxErrorChangeDetectionChanNotInTask: ::std::os::raw::c_int =
    -200926;
pub const DAQmxErrorChangeDetectionChanNotTristated: ::std::os::raw::c_int =
    -200925;
pub const DAQmxErrorWaitModeValueNotSupportedNonBuffered:
          ::std::os::raw::c_int =
    -200924;
pub const DAQmxErrorWaitModePropertyNotSupportedNonBuffered:
          ::std::os::raw::c_int =
    -200923;
pub const DAQmxErrorCantSavePerLineConfigDigChanSoInteractiveEditsAllowed:
          ::std::os::raw::c_int =
    -200922;
pub const DAQmxErrorCantSaveNonPortMultiLineDigChanSoInteractiveEditsAllowed:
          ::std::os::raw::c_int =
    -200921;
pub const DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalNoIrqOnDev:
          ::std::os::raw::c_int =
    -200920;
pub const DAQmxErrorGlobalTaskNameAlreadyChanName: ::std::os::raw::c_int =
    -200919;
pub const DAQmxErrorGlobalChanNameAlreadyTaskName: ::std::os::raw::c_int =
    -200918;
pub const DAQmxErrorAOEveryNSampsEventIntervalNotMultipleOf2:
          ::std::os::raw::c_int =
    -200917;
pub const DAQmxErrorSampleTimebaseDivisorNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200916;
pub const DAQmxErrorHandshakeEventOutputTermNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200915;
pub const DAQmxErrorChangeDetectionOutputTermNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200914;
pub const DAQmxErrorReadyForTransferOutputTermNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200913;
pub const DAQmxErrorRefTrigOutputTermNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200912;
pub const DAQmxErrorStartTrigOutputTermNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200911;
pub const DAQmxErrorSampClockOutputTermNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200910;
pub const DAQmxError20MhzTimebaseNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200909;
pub const DAQmxErrorSampClockSourceNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200908;
pub const DAQmxErrorRefTrigTypeNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200907;
pub const DAQmxErrorPauseTrigTypeNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200906;
pub const DAQmxErrorHandshakeTrigTypeNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200905;
pub const DAQmxErrorStartTrigTypeNotSupportedGivenTimingType:
          ::std::os::raw::c_int =
    -200904;
pub const DAQmxErrorRefClkSrcNotSupported: ::std::os::raw::c_int = -200903;
pub const DAQmxErrorDataVoltageLowAndHighIncompatible: ::std::os::raw::c_int =
    -200902;
pub const DAQmxErrorInvalidCharInDigPatternString: ::std::os::raw::c_int =
    -200901;
pub const DAQmxErrorCantUsePort3AloneGivenSampTimingTypeOn653x:
          ::std::os::raw::c_int =
    -200900;
pub const DAQmxErrorCantUsePort1AloneGivenSampTimingTypeOn653x:
          ::std::os::raw::c_int =
    -200899;
pub const DAQmxErrorPartialUseOfPhysicalLinesWithinPortNotSupported653x:
          ::std::os::raw::c_int =
    -200898;
pub const DAQmxErrorPhysicalChanNotSupportedGivenSampTimingType653x:
          ::std::os::raw::c_int =
    -200897;
pub const DAQmxErrorCanExportOnlyDigEdgeTrigs: ::std::os::raw::c_int =
    -200896;
pub const DAQmxErrorRefTrigDigPatternSizeDoesNotMatchSourceSize:
          ::std::os::raw::c_int =
    -200895;
pub const DAQmxErrorStartTrigDigPatternSizeDoesNotMatchSourceSize:
          ::std::os::raw::c_int =
    -200894;
pub const DAQmxErrorChangeDetectionRisingAndFallingEdgeChanDontMatch:
          ::std::os::raw::c_int =
    -200893;
pub const DAQmxErrorPhysicalChansForChangeDetectionAndPatternMatch653x:
          ::std::os::raw::c_int =
    -200892;
pub const DAQmxErrorCanExportOnlyOnboardSampClk: ::std::os::raw::c_int =
    -200891;
pub const DAQmxErrorInternalSampClkNotRisingEdge: ::std::os::raw::c_int =
    -200890;
pub const DAQmxErrorRefTrigDigPatternChanNotInTask: ::std::os::raw::c_int =
    -200889;
pub const DAQmxErrorRefTrigDigPatternChanNotTristated: ::std::os::raw::c_int =
    -200888;
pub const DAQmxErrorStartTrigDigPatternChanNotInTask: ::std::os::raw::c_int =
    -200887;
pub const DAQmxErrorStartTrigDigPatternChanNotTristated: ::std::os::raw::c_int
          =
    -200886;
pub const DAQmxErrorPXIStarAndClock10Sync: ::std::os::raw::c_int = -200885;
pub const DAQmxErrorGlobalChanCannotBeSavedSoInteractiveEditsAllowed:
          ::std::os::raw::c_int =
    -200884;
pub const DAQmxErrorTaskCannotBeSavedSoInteractiveEditsAllowed:
          ::std::os::raw::c_int =
    -200883;
pub const DAQmxErrorInvalidGlobalChan: ::std::os::raw::c_int = -200882;
pub const DAQmxErrorEveryNSampsEventAlreadyRegistered: ::std::os::raw::c_int =
    -200881;
pub const DAQmxErrorEveryNSampsEventIntervalZeroNotSupported:
          ::std::os::raw::c_int =
    -200880;
pub const DAQmxErrorChanSizeTooBigForU16PortWrite: ::std::os::raw::c_int =
    -200879;
pub const DAQmxErrorChanSizeTooBigForU16PortRead: ::std::os::raw::c_int =
    -200878;
pub const DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalWhenDMA:
          ::std::os::raw::c_int =
    -200877;
pub const DAQmxErrorWriteWhenTaskNotRunningCOTicks: ::std::os::raw::c_int =
    -200876;
pub const DAQmxErrorWriteWhenTaskNotRunningCOFreq: ::std::os::raw::c_int =
    -200875;
pub const DAQmxErrorWriteWhenTaskNotRunningCOTime: ::std::os::raw::c_int =
    -200874;
pub const DAQmxErrorAOMinMaxNotSupportedDACRangeTooSmall:
          ::std::os::raw::c_int =
    -200873;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACRange: ::std::os::raw::c_int =
    -200872;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACRangeAndOffsetVal:
          ::std::os::raw::c_int =
    -200871;
pub const DAQmxErrorAOMinMaxNotSupportedDACOffsetValInappropriate:
          ::std::os::raw::c_int =
    -200870;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACOffsetVal:
          ::std::os::raw::c_int =
    -200869;
pub const DAQmxErrorAOMinMaxNotSupportedDACRefValTooSmall:
          ::std::os::raw::c_int =
    -200868;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACRefVal: ::std::os::raw::c_int
          =
    -200867;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACRefAndOffsetVal:
          ::std::os::raw::c_int =
    -200866;
pub const DAQmxErrorWhenAcqCompAndNumSampsPerChanExceedsOnBrdBufSize:
          ::std::os::raw::c_int =
    -200865;
pub const DAQmxErrorWhenAcqCompAndNoRefTrig: ::std::os::raw::c_int = -200864;
pub const DAQmxErrorWaitForNextSampClkNotSupported: ::std::os::raw::c_int =
    -200863;
pub const DAQmxErrorDevInUnidentifiedPXIChassis: ::std::os::raw::c_int =
    -200862;
pub const DAQmxErrorMaxSoundPressureMicSensitivitRelatedAIPropertiesNotSupportedByDev:
          ::std::os::raw::c_int =
    -200861;
pub const DAQmxErrorMaxSoundPressureAndMicSensitivityNotSupportedByDev:
          ::std::os::raw::c_int =
    -200860;
pub const DAQmxErrorAOBufferSizeZeroForSampClkTimingType:
          ::std::os::raw::c_int =
    -200859;
pub const DAQmxErrorAOCallWriteBeforeStartForSampClkTimingType:
          ::std::os::raw::c_int =
    -200858;
pub const DAQmxErrorInvalidCalLowPassCutoffFreq: ::std::os::raw::c_int =
    -200857;
pub const DAQmxErrorSimulationCannotBeDisabledForDevCreatedAsSimulatedDev:
          ::std::os::raw::c_int =
    -200856;
pub const DAQmxErrorCannotAddNewDevsAfterTaskConfiguration:
          ::std::os::raw::c_int =
    -200855;
pub const DAQmxErrorDifftSyncPulseSrcAndSampClkTimebaseSrcDevMultiDevTask:
          ::std::os::raw::c_int =
    -200854;
pub const DAQmxErrorTermWithoutDevInMultiDevTask: ::std::os::raw::c_int =
    -200853;
pub const DAQmxErrorSyncNoDevSampClkTimebaseOrSyncPulseInPXISlot2:
          ::std::os::raw::c_int =
    -200852;
pub const DAQmxErrorPhysicalChanNotOnThisConnector: ::std::os::raw::c_int =
    -200851;
pub const DAQmxErrorNumSampsToWaitNotGreaterThanZeroInScript:
          ::std::os::raw::c_int =
    -200850;
pub const DAQmxErrorNumSampsToWaitNotMultipleOfAlignmentQuantumInScript:
          ::std::os::raw::c_int =
    -200849;
pub const DAQmxErrorEveryNSamplesEventNotSupportedForNonBufferedTasks:
          ::std::os::raw::c_int =
    -200848;
pub const DAQmxErrorBufferedAndDataXferPIO: ::std::os::raw::c_int = -200847;
pub const DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunning:
          ::std::os::raw::c_int =
    -200846;
pub const DAQmxErrorNonBufferedAndDataXferInterrupts: ::std::os::raw::c_int =
    -200845;
pub const DAQmxErrorWriteFailedMultipleCtrsWithFREQOUT: ::std::os::raw::c_int
          =
    -200844;
pub const DAQmxErrorReadNotCompleteBefore3SampClkEdges: ::std::os::raw::c_int
          =
    -200843;
pub const DAQmxErrorCtrHWTimedSinglePointAndDataXferNotProgIO:
          ::std::os::raw::c_int =
    -200842;
pub const DAQmxErrorPrescalerNot1ForInputTerminal: ::std::os::raw::c_int =
    -200841;
pub const DAQmxErrorPrescalerNot1ForTimebaseSrc: ::std::os::raw::c_int =
    -200840;
pub const DAQmxErrorSampClkTimingTypeWhenTristateIsFalse:
          ::std::os::raw::c_int =
    -200839;
pub const DAQmxErrorOutputBufferSizeNotMultOfXferSize: ::std::os::raw::c_int =
    -200838;
pub const DAQmxErrorSampPerChanNotMultOfXferSize: ::std::os::raw::c_int =
    -200837;
pub const DAQmxErrorWriteToTEDSFailed: ::std::os::raw::c_int = -200836;
pub const DAQmxErrorSCXIDevNotUsablePowerTurnedOff: ::std::os::raw::c_int =
    -200835;
pub const DAQmxErrorCannotReadWhenAutoStartFalseBufSizeZeroAndTaskNotRunning:
          ::std::os::raw::c_int =
    -200834;
pub const DAQmxErrorCannotReadWhenAutoStartFalseHWTimedSinglePtAndTaskNotRunning:
          ::std::os::raw::c_int =
    -200833;
pub const DAQmxErrorCannotReadWhenAutoStartFalseOnDemandAndTaskNotRunning:
          ::std::os::raw::c_int =
    -200832;
pub const DAQmxErrorSimultaneousAOWhenNotOnDemandTiming: ::std::os::raw::c_int
          =
    -200831;
pub const DAQmxErrorMemMapAndSimultaneousAO: ::std::os::raw::c_int = -200830;
pub const DAQmxErrorWriteFailedMultipleCOOutputTypes: ::std::os::raw::c_int =
    -200829;
pub const DAQmxErrorWriteToTEDSNotSupportedOnRT: ::std::os::raw::c_int =
    -200828;
pub const DAQmxErrorVirtualTEDSDataFileError: ::std::os::raw::c_int = -200827;
pub const DAQmxErrorTEDSSensorDataError: ::std::os::raw::c_int = -200826;
pub const DAQmxErrorDataSizeMoreThanSizeOfEEPROMOnTEDS: ::std::os::raw::c_int
          =
    -200825;
pub const DAQmxErrorPROMOnTEDSContainsBasicTEDSData: ::std::os::raw::c_int =
    -200824;
pub const DAQmxErrorPROMOnTEDSAlreadyWritten: ::std::os::raw::c_int = -200823;
pub const DAQmxErrorTEDSDoesNotContainPROM: ::std::os::raw::c_int = -200822;
pub const DAQmxErrorHWTimedSinglePointNotSupportedAI: ::std::os::raw::c_int =
    -200821;
pub const DAQmxErrorHWTimedSinglePointOddNumChansInAITask:
          ::std::os::raw::c_int =
    -200820;
pub const DAQmxErrorCantUseOnlyOnBoardMemWithProgrammedIO:
          ::std::os::raw::c_int =
    -200819;
pub const DAQmxErrorSwitchDevShutDownDueToHighTemp: ::std::os::raw::c_int =
    -200818;
pub const DAQmxErrorExcitationNotSupportedWhenTermCfgDiff:
          ::std::os::raw::c_int =
    -200817;
pub const DAQmxErrorTEDSMinElecValGEMaxElecVal: ::std::os::raw::c_int =
    -200816;
pub const DAQmxErrorTEDSMinPhysValGEMaxPhysVal: ::std::os::raw::c_int =
    -200815;
pub const DAQmxErrorCIOnboardClockNotSupportedAsInputTerm:
          ::std::os::raw::c_int =
    -200814;
pub const DAQmxErrorInvalidSampModeForPositionMeas: ::std::os::raw::c_int =
    -200813;
pub const DAQmxErrorTrigWhenAOHWTimedSinglePtSampMode: ::std::os::raw::c_int =
    -200812;
pub const DAQmxErrorDAQmxCantUseStringDueToUnknownChar: ::std::os::raw::c_int
          =
    -200811;
pub const DAQmxErrorDAQmxCantRetrieveStringDueToUnknownChar:
          ::std::os::raw::c_int =
    -200810;
pub const DAQmxErrorClearTEDSNotSupportedOnRT: ::std::os::raw::c_int =
    -200809;
pub const DAQmxErrorCfgTEDSNotSupportedOnRT: ::std::os::raw::c_int = -200808;
pub const DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthBySameTask1PerDev:
          ::std::os::raw::c_int =
    -200807;
pub const DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthByAnotherTask1PerDev:
          ::std::os::raw::c_int =
    -200806;
pub const DAQmxErrorNoLastExtCalDateTimeLastExtCalNotDAQmx:
          ::std::os::raw::c_int =
    -200804;
pub const DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandHWTimedSglPt:
          ::std::os::raw::c_int =
    -200803;
pub const DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandBufSizeZero:
          ::std::os::raw::c_int =
    -200802;
pub const DAQmxErrorCOInvalidTimingSrcDueToSignal: ::std::os::raw::c_int =
    -200801;
pub const DAQmxErrorCIInvalidTimingSrcForSampClkDueToSampTimingType:
          ::std::os::raw::c_int =
    -200800;
pub const DAQmxErrorCIInvalidTimingSrcForEventCntDueToSampMode:
          ::std::os::raw::c_int =
    -200799;
pub const DAQmxErrorNoChangeDetectOnNonInputDigLineForDev:
          ::std::os::raw::c_int =
    -200798;
pub const DAQmxErrorEmptyStringTermNameNotSupported: ::std::os::raw::c_int =
    -200797;
pub const DAQmxErrorMemMapEnabledForHWTimedNonBufferedAO:
          ::std::os::raw::c_int =
    -200796;
pub const DAQmxErrorDevOnboardMemOverflowDuringHWTimedNonBufferedGen:
          ::std::os::raw::c_int =
    -200795;
pub const DAQmxErrorCODAQmxWriteMultipleChans: ::std::os::raw::c_int =
    -200794;
pub const DAQmxErrorCantMaintainExistingValueAOSync: ::std::os::raw::c_int =
    -200793;
pub const DAQmxErrorMStudioMultiplePhysChansNotSupported:
          ::std::os::raw::c_int =
    -200792;
pub const DAQmxErrorCantConfigureTEDSForChan: ::std::os::raw::c_int = -200791;
pub const DAQmxErrorWriteDataTypeTooSmall: ::std::os::raw::c_int = -200790;
pub const DAQmxErrorReadDataTypeTooSmall: ::std::os::raw::c_int = -200789;
pub const DAQmxErrorMeasuredBridgeOffsetTooHigh: ::std::os::raw::c_int =
    -200788;
pub const DAQmxErrorStartTrigConflictWithCOHWTimedSinglePt:
          ::std::os::raw::c_int =
    -200787;
pub const DAQmxErrorSampClkRateExtSampClkTimebaseRateMismatch:
          ::std::os::raw::c_int =
    -200786;
pub const DAQmxErrorInvalidTimingSrcDueToSampTimingType: ::std::os::raw::c_int
          =
    -200785;
pub const DAQmxErrorVirtualTEDSFileNotFound: ::std::os::raw::c_int = -200784;
pub const DAQmxErrorMStudioNoForwardPolyScaleCoeffs: ::std::os::raw::c_int =
    -200783;
pub const DAQmxErrorMStudioNoReversePolyScaleCoeffs: ::std::os::raw::c_int =
    -200782;
pub const DAQmxErrorMStudioNoPolyScaleCoeffsUseCalc: ::std::os::raw::c_int =
    -200781;
pub const DAQmxErrorMStudioNoForwardPolyScaleCoeffsUseCalc:
          ::std::os::raw::c_int =
    -200780;
pub const DAQmxErrorMStudioNoReversePolyScaleCoeffsUseCalc:
          ::std::os::raw::c_int =
    -200779;
pub const DAQmxErrorCOSampModeSampTimingTypeSampClkConflict:
          ::std::os::raw::c_int =
    -200778;
pub const DAQmxErrorDevCannotProduceMinPulseWidth: ::std::os::raw::c_int =
    -200777;
pub const DAQmxErrorCannotProduceMinPulseWidthGivenPropertyValues:
          ::std::os::raw::c_int =
    -200776;
pub const DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherTask:
          ::std::os::raw::c_int =
    -200775;
pub const DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherProperty:
          ::std::os::raw::c_int =
    -200774;
pub const DAQmxErrorDigSyncNotAvailableOnTerm: ::std::os::raw::c_int =
    -200773;
pub const DAQmxErrorDigFilterNotAvailableOnTerm: ::std::os::raw::c_int =
    -200772;
pub const DAQmxErrorDigFilterEnabledMinPulseWidthNotCfg: ::std::os::raw::c_int
          =
    -200771;
pub const DAQmxErrorDigFilterAndSyncBothEnabled: ::std::os::raw::c_int =
    -200770;
pub const DAQmxErrorHWTimedSinglePointAOAndDataXferNotProgIO:
          ::std::os::raw::c_int =
    -200769;
pub const DAQmxErrorNonBufferedAOAndDataXferNotProgIO: ::std::os::raw::c_int =
    -200768;
pub const DAQmxErrorProgIODataXferForBufferedAO: ::std::os::raw::c_int =
    -200767;
pub const DAQmxErrorTEDSLegacyTemplateIDInvalidOrUnsupported:
          ::std::os::raw::c_int =
    -200766;
pub const DAQmxErrorTEDSMappingMethodInvalidOrUnsupported:
          ::std::os::raw::c_int =
    -200765;
pub const DAQmxErrorTEDSLinearMappingSlopeZero: ::std::os::raw::c_int =
    -200764;
pub const DAQmxErrorAIInputBufferSizeNotMultOfXferSize: ::std::os::raw::c_int
          =
    -200763;
pub const DAQmxErrorNoSyncPulseExtSampClkTimebase: ::std::os::raw::c_int =
    -200762;
pub const DAQmxErrorNoSyncPulseAnotherTaskRunning: ::std::os::raw::c_int =
    -200761;
pub const DAQmxErrorAOMinMaxNotInGainRange: ::std::os::raw::c_int = -200760;
pub const DAQmxErrorAOMinMaxNotInDACRange: ::std::os::raw::c_int = -200759;
pub const DAQmxErrorDevOnlySupportsSampClkTimingAO: ::std::os::raw::c_int =
    -200758;
pub const DAQmxErrorDevOnlySupportsSampClkTimingAI: ::std::os::raw::c_int =
    -200757;
pub const DAQmxErrorTEDSIncompatibleSensorAndMeasType: ::std::os::raw::c_int =
    -200756;
pub const DAQmxErrorTEDSMultipleCalTemplatesNotSupported:
          ::std::os::raw::c_int =
    -200755;
pub const DAQmxErrorTEDSTemplateParametersNotSupported: ::std::os::raw::c_int
          =
    -200754;
pub const DAQmxErrorParsingTEDSData: ::std::os::raw::c_int = -200753;
pub const DAQmxErrorMultipleActivePhysChansNotSupported: ::std::os::raw::c_int
          =
    -200752;
pub const DAQmxErrorNoChansSpecdForChangeDetect: ::std::os::raw::c_int =
    -200751;
pub const DAQmxErrorInvalidCalVoltageForGivenGain: ::std::os::raw::c_int =
    -200750;
pub const DAQmxErrorInvalidCalGain: ::std::os::raw::c_int = -200749;
pub const DAQmxErrorMultipleWritesBetweenSampClks: ::std::os::raw::c_int =
    -200748;
pub const DAQmxErrorInvalidAcqTypeForFREQOUT: ::std::os::raw::c_int = -200747;
pub const DAQmxErrorSuitableTimebaseNotFoundTimeCombo2: ::std::os::raw::c_int
          =
    -200746;
pub const DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo2:
          ::std::os::raw::c_int =
    -200745;
pub const DAQmxErrorRefClkRateRefClkSrcMismatch: ::std::os::raw::c_int =
    -200744;
pub const DAQmxErrorNoTEDSTerminalBlock: ::std::os::raw::c_int = -200743;
pub const DAQmxErrorCorruptedTEDSMemory: ::std::os::raw::c_int = -200742;
pub const DAQmxErrorTEDSNotSupported: ::std::os::raw::c_int = -200741;
pub const DAQmxErrorTimingSrcTaskStartedBeforeTimedLoop: ::std::os::raw::c_int
          =
    -200740;
pub const DAQmxErrorPropertyNotSupportedForTimingSrc: ::std::os::raw::c_int =
    -200739;
pub const DAQmxErrorTimingSrcDoesNotExist: ::std::os::raw::c_int = -200738;
pub const DAQmxErrorInputBufferSizeNotEqualSampsPerChanForFiniteSampMode:
          ::std::os::raw::c_int =
    -200737;
pub const DAQmxErrorFREQOUTCannotProduceDesiredFrequency2:
          ::std::os::raw::c_int =
    -200736;
pub const DAQmxErrorExtRefClkRateNotSpecified: ::std::os::raw::c_int =
    -200735;
pub const DAQmxErrorDeviceDoesNotSupportDMADataXferForNonBufferedAcq:
          ::std::os::raw::c_int =
    -200734;
pub const DAQmxErrorDigFilterMinPulseWidthSetWhenTristateIsFalse:
          ::std::os::raw::c_int =
    -200733;
pub const DAQmxErrorDigFilterEnableSetWhenTristateIsFalse:
          ::std::os::raw::c_int =
    -200732;
pub const DAQmxErrorNoHWTimingWithOnDemand: ::std::os::raw::c_int = -200731;
pub const DAQmxErrorCannotDetectChangesWhenTristateIsFalse:
          ::std::os::raw::c_int =
    -200730;
pub const DAQmxErrorCannotHandshakeWhenTristateIsFalse: ::std::os::raw::c_int
          =
    -200729;
pub const DAQmxErrorLinesUsedForStaticInputNotForHandshakingControl:
          ::std::os::raw::c_int =
    -200728;
pub const DAQmxErrorLinesUsedForHandshakingControlNotForStaticInput:
          ::std::os::raw::c_int =
    -200727;
pub const DAQmxErrorLinesUsedForStaticInputNotForHandshakingInput:
          ::std::os::raw::c_int =
    -200726;
pub const DAQmxErrorLinesUsedForHandshakingInputNotForStaticInput:
          ::std::os::raw::c_int =
    -200725;
pub const DAQmxErrorDifferentDITristateValsForChansInTask:
          ::std::os::raw::c_int =
    -200724;
pub const DAQmxErrorTimebaseCalFreqVarianceTooLarge: ::std::os::raw::c_int =
    -200723;
pub const DAQmxErrorTimebaseCalFailedToConverge: ::std::os::raw::c_int =
    -200722;
pub const DAQmxErrorInadequateResolutionForTimebaseCal: ::std::os::raw::c_int
          =
    -200721;
pub const DAQmxErrorInvalidAOGainCalConst: ::std::os::raw::c_int = -200720;
pub const DAQmxErrorInvalidAOOffsetCalConst: ::std::os::raw::c_int = -200719;
pub const DAQmxErrorInvalidAIGainCalConst: ::std::os::raw::c_int = -200718;
pub const DAQmxErrorInvalidAIOffsetCalConst: ::std::os::raw::c_int = -200717;
pub const DAQmxErrorDigOutputOverrun: ::std::os::raw::c_int = -200716;
pub const DAQmxErrorDigInputOverrun: ::std::os::raw::c_int = -200715;
pub const DAQmxErrorAcqStoppedDriverCantXferDataFastEnough:
          ::std::os::raw::c_int =
    -200714;
pub const DAQmxErrorChansCantAppearInSameTask: ::std::os::raw::c_int =
    -200713;
pub const DAQmxErrorInputCfgFailedBecauseWatchdogExpired:
          ::std::os::raw::c_int =
    -200712;
pub const DAQmxErrorAnalogTrigChanNotExternal: ::std::os::raw::c_int =
    -200711;
pub const DAQmxErrorTooManyChansForInternalAIInputSrc: ::std::os::raw::c_int =
    -200710;
pub const DAQmxErrorTEDSSensorNotDetected: ::std::os::raw::c_int = -200709;
pub const DAQmxErrorPrptyGetSpecdActiveItemFailedDueToDifftValues:
          ::std::os::raw::c_int =
    -200708;
pub const DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2: ::std::os::raw::c_int
          =
    -200706;
pub const DAQmxErrorRoutingDestTermPXIStarXNotInSlot2: ::std::os::raw::c_int =
    -200705;
pub const DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2: ::std::os::raw::c_int =
    -200704;
pub const DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove:
          ::std::os::raw::c_int =
    -200703;
pub const DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove:
          ::std::os::raw::c_int =
    -200702;
pub const DAQmxErrorRoutingDestTermPXIStarInSlot2: ::std::os::raw::c_int =
    -200701;
pub const DAQmxErrorRoutingSrcTermPXIStarInSlot2: ::std::os::raw::c_int =
    -200700;
pub const DAQmxErrorRoutingDestTermPXIChassisNotIdentified:
          ::std::os::raw::c_int =
    -200699;
pub const DAQmxErrorRoutingSrcTermPXIChassisNotIdentified:
          ::std::os::raw::c_int =
    -200698;
pub const DAQmxErrorFailedToAcquireCalData: ::std::os::raw::c_int = -200697;
pub const DAQmxErrorBridgeOffsetNullingCalNotSupported: ::std::os::raw::c_int
          =
    -200696;
pub const DAQmxErrorAIMaxNotSpecified: ::std::os::raw::c_int = -200695;
pub const DAQmxErrorAIMinNotSpecified: ::std::os::raw::c_int = -200694;
pub const DAQmxErrorOddTotalBufferSizeToWrite: ::std::os::raw::c_int =
    -200693;
pub const DAQmxErrorOddTotalNumSampsToWrite: ::std::os::raw::c_int = -200692;
pub const DAQmxErrorBufferWithWaitMode: ::std::os::raw::c_int = -200691;
pub const DAQmxErrorBufferWithHWTimedSinglePointSampMode:
          ::std::os::raw::c_int =
    -200690;
pub const DAQmxErrorCOWritePulseLowTicksNotSupported: ::std::os::raw::c_int =
    -200689;
pub const DAQmxErrorCOWritePulseHighTicksNotSupported: ::std::os::raw::c_int =
    -200688;
pub const DAQmxErrorCOWritePulseLowTimeOutOfRange: ::std::os::raw::c_int =
    -200687;
pub const DAQmxErrorCOWritePulseHighTimeOutOfRange: ::std::os::raw::c_int =
    -200686;
pub const DAQmxErrorCOWriteFreqOutOfRange: ::std::os::raw::c_int = -200685;
pub const DAQmxErrorCOWriteDutyCycleOutOfRange: ::std::os::raw::c_int =
    -200684;
pub const DAQmxErrorInvalidInstallation: ::std::os::raw::c_int = -200683;
pub const DAQmxErrorRefTrigMasterSessionUnavailable: ::std::os::raw::c_int =
    -200682;
pub const DAQmxErrorRouteFailedBecauseWatchdogExpired: ::std::os::raw::c_int =
    -200681;
pub const DAQmxErrorDeviceShutDownDueToHighTemp: ::std::os::raw::c_int =
    -200680;
pub const DAQmxErrorNoMemMapWhenHWTimedSinglePoint: ::std::os::raw::c_int =
    -200679;
pub const DAQmxErrorWriteFailedBecauseWatchdogExpired: ::std::os::raw::c_int =
    -200678;
pub const DAQmxErrorDifftInternalAIInputSrcs: ::std::os::raw::c_int = -200677;
pub const DAQmxErrorDifftAIInputSrcInOneChanGroup: ::std::os::raw::c_int =
    -200676;
pub const DAQmxErrorInternalAIInputSrcInMultChanGroups: ::std::os::raw::c_int
          =
    -200675;
pub const DAQmxErrorSwitchOpFailedDueToPrevError: ::std::os::raw::c_int =
    -200674;
pub const DAQmxErrorWroteMultiSampsUsingSingleSampWrite: ::std::os::raw::c_int
          =
    -200673;
pub const DAQmxErrorMismatchedInputArraySizes: ::std::os::raw::c_int =
    -200672;
pub const DAQmxErrorCantExceedRelayDriveLimit: ::std::os::raw::c_int =
    -200671;
pub const DAQmxErrorDACRngLowNotEqualToMinusRefVal: ::std::os::raw::c_int =
    -200670;
pub const DAQmxErrorCantAllowConnectDACToGnd: ::std::os::raw::c_int = -200669;
pub const DAQmxErrorWatchdogTimeoutOutOfRangeAndNotSpecialVal:
          ::std::os::raw::c_int =
    -200668;
pub const DAQmxErrorNoWatchdogOutputOnPortReservedForInput:
          ::std::os::raw::c_int =
    -200667;
pub const DAQmxErrorNoInputOnPortCfgdForWatchdogOutput: ::std::os::raw::c_int
          =
    -200666;
pub const DAQmxErrorWatchdogExpirationStateNotEqualForLinesInPort:
          ::std::os::raw::c_int =
    -200665;
pub const DAQmxErrorCannotPerformOpWhenTaskNotReserved: ::std::os::raw::c_int
          =
    -200664;
pub const DAQmxErrorPowerupStateNotSupported: ::std::os::raw::c_int = -200663;
pub const DAQmxErrorWatchdogTimerNotSupported: ::std::os::raw::c_int =
    -200662;
pub const DAQmxErrorOpNotSupportedWhenRefClkSrcNone: ::std::os::raw::c_int =
    -200661;
pub const DAQmxErrorSampClkRateUnavailable: ::std::os::raw::c_int = -200660;
pub const DAQmxErrorPrptyGetSpecdSingleActiveChanFailedDueToDifftVals:
          ::std::os::raw::c_int =
    -200659;
pub const DAQmxErrorPrptyGetImpliedActiveChanFailedDueToDifftVals:
          ::std::os::raw::c_int =
    -200658;
pub const DAQmxErrorPrptyGetSpecdActiveChanFailedDueToDifftVals:
          ::std::os::raw::c_int =
    -200657;
pub const DAQmxErrorNoRegenWhenUsingBrdMem: ::std::os::raw::c_int = -200656;
pub const DAQmxErrorNonbufferedReadMoreThanSampsPerChan: ::std::os::raw::c_int
          =
    -200655;
pub const DAQmxErrorWatchdogExpirationTristateNotSpecdForEntirePort:
          ::std::os::raw::c_int =
    -200654;
pub const DAQmxErrorPowerupTristateNotSpecdForEntirePort:
          ::std::os::raw::c_int =
    -200653;
pub const DAQmxErrorPowerupStateNotSpecdForEntirePort: ::std::os::raw::c_int =
    -200652;
pub const DAQmxErrorCantSetWatchdogExpirationOnDigInChan:
          ::std::os::raw::c_int =
    -200651;
pub const DAQmxErrorCantSetPowerupStateOnDigInChan: ::std::os::raw::c_int =
    -200650;
pub const DAQmxErrorPhysChanNotInTask: ::std::os::raw::c_int = -200649;
pub const DAQmxErrorPhysChanDevNotInTask: ::std::os::raw::c_int = -200648;
pub const DAQmxErrorDigInputNotSupported: ::std::os::raw::c_int = -200647;
pub const DAQmxErrorDigFilterIntervalNotEqualForLines: ::std::os::raw::c_int =
    -200646;
pub const DAQmxErrorDigFilterIntervalAlreadyCfgd: ::std::os::raw::c_int =
    -200645;
pub const DAQmxErrorCantResetExpiredWatchdog: ::std::os::raw::c_int = -200644;
pub const DAQmxErrorActiveChanTooManyLinesSpecdWhenGettingPrpty:
          ::std::os::raw::c_int =
    -200643;
pub const DAQmxErrorActiveChanNotSpecdWhenGetting1LinePrpty:
          ::std::os::raw::c_int =
    -200642;
pub const DAQmxErrorDigPrptyCannotBeSetPerLine: ::std::os::raw::c_int =
    -200641;
pub const DAQmxErrorSendAdvCmpltAfterWaitForTrigInScanlist:
          ::std::os::raw::c_int =
    -200640;
pub const DAQmxErrorDisconnectionRequiredInScanlist: ::std::os::raw::c_int =
    -200639;
pub const DAQmxErrorTwoWaitForTrigsAfterConnectionInScanlist:
          ::std::os::raw::c_int =
    -200638;
pub const DAQmxErrorActionSeparatorRequiredAfterBreakingConnectionInScanlist:
          ::std::os::raw::c_int =
    -200637;
pub const DAQmxErrorConnectionInScanlistMustWaitForTrig: ::std::os::raw::c_int
          =
    -200636;
pub const DAQmxErrorActionNotSupportedTaskNotWatchdog: ::std::os::raw::c_int =
    -200635;
pub const DAQmxErrorWfmNameSameAsScriptName: ::std::os::raw::c_int = -200634;
pub const DAQmxErrorScriptNameSameAsWfmName: ::std::os::raw::c_int = -200633;
pub const DAQmxErrorDSFStopClock: ::std::os::raw::c_int = -200632;
pub const DAQmxErrorDSFReadyForStartClock: ::std::os::raw::c_int = -200631;
pub const DAQmxErrorWriteOffsetNotMultOfIncr: ::std::os::raw::c_int = -200630;
pub const DAQmxErrorDifferentPrptyValsNotSupportedOnDev: ::std::os::raw::c_int
          =
    -200629;
pub const DAQmxErrorRefAndPauseTrigConfigured: ::std::os::raw::c_int =
    -200628;
pub const DAQmxErrorFailedToEnableHighSpeedInputClock: ::std::os::raw::c_int =
    -200627;
pub const DAQmxErrorEmptyPhysChanInPowerUpStatesArray: ::std::os::raw::c_int =
    -200626;
pub const DAQmxErrorActivePhysChanTooManyLinesSpecdWhenGettingPrpty:
          ::std::os::raw::c_int =
    -200625;
pub const DAQmxErrorActivePhysChanNotSpecdWhenGetting1LinePrpty:
          ::std::os::raw::c_int =
    -200624;
pub const DAQmxErrorPXIDevTempCausedShutDown: ::std::os::raw::c_int = -200623;
pub const DAQmxErrorInvalidNumSampsToWrite: ::std::os::raw::c_int = -200622;
pub const DAQmxErrorOutputFIFOUnderflow2: ::std::os::raw::c_int = -200621;
pub const DAQmxErrorRepeatedAIPhysicalChan: ::std::os::raw::c_int = -200620;
pub const DAQmxErrorMultScanOpsInOneChassis: ::std::os::raw::c_int = -200619;
pub const DAQmxErrorInvalidAIChanOrder: ::std::os::raw::c_int = -200618;
pub const DAQmxErrorReversePowerProtectionActivated: ::std::os::raw::c_int =
    -200617;
pub const DAQmxErrorInvalidAsynOpHandle: ::std::os::raw::c_int = -200616;
pub const DAQmxErrorFailedToEnableHighSpeedOutput: ::std::os::raw::c_int =
    -200615;
pub const DAQmxErrorCannotReadPastEndOfRecord: ::std::os::raw::c_int =
    -200614;
pub const DAQmxErrorAcqStoppedToPreventInputBufferOverwriteOneDataXferMech:
          ::std::os::raw::c_int =
    -200613;
pub const DAQmxErrorZeroBasedChanIndexInvalid: ::std::os::raw::c_int =
    -200612;
pub const DAQmxErrorNoChansOfGivenTypeInTask: ::std::os::raw::c_int = -200611;
pub const DAQmxErrorSampClkSrcInvalidForOutputValidForInput:
          ::std::os::raw::c_int =
    -200610;
pub const DAQmxErrorOutputBufSizeTooSmallToStartGen: ::std::os::raw::c_int =
    -200609;
pub const DAQmxErrorInputBufSizeTooSmallToStartAcq: ::std::os::raw::c_int =
    -200608;
pub const DAQmxErrorExportTwoSignalsOnSameTerminal: ::std::os::raw::c_int =
    -200607;
pub const DAQmxErrorChanIndexInvalid: ::std::os::raw::c_int = -200606;
pub const DAQmxErrorRangeSyntaxNumberTooBig: ::std::os::raw::c_int = -200605;
pub const DAQmxErrorNULLPtr: ::std::os::raw::c_int = -200604;
pub const DAQmxErrorScaledMinEqualMax: ::std::os::raw::c_int = -200603;
pub const DAQmxErrorPreScaledMinEqualMax: ::std::os::raw::c_int = -200602;
pub const DAQmxErrorPropertyNotSupportedForScaleType: ::std::os::raw::c_int =
    -200601;
pub const DAQmxErrorChannelNameGenerationNumberTooBig: ::std::os::raw::c_int =
    -200600;
pub const DAQmxErrorRepeatedNumberInScaledValues: ::std::os::raw::c_int =
    -200599;
pub const DAQmxErrorRepeatedNumberInPreScaledValues: ::std::os::raw::c_int =
    -200598;
pub const DAQmxErrorLinesAlreadyReservedForOutput: ::std::os::raw::c_int =
    -200597;
pub const DAQmxErrorSwitchOperationChansSpanMultipleDevsInList:
          ::std::os::raw::c_int =
    -200596;
pub const DAQmxErrorInvalidIDInListAtBeginningOfSwitchOperation:
          ::std::os::raw::c_int =
    -200595;
pub const DAQmxErrorMStudioInvalidPolyDirection: ::std::os::raw::c_int =
    -200594;
pub const DAQmxErrorMStudioPropertyGetWhileTaskNotVerified:
          ::std::os::raw::c_int =
    -200593;
pub const DAQmxErrorRangeWithTooManyObjects: ::std::os::raw::c_int = -200592;
pub const DAQmxErrorCppDotNetAPINegativeBufferSize: ::std::os::raw::c_int =
    -200591;
pub const DAQmxErrorCppCantRemoveInvalidEventHandler: ::std::os::raw::c_int =
    -200590;
pub const DAQmxErrorCppCantRemoveEventHandlerTwice: ::std::os::raw::c_int =
    -200589;
pub const DAQmxErrorCppCantRemoveOtherObjectsEventHandler:
          ::std::os::raw::c_int =
    -200588;
pub const DAQmxErrorDigLinesReservedOrUnavailable: ::std::os::raw::c_int =
    -200587;
pub const DAQmxErrorDSFFailedToResetStream: ::std::os::raw::c_int = -200586;
pub const DAQmxErrorDSFReadyForOutputNotAsserted: ::std::os::raw::c_int =
    -200585;
pub const DAQmxErrorSampToWritePerChanNotMultipleOfIncr: ::std::os::raw::c_int
          =
    -200584;
pub const DAQmxErrorAOPropertiesCauseVoltageBelowMin: ::std::os::raw::c_int =
    -200583;
pub const DAQmxErrorAOPropertiesCauseVoltageOverMax: ::std::os::raw::c_int =
    -200582;
pub const DAQmxErrorPropertyNotSupportedWhenRefClkSrcNone:
          ::std::os::raw::c_int =
    -200581;
pub const DAQmxErrorAIMaxTooSmall: ::std::os::raw::c_int = -200580;
pub const DAQmxErrorAIMaxTooLarge: ::std::os::raw::c_int = -200579;
pub const DAQmxErrorAIMinTooSmall: ::std::os::raw::c_int = -200578;
pub const DAQmxErrorAIMinTooLarge: ::std::os::raw::c_int = -200577;
pub const DAQmxErrorBuiltInCJCSrcNotSupported: ::std::os::raw::c_int =
    -200576;
pub const DAQmxErrorTooManyPostTrigSampsPerChan: ::std::os::raw::c_int =
    -200575;
pub const DAQmxErrorTrigLineNotFoundSingleDevRoute: ::std::os::raw::c_int =
    -200574;
pub const DAQmxErrorDifferentInternalAIInputSources: ::std::os::raw::c_int =
    -200573;
pub const DAQmxErrorDifferentAIInputSrcInOneChanGroup: ::std::os::raw::c_int =
    -200572;
pub const DAQmxErrorInternalAIInputSrcInMultipleChanGroups:
          ::std::os::raw::c_int =
    -200571;
pub const DAQmxErrorCAPIChanIndexInvalid: ::std::os::raw::c_int = -200570;
pub const DAQmxErrorCollectionDoesNotMatchChanType: ::std::os::raw::c_int =
    -200569;
pub const DAQmxErrorOutputCantStartChangedRegenerationMode:
          ::std::os::raw::c_int =
    -200568;
pub const DAQmxErrorOutputCantStartChangedBufferSize: ::std::os::raw::c_int =
    -200567;
pub const DAQmxErrorChanSizeTooBigForU32PortWrite: ::std::os::raw::c_int =
    -200566;
pub const DAQmxErrorChanSizeTooBigForU8PortWrite: ::std::os::raw::c_int =
    -200565;
pub const DAQmxErrorChanSizeTooBigForU32PortRead: ::std::os::raw::c_int =
    -200564;
pub const DAQmxErrorChanSizeTooBigForU8PortRead: ::std::os::raw::c_int =
    -200563;
pub const DAQmxErrorInvalidDigDataWrite: ::std::os::raw::c_int = -200562;
pub const DAQmxErrorInvalidAODataWrite: ::std::os::raw::c_int = -200561;
pub const DAQmxErrorWaitUntilDoneDoesNotIndicateDone: ::std::os::raw::c_int =
    -200560;
pub const DAQmxErrorMultiChanTypesInTask: ::std::os::raw::c_int = -200559;
pub const DAQmxErrorMultiDevsInTask: ::std::os::raw::c_int = -200558;
pub const DAQmxErrorCannotSetPropertyWhenTaskRunning: ::std::os::raw::c_int =
    -200557;
pub const DAQmxErrorCannotGetPropertyWhenTaskNotCommittedOrRunning:
          ::std::os::raw::c_int =
    -200556;
pub const DAQmxErrorLeadingUnderscoreInString: ::std::os::raw::c_int =
    -200555;
pub const DAQmxErrorTrailingSpaceInString: ::std::os::raw::c_int = -200554;
pub const DAQmxErrorLeadingSpaceInString: ::std::os::raw::c_int = -200553;
pub const DAQmxErrorInvalidCharInString: ::std::os::raw::c_int = -200552;
pub const DAQmxErrorDLLBecameUnlocked: ::std::os::raw::c_int = -200551;
pub const DAQmxErrorDLLLock: ::std::os::raw::c_int = -200550;
pub const DAQmxErrorSelfCalConstsInvalid: ::std::os::raw::c_int = -200549;
pub const DAQmxErrorInvalidTrigCouplingExceptForExtTrigChan:
          ::std::os::raw::c_int =
    -200548;
pub const DAQmxErrorWriteFailsBufferSizeAutoConfigured: ::std::os::raw::c_int
          =
    -200547;
pub const DAQmxErrorExtCalAdjustExtRefVoltageFailed: ::std::os::raw::c_int =
    -200546;
pub const DAQmxErrorSelfCalFailedExtNoiseOrRefVoltageOutOfCal:
          ::std::os::raw::c_int =
    -200545;
pub const DAQmxErrorExtCalTemperatureNotDAQmx: ::std::os::raw::c_int =
    -200544;
pub const DAQmxErrorExtCalDateTimeNotDAQmx: ::std::os::raw::c_int = -200543;
pub const DAQmxErrorSelfCalTemperatureNotDAQmx: ::std::os::raw::c_int =
    -200542;
pub const DAQmxErrorSelfCalDateTimeNotDAQmx: ::std::os::raw::c_int = -200541;
pub const DAQmxErrorDACRefValNotSet: ::std::os::raw::c_int = -200540;
pub const DAQmxErrorAnalogMultiSampWriteNotSupported: ::std::os::raw::c_int =
    -200539;
pub const DAQmxErrorInvalidActionInControlTask: ::std::os::raw::c_int =
    -200538;
pub const DAQmxErrorPolyCoeffsInconsistent: ::std::os::raw::c_int = -200537;
pub const DAQmxErrorSensorValTooLow: ::std::os::raw::c_int = -200536;
pub const DAQmxErrorSensorValTooHigh: ::std::os::raw::c_int = -200535;
pub const DAQmxErrorWaveformNameTooLong: ::std::os::raw::c_int = -200534;
pub const DAQmxErrorIdentifierTooLongInScript: ::std::os::raw::c_int =
    -200533;
pub const DAQmxErrorUnexpectedIDFollowingSwitchChanName: ::std::os::raw::c_int
          =
    -200532;
pub const DAQmxErrorRelayNameNotSpecifiedInList: ::std::os::raw::c_int =
    -200531;
pub const DAQmxErrorUnexpectedIDFollowingRelayNameInList:
          ::std::os::raw::c_int =
    -200530;
pub const DAQmxErrorUnexpectedIDFollowingSwitchOpInList: ::std::os::raw::c_int
          =
    -200529;
pub const DAQmxErrorInvalidLineGrouping: ::std::os::raw::c_int = -200528;
pub const DAQmxErrorCtrMinMax: ::std::os::raw::c_int = -200527;
pub const DAQmxErrorWriteChanTypeMismatch: ::std::os::raw::c_int = -200526;
pub const DAQmxErrorReadChanTypeMismatch: ::std::os::raw::c_int = -200525;
pub const DAQmxErrorWriteNumChansMismatch: ::std::os::raw::c_int = -200524;
pub const DAQmxErrorOneChanReadForMultiChanTask: ::std::os::raw::c_int =
    -200523;
pub const DAQmxErrorCannotSelfCalDuringExtCal: ::std::os::raw::c_int =
    -200522;
pub const DAQmxErrorMeasCalAdjustOscillatorPhaseDAC: ::std::os::raw::c_int =
    -200521;
pub const DAQmxErrorInvalidCalConstCalADCAdjustment: ::std::os::raw::c_int =
    -200520;
pub const DAQmxErrorInvalidCalConstOscillatorFreqDACValue:
          ::std::os::raw::c_int =
    -200519;
pub const DAQmxErrorInvalidCalConstOscillatorPhaseDACValue:
          ::std::os::raw::c_int =
    -200518;
pub const DAQmxErrorInvalidCalConstOffsetDACValue: ::std::os::raw::c_int =
    -200517;
pub const DAQmxErrorInvalidCalConstGainDACValue: ::std::os::raw::c_int =
    -200516;
pub const DAQmxErrorInvalidNumCalADCReadsToAverage: ::std::os::raw::c_int =
    -200515;
pub const DAQmxErrorInvalidCfgCalAdjustDirectPathOutputImpedance:
          ::std::os::raw::c_int =
    -200514;
pub const DAQmxErrorInvalidCfgCalAdjustMainPathOutputImpedance:
          ::std::os::raw::c_int =
    -200513;
pub const DAQmxErrorInvalidCfgCalAdjustMainPathPostAmpGainAndOffset:
          ::std::os::raw::c_int =
    -200512;
pub const DAQmxErrorInvalidCfgCalAdjustMainPathPreAmpGain:
          ::std::os::raw::c_int =
    -200511;
pub const DAQmxErrorInvalidCfgCalAdjustMainPreAmpOffset: ::std::os::raw::c_int
          =
    -200510;
pub const DAQmxErrorMeasCalAdjustCalADC: ::std::os::raw::c_int = -200509;
pub const DAQmxErrorMeasCalAdjustOscillatorFrequency: ::std::os::raw::c_int =
    -200508;
pub const DAQmxErrorMeasCalAdjustDirectPathOutputImpedance:
          ::std::os::raw::c_int =
    -200507;
pub const DAQmxErrorMeasCalAdjustMainPathOutputImpedance:
          ::std::os::raw::c_int =
    -200506;
pub const DAQmxErrorMeasCalAdjustDirectPathGain: ::std::os::raw::c_int =
    -200505;
pub const DAQmxErrorMeasCalAdjustMainPathPostAmpGainAndOffset:
          ::std::os::raw::c_int =
    -200504;
pub const DAQmxErrorMeasCalAdjustMainPathPreAmpGain: ::std::os::raw::c_int =
    -200503;
pub const DAQmxErrorMeasCalAdjustMainPathPreAmpOffset: ::std::os::raw::c_int =
    -200502;
pub const DAQmxErrorInvalidDateTimeInEEPROM: ::std::os::raw::c_int = -200501;
pub const DAQmxErrorUnableToLocateErrorResources: ::std::os::raw::c_int =
    -200500;
pub const DAQmxErrorDotNetAPINotUnsigned32BitNumber: ::std::os::raw::c_int =
    -200499;
pub const DAQmxErrorInvalidRangeOfObjectsSyntaxInString: ::std::os::raw::c_int
          =
    -200498;
pub const DAQmxErrorAttemptToEnableLineNotPreviouslyDisabled:
          ::std::os::raw::c_int =
    -200497;
pub const DAQmxErrorInvalidCharInPattern: ::std::os::raw::c_int = -200496;
pub const DAQmxErrorIntermediateBufferFull: ::std::os::raw::c_int = -200495;
pub const DAQmxErrorLoadTaskFailsBecauseNoTimingOnDev: ::std::os::raw::c_int =
    -200494;
pub const DAQmxErrorCAPIReservedParamNotNULLNorEmpty: ::std::os::raw::c_int =
    -200493;
pub const DAQmxErrorCAPIReservedParamNotNULL: ::std::os::raw::c_int = -200492;
pub const DAQmxErrorCAPIReservedParamNotZero: ::std::os::raw::c_int = -200491;
pub const DAQmxErrorSampleValueOutOfRange: ::std::os::raw::c_int = -200490;
pub const DAQmxErrorChanAlreadyInTask: ::std::os::raw::c_int = -200489;
pub const DAQmxErrorVirtualChanDoesNotExist: ::std::os::raw::c_int = -200488;
pub const DAQmxErrorChanNotInTask: ::std::os::raw::c_int = -200486;
pub const DAQmxErrorTaskNotInDataNeighborhood: ::std::os::raw::c_int =
    -200485;
pub const DAQmxErrorCantSaveTaskWithoutReplace: ::std::os::raw::c_int =
    -200484;
pub const DAQmxErrorCantSaveChanWithoutReplace: ::std::os::raw::c_int =
    -200483;
pub const DAQmxErrorDevNotInTask: ::std::os::raw::c_int = -200482;
pub const DAQmxErrorDevAlreadyInTask: ::std::os::raw::c_int = -200481;
pub const DAQmxErrorCanNotPerformOpWhileTaskRunning: ::std::os::raw::c_int =
    -200479;
pub const DAQmxErrorCanNotPerformOpWhenNoChansInTask: ::std::os::raw::c_int =
    -200478;
pub const DAQmxErrorCanNotPerformOpWhenNoDevInTask: ::std::os::raw::c_int =
    -200477;
pub const DAQmxErrorCannotPerformOpWhenTaskNotRunning: ::std::os::raw::c_int =
    -200475;
pub const DAQmxErrorOperationTimedOut: ::std::os::raw::c_int = -200474;
pub const DAQmxErrorCannotReadWhenAutoStartFalseAndTaskNotRunningOrCommitted:
          ::std::os::raw::c_int =
    -200473;
pub const DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunningOrCommitted:
          ::std::os::raw::c_int =
    -200472;
pub const DAQmxErrorTaskVersionNew: ::std::os::raw::c_int = -200470;
pub const DAQmxErrorChanVersionNew: ::std::os::raw::c_int = -200469;
pub const DAQmxErrorEmptyString: ::std::os::raw::c_int = -200467;
pub const DAQmxErrorChannelSizeTooBigForPortReadType: ::std::os::raw::c_int =
    -200466;
pub const DAQmxErrorChannelSizeTooBigForPortWriteType: ::std::os::raw::c_int =
    -200465;
pub const DAQmxErrorExpectedNumberOfChannelsVerificationFailed:
          ::std::os::raw::c_int =
    -200464;
pub const DAQmxErrorNumLinesMismatchInReadOrWrite: ::std::os::raw::c_int =
    -200463;
pub const DAQmxErrorOutputBufferEmpty: ::std::os::raw::c_int = -200462;
pub const DAQmxErrorInvalidChanName: ::std::os::raw::c_int = -200461;
pub const DAQmxErrorReadNoInputChansInTask: ::std::os::raw::c_int = -200460;
pub const DAQmxErrorWriteNoOutputChansInTask: ::std::os::raw::c_int = -200459;
pub const DAQmxErrorPropertyNotSupportedNotInputTask: ::std::os::raw::c_int =
    -200457;
pub const DAQmxErrorPropertyNotSupportedNotOutputTask: ::std::os::raw::c_int =
    -200456;
pub const DAQmxErrorGetPropertyNotInputBufferedTask: ::std::os::raw::c_int =
    -200455;
pub const DAQmxErrorGetPropertyNotOutputBufferedTask: ::std::os::raw::c_int =
    -200454;
pub const DAQmxErrorInvalidTimeoutVal: ::std::os::raw::c_int = -200453;
pub const DAQmxErrorAttributeNotSupportedInTaskContext: ::std::os::raw::c_int
          =
    -200452;
pub const DAQmxErrorAttributeNotQueryableUnlessTaskIsCommitted:
          ::std::os::raw::c_int =
    -200451;
pub const DAQmxErrorAttributeNotSettableWhenTaskIsRunning:
          ::std::os::raw::c_int =
    -200450;
pub const DAQmxErrorDACRngLowNotMinusRefValNorZero: ::std::os::raw::c_int =
    -200449;
pub const DAQmxErrorDACRngHighNotEqualRefVal: ::std::os::raw::c_int = -200448;
pub const DAQmxErrorUnitsNotFromCustomScale: ::std::os::raw::c_int = -200447;
pub const DAQmxErrorInvalidVoltageReadingDuringExtCal: ::std::os::raw::c_int =
    -200446;
pub const DAQmxErrorCalFunctionNotSupported: ::std::os::raw::c_int = -200445;
pub const DAQmxErrorInvalidPhysicalChanForCal: ::std::os::raw::c_int =
    -200444;
pub const DAQmxErrorExtCalNotComplete: ::std::os::raw::c_int = -200443;
pub const DAQmxErrorCantSyncToExtStimulusFreqDuringCal: ::std::os::raw::c_int
          =
    -200442;
pub const DAQmxErrorUnableToDetectExtStimulusFreqDuringCal:
          ::std::os::raw::c_int =
    -200441;
pub const DAQmxErrorInvalidCloseAction: ::std::os::raw::c_int = -200440;
pub const DAQmxErrorExtCalFunctionOutsideExtCalSession: ::std::os::raw::c_int
          =
    -200439;
pub const DAQmxErrorInvalidCalArea: ::std::os::raw::c_int = -200438;
pub const DAQmxErrorExtCalConstsInvalid: ::std::os::raw::c_int = -200437;
pub const DAQmxErrorStartTrigDelayWithExtSampClk: ::std::os::raw::c_int =
    -200436;
pub const DAQmxErrorDelayFromSampClkWithExtConv: ::std::os::raw::c_int =
    -200435;
pub const DAQmxErrorFewerThan2PreScaledVals: ::std::os::raw::c_int = -200434;
pub const DAQmxErrorFewerThan2ScaledValues: ::std::os::raw::c_int = -200433;
pub const DAQmxErrorPhysChanOutputType: ::std::os::raw::c_int = -200432;
pub const DAQmxErrorPhysChanMeasType: ::std::os::raw::c_int = -200431;
pub const DAQmxErrorInvalidPhysChanType: ::std::os::raw::c_int = -200430;
pub const DAQmxErrorLabVIEWEmptyTaskOrChans: ::std::os::raw::c_int = -200429;
pub const DAQmxErrorLabVIEWInvalidTaskOrChans: ::std::os::raw::c_int =
    -200428;
pub const DAQmxErrorInvalidRefClkRate: ::std::os::raw::c_int = -200427;
pub const DAQmxErrorInvalidExtTrigImpedance: ::std::os::raw::c_int = -200426;
pub const DAQmxErrorHystTrigLevelAIMax: ::std::os::raw::c_int = -200425;
pub const DAQmxErrorLineNumIncompatibleWithVideoSignalFormat:
          ::std::os::raw::c_int =
    -200424;
pub const DAQmxErrorTrigWindowAIMinAIMaxCombo: ::std::os::raw::c_int =
    -200423;
pub const DAQmxErrorTrigAIMinAIMax: ::std::os::raw::c_int = -200422;
pub const DAQmxErrorHystTrigLevelAIMin: ::std::os::raw::c_int = -200421;
pub const DAQmxErrorInvalidSampRateConsiderRIS: ::std::os::raw::c_int =
    -200420;
pub const DAQmxErrorInvalidReadPosDuringRIS: ::std::os::raw::c_int = -200419;
pub const DAQmxErrorImmedTrigDuringRISMode: ::std::os::raw::c_int = -200418;
pub const DAQmxErrorTDCNotEnabledDuringRISMode: ::std::os::raw::c_int =
    -200417;
pub const DAQmxErrorMultiRecWithRIS: ::std::os::raw::c_int = -200416;
pub const DAQmxErrorInvalidRefClkSrc: ::std::os::raw::c_int = -200415;
pub const DAQmxErrorInvalidSampClkSrc: ::std::os::raw::c_int = -200414;
pub const DAQmxErrorInsufficientOnBoardMemForNumRecsAndSamps:
          ::std::os::raw::c_int =
    -200413;
pub const DAQmxErrorInvalidAIAttenuation: ::std::os::raw::c_int = -200412;
pub const DAQmxErrorACCouplingNotAllowedWith50OhmImpedance:
          ::std::os::raw::c_int =
    -200411;
pub const DAQmxErrorInvalidRecordNum: ::std::os::raw::c_int = -200410;
pub const DAQmxErrorZeroSlopeLinearScale: ::std::os::raw::c_int = -200409;
pub const DAQmxErrorZeroReversePolyScaleCoeffs: ::std::os::raw::c_int =
    -200408;
pub const DAQmxErrorZeroForwardPolyScaleCoeffs: ::std::os::raw::c_int =
    -200407;
pub const DAQmxErrorNoReversePolyScaleCoeffs: ::std::os::raw::c_int = -200406;
pub const DAQmxErrorNoForwardPolyScaleCoeffs: ::std::os::raw::c_int = -200405;
pub const DAQmxErrorNoPolyScaleCoeffs: ::std::os::raw::c_int = -200404;
pub const DAQmxErrorReversePolyOrderLessThanNumPtsToCompute:
          ::std::os::raw::c_int =
    -200403;
pub const DAQmxErrorReversePolyOrderNotPositive: ::std::os::raw::c_int =
    -200402;
pub const DAQmxErrorNumPtsToComputeNotPositive: ::std::os::raw::c_int =
    -200401;
pub const DAQmxErrorWaveformLengthNotMultipleOfIncr: ::std::os::raw::c_int =
    -200400;
pub const DAQmxErrorCAPINoExtendedErrorInfoAvailable: ::std::os::raw::c_int =
    -200399;
pub const DAQmxErrorCVIFunctionNotFoundInDAQmxDLL: ::std::os::raw::c_int =
    -200398;
pub const DAQmxErrorCVIFailedToLoadDAQmxDLL: ::std::os::raw::c_int = -200397;
pub const DAQmxErrorNoCommonTrigLineForImmedRoute: ::std::os::raw::c_int =
    -200396;
pub const DAQmxErrorNoCommonTrigLineForTaskRoute: ::std::os::raw::c_int =
    -200395;
pub const DAQmxErrorF64PrptyValNotUnsignedInt: ::std::os::raw::c_int =
    -200394;
pub const DAQmxErrorRegisterNotWritable: ::std::os::raw::c_int = -200393;
pub const DAQmxErrorInvalidOutputVoltageAtSampClkRate: ::std::os::raw::c_int =
    -200392;
pub const DAQmxErrorStrobePhaseShiftDCMBecameUnlocked: ::std::os::raw::c_int =
    -200391;
pub const DAQmxErrorDrivePhaseShiftDCMBecameUnlocked: ::std::os::raw::c_int =
    -200390;
pub const DAQmxErrorClkOutPhaseShiftDCMBecameUnlocked: ::std::os::raw::c_int =
    -200389;
pub const DAQmxErrorOutputBoardClkDCMBecameUnlocked: ::std::os::raw::c_int =
    -200388;
pub const DAQmxErrorInputBoardClkDCMBecameUnlocked: ::std::os::raw::c_int =
    -200387;
pub const DAQmxErrorInternalClkDCMBecameUnlocked: ::std::os::raw::c_int =
    -200386;
pub const DAQmxErrorDCMLock: ::std::os::raw::c_int = -200385;
pub const DAQmxErrorDataLineReservedForDynamicOutput: ::std::os::raw::c_int =
    -200384;
pub const DAQmxErrorInvalidRefClkSrcGivenSampClkSrc: ::std::os::raw::c_int =
    -200383;
pub const DAQmxErrorNoPatternMatcherAvailable: ::std::os::raw::c_int =
    -200382;
pub const DAQmxErrorInvalidDelaySampRateBelowPhaseShiftDCMThresh:
          ::std::os::raw::c_int =
    -200381;
pub const DAQmxErrorStrainGageCalibration: ::std::os::raw::c_int = -200380;
pub const DAQmxErrorInvalidExtClockFreqAndDivCombo: ::std::os::raw::c_int =
    -200379;
pub const DAQmxErrorCustomScaleDoesNotExist: ::std::os::raw::c_int = -200378;
pub const DAQmxErrorOnlyFrontEndChanOpsDuringScan: ::std::os::raw::c_int =
    -200377;
pub const DAQmxErrorInvalidOptionForDigitalPortChannel: ::std::os::raw::c_int
          =
    -200376;
pub const DAQmxErrorUnsupportedSignalTypeExportSignal: ::std::os::raw::c_int =
    -200375;
pub const DAQmxErrorInvalidSignalTypeExportSignal: ::std::os::raw::c_int =
    -200374;
pub const DAQmxErrorUnsupportedTrigTypeSendsSWTrig: ::std::os::raw::c_int =
    -200373;
pub const DAQmxErrorInvalidTrigTypeSendsSWTrig: ::std::os::raw::c_int =
    -200372;
pub const DAQmxErrorRepeatedPhysicalChan: ::std::os::raw::c_int = -200371;
pub const DAQmxErrorResourcesInUseForRouteInTask: ::std::os::raw::c_int =
    -200370;
pub const DAQmxErrorResourcesInUseForRoute: ::std::os::raw::c_int = -200369;
pub const DAQmxErrorRouteNotSupportedByHW: ::std::os::raw::c_int = -200368;
pub const DAQmxErrorResourcesInUseForExportSignalPolarity:
          ::std::os::raw::c_int =
    -200367;
pub const DAQmxErrorResourcesInUseForInversionInTask: ::std::os::raw::c_int =
    -200366;
pub const DAQmxErrorResourcesInUseForInversion: ::std::os::raw::c_int =
    -200365;
pub const DAQmxErrorExportSignalPolarityNotSupportedByHW:
          ::std::os::raw::c_int =
    -200364;
pub const DAQmxErrorInversionNotSupportedByHW: ::std::os::raw::c_int =
    -200363;
pub const DAQmxErrorOverloadedChansExistNotRead: ::std::os::raw::c_int =
    -200362;
pub const DAQmxErrorInputFIFOOverflow2: ::std::os::raw::c_int = -200361;
pub const DAQmxErrorCJCChanNotSpecd: ::std::os::raw::c_int = -200360;
pub const DAQmxErrorCtrExportSignalNotPossible: ::std::os::raw::c_int =
    -200359;
pub const DAQmxErrorRefTrigWhenContinuous: ::std::os::raw::c_int = -200358;
pub const DAQmxErrorIncompatibleSensorOutputAndDeviceInputRanges:
          ::std::os::raw::c_int =
    -200357;
pub const DAQmxErrorCustomScaleNameUsed: ::std::os::raw::c_int = -200356;
pub const DAQmxErrorPropertyValNotSupportedByHW: ::std::os::raw::c_int =
    -200355;
pub const DAQmxErrorPropertyValNotValidTermName: ::std::os::raw::c_int =
    -200354;
pub const DAQmxErrorResourcesInUseForProperty: ::std::os::raw::c_int =
    -200353;
pub const DAQmxErrorCJCChanAlreadyUsed: ::std::os::raw::c_int = -200352;
pub const DAQmxErrorForwardPolynomialCoefNotSpecd: ::std::os::raw::c_int =
    -200351;
pub const DAQmxErrorTableScaleNumPreScaledAndScaledValsNotEqual:
          ::std::os::raw::c_int =
    -200350;
pub const DAQmxErrorTableScalePreScaledValsNotSpecd: ::std::os::raw::c_int =
    -200349;
pub const DAQmxErrorTableScaleScaledValsNotSpecd: ::std::os::raw::c_int =
    -200348;
pub const DAQmxErrorIntermediateBufferSizeNotMultipleOfIncr:
          ::std::os::raw::c_int =
    -200347;
pub const DAQmxErrorEventPulseWidthOutOfRange: ::std::os::raw::c_int =
    -200346;
pub const DAQmxErrorEventDelayOutOfRange: ::std::os::raw::c_int = -200345;
pub const DAQmxErrorSampPerChanNotMultipleOfIncr: ::std::os::raw::c_int =
    -200344;
pub const DAQmxErrorCannotCalculateNumSampsTaskNotStarted:
          ::std::os::raw::c_int =
    -200343;
pub const DAQmxErrorScriptNotInMem: ::std::os::raw::c_int = -200342;
pub const DAQmxErrorOnboardMemTooSmall: ::std::os::raw::c_int = -200341;
pub const DAQmxErrorReadAllAvailableDataWithoutBuffer: ::std::os::raw::c_int =
    -200340;
pub const DAQmxErrorPulseActiveAtStart: ::std::os::raw::c_int = -200339;
pub const DAQmxErrorCalTempNotSupported: ::std::os::raw::c_int = -200338;
pub const DAQmxErrorDelayFromSampClkTooLong: ::std::os::raw::c_int = -200337;
pub const DAQmxErrorDelayFromSampClkTooShort: ::std::os::raw::c_int = -200336;
pub const DAQmxErrorAIConvRateTooHigh: ::std::os::raw::c_int = -200335;
pub const DAQmxErrorDelayFromStartTrigTooLong: ::std::os::raw::c_int =
    -200334;
pub const DAQmxErrorDelayFromStartTrigTooShort: ::std::os::raw::c_int =
    -200333;
pub const DAQmxErrorSampRateTooHigh: ::std::os::raw::c_int = -200332;
pub const DAQmxErrorSampRateTooLow: ::std::os::raw::c_int = -200331;
pub const DAQmxErrorPFI0UsedForAnalogAndDigitalSrc: ::std::os::raw::c_int =
    -200330;
pub const DAQmxErrorPrimingCfgFIFO: ::std::os::raw::c_int = -200329;
pub const DAQmxErrorCannotOpenTopologyCfgFile: ::std::os::raw::c_int =
    -200328;
pub const DAQmxErrorInvalidDTInsideWfmDataType: ::std::os::raw::c_int =
    -200327;
pub const DAQmxErrorRouteSrcAndDestSame: ::std::os::raw::c_int = -200326;
pub const DAQmxErrorReversePolynomialCoefNotSpecd: ::std::os::raw::c_int =
    -200325;
pub const DAQmxErrorDevAbsentOrUnavailable: ::std::os::raw::c_int = -200324;
pub const DAQmxErrorNoAdvTrigForMultiDevScan: ::std::os::raw::c_int = -200323;
pub const DAQmxErrorInterruptsInsufficientDataXferMech: ::std::os::raw::c_int
          =
    -200322;
pub const DAQmxErrorInvalidAttentuationBasedOnMinMax: ::std::os::raw::c_int =
    -200321;
pub const DAQmxErrorCabledModuleCannotRouteSSH: ::std::os::raw::c_int =
    -200320;
pub const DAQmxErrorCabledModuleCannotRouteConvClk: ::std::os::raw::c_int =
    -200319;
pub const DAQmxErrorInvalidExcitValForScaling: ::std::os::raw::c_int =
    -200318;
pub const DAQmxErrorNoDevMemForScript: ::std::os::raw::c_int = -200317;
pub const DAQmxErrorScriptDataUnderflow: ::std::os::raw::c_int = -200316;
pub const DAQmxErrorNoDevMemForWaveform: ::std::os::raw::c_int = -200315;
pub const DAQmxErrorStreamDCMBecameUnlocked: ::std::os::raw::c_int = -200314;
pub const DAQmxErrorStreamDCMLock: ::std::os::raw::c_int = -200313;
pub const DAQmxErrorWaveformNotInMem: ::std::os::raw::c_int = -200312;
pub const DAQmxErrorWaveformWriteOutOfBounds: ::std::os::raw::c_int = -200311;
pub const DAQmxErrorWaveformPreviouslyAllocated: ::std::os::raw::c_int =
    -200310;
pub const DAQmxErrorSampClkTbMasterTbDivNotAppropriateForSampTbSrc:
          ::std::os::raw::c_int =
    -200309;
pub const DAQmxErrorSampTbRateSampTbSrcMismatch: ::std::os::raw::c_int =
    -200308;
pub const DAQmxErrorMasterTbRateMasterTbSrcMismatch: ::std::os::raw::c_int =
    -200307;
pub const DAQmxErrorSampsPerChanTooBig: ::std::os::raw::c_int = -200306;
pub const DAQmxErrorFinitePulseTrainNotPossible: ::std::os::raw::c_int =
    -200305;
pub const DAQmxErrorExtMasterTimebaseRateNotSpecified: ::std::os::raw::c_int =
    -200304;
pub const DAQmxErrorExtSampClkSrcNotSpecified: ::std::os::raw::c_int =
    -200303;
pub const DAQmxErrorInputSignalSlowerThanMeasTime: ::std::os::raw::c_int =
    -200302;
pub const DAQmxErrorCannotUpdatePulseGenProperty: ::std::os::raw::c_int =
    -200301;
pub const DAQmxErrorInvalidTimingType: ::std::os::raw::c_int = -200300;
pub const DAQmxErrorPropertyUnavailWhenUsingOnboardMemory:
          ::std::os::raw::c_int =
    -200297;
pub const DAQmxErrorCannotWriteAfterStartWithOnboardMemory:
          ::std::os::raw::c_int =
    -200295;
pub const DAQmxErrorNotEnoughSampsWrittenForInitialXferRqstCondition:
          ::std::os::raw::c_int =
    -200294;
pub const DAQmxErrorNoMoreSpace: ::std::os::raw::c_int = -200293;
pub const DAQmxErrorSamplesCanNotYetBeWritten: ::std::os::raw::c_int =
    -200292;
pub const DAQmxErrorGenStoppedToPreventIntermediateBufferRegenOfOldSamples:
          ::std::os::raw::c_int =
    -200291;
pub const DAQmxErrorGenStoppedToPreventRegenOfOldSamples:
          ::std::os::raw::c_int =
    -200290;
pub const DAQmxErrorSamplesNoLongerWriteable: ::std::os::raw::c_int = -200289;
pub const DAQmxErrorSamplesWillNeverBeGenerated: ::std::os::raw::c_int =
    -200288;
pub const DAQmxErrorNegativeWriteSampleNumber: ::std::os::raw::c_int =
    -200287;
pub const DAQmxErrorNoAcqStarted: ::std::os::raw::c_int = -200286;
pub const DAQmxErrorSamplesNotYetAvailable: ::std::os::raw::c_int = -200284;
pub const DAQmxErrorAcqStoppedToPreventIntermediateBufferOverflow:
          ::std::os::raw::c_int =
    -200283;
pub const DAQmxErrorNoRefTrigConfigured: ::std::os::raw::c_int = -200282;
pub const DAQmxErrorCannotReadRelativeToRefTrigUntilDone:
          ::std::os::raw::c_int =
    -200281;
pub const DAQmxErrorSamplesNoLongerAvailable: ::std::os::raw::c_int = -200279;
pub const DAQmxErrorSamplesWillNeverBeAvailable: ::std::os::raw::c_int =
    -200278;
pub const DAQmxErrorNegativeReadSampleNumber: ::std::os::raw::c_int = -200277;
pub const DAQmxErrorExternalSampClkAndRefClkThruSameTerm:
          ::std::os::raw::c_int =
    -200276;
pub const DAQmxErrorExtSampClkRateTooLowForClkIn: ::std::os::raw::c_int =
    -200275;
pub const DAQmxErrorExtSampClkRateTooHighForBackplane: ::std::os::raw::c_int =
    -200274;
pub const DAQmxErrorSampClkRateAndDivCombo: ::std::os::raw::c_int = -200273;
pub const DAQmxErrorSampClkRateTooLowForDivDown: ::std::os::raw::c_int =
    -200272;
pub const DAQmxErrorProductOfAOMinAndGainTooSmall: ::std::os::raw::c_int =
    -200271;
pub const DAQmxErrorInterpolationRateNotPossible: ::std::os::raw::c_int =
    -200270;
pub const DAQmxErrorOffsetTooLarge: ::std::os::raw::c_int = -200269;
pub const DAQmxErrorOffsetTooSmall: ::std::os::raw::c_int = -200268;
pub const DAQmxErrorProductOfAOMaxAndGainTooLarge: ::std::os::raw::c_int =
    -200267;
pub const DAQmxErrorMinAndMaxNotSymmetric: ::std::os::raw::c_int = -200266;
pub const DAQmxErrorInvalidAnalogTrigSrc: ::std::os::raw::c_int = -200265;
pub const DAQmxErrorTooManyChansForAnalogRefTrig: ::std::os::raw::c_int =
    -200264;
pub const DAQmxErrorTooManyChansForAnalogPauseTrig: ::std::os::raw::c_int =
    -200263;
pub const DAQmxErrorTrigWhenOnDemandSampTiming: ::std::os::raw::c_int =
    -200262;
pub const DAQmxErrorInconsistentAnalogTrigSettings: ::std::os::raw::c_int =
    -200261;
pub const DAQmxErrorMemMapDataXferModeSampTimingCombo: ::std::os::raw::c_int =
    -200260;
pub const DAQmxErrorInvalidJumperedAttr: ::std::os::raw::c_int = -200259;
pub const DAQmxErrorInvalidGainBasedOnMinMax: ::std::os::raw::c_int = -200258;
pub const DAQmxErrorInconsistentExcit: ::std::os::raw::c_int = -200257;
pub const DAQmxErrorTopologyNotSupportedByCfgTermBlock: ::std::os::raw::c_int
          =
    -200256;
pub const DAQmxErrorBuiltInTempSensorNotSupported: ::std::os::raw::c_int =
    -200255;
pub const DAQmxErrorInvalidTerm: ::std::os::raw::c_int = -200254;
pub const DAQmxErrorCannotTristateTerm: ::std::os::raw::c_int = -200253;
pub const DAQmxErrorCannotTristateBusyTerm: ::std::os::raw::c_int = -200252;
pub const DAQmxErrorNoDMAChansAvailable: ::std::os::raw::c_int = -200251;
pub const DAQmxErrorInvalidWaveformLengthWithinLoopInScript:
          ::std::os::raw::c_int =
    -200250;
pub const DAQmxErrorInvalidSubsetLengthWithinLoopInScript:
          ::std::os::raw::c_int =
    -200249;
pub const DAQmxErrorMarkerPosInvalidForLoopInScript: ::std::os::raw::c_int =
    -200248;
pub const DAQmxErrorIntegerExpectedInScript: ::std::os::raw::c_int = -200247;
pub const DAQmxErrorPLLBecameUnlocked: ::std::os::raw::c_int = -200246;
pub const DAQmxErrorPLLLock: ::std::os::raw::c_int = -200245;
pub const DAQmxErrorDDCClkOutDCMBecameUnlocked: ::std::os::raw::c_int =
    -200244;
pub const DAQmxErrorDDCClkOutDCMLock: ::std::os::raw::c_int = -200243;
pub const DAQmxErrorClkDoublerDCMBecameUnlocked: ::std::os::raw::c_int =
    -200242;
pub const DAQmxErrorClkDoublerDCMLock: ::std::os::raw::c_int = -200241;
pub const DAQmxErrorSampClkDCMBecameUnlocked: ::std::os::raw::c_int = -200240;
pub const DAQmxErrorSampClkDCMLock: ::std::os::raw::c_int = -200239;
pub const DAQmxErrorSampClkTimebaseDCMBecameUnlocked: ::std::os::raw::c_int =
    -200238;
pub const DAQmxErrorSampClkTimebaseDCMLock: ::std::os::raw::c_int = -200237;
pub const DAQmxErrorAttrCannotBeReset: ::std::os::raw::c_int = -200236;
pub const DAQmxErrorExplanationNotFound: ::std::os::raw::c_int = -200235;
pub const DAQmxErrorWriteBufferTooSmall: ::std::os::raw::c_int = -200234;
pub const DAQmxErrorSpecifiedAttrNotValid: ::std::os::raw::c_int = -200233;
pub const DAQmxErrorAttrCannotBeRead: ::std::os::raw::c_int = -200232;
pub const DAQmxErrorAttrCannotBeSet: ::std::os::raw::c_int = -200231;
pub const DAQmxErrorNULLPtrForC_Api: ::std::os::raw::c_int = -200230;
pub const DAQmxErrorReadBufferTooSmall: ::std::os::raw::c_int = -200229;
pub const DAQmxErrorBufferTooSmallForString: ::std::os::raw::c_int = -200228;
pub const DAQmxErrorNoAvailTrigLinesOnDevice: ::std::os::raw::c_int = -200227;
pub const DAQmxErrorTrigBusLineNotAvail: ::std::os::raw::c_int = -200226;
pub const DAQmxErrorCouldNotReserveRequestedTrigLine: ::std::os::raw::c_int =
    -200225;
pub const DAQmxErrorTrigLineNotFound: ::std::os::raw::c_int = -200224;
pub const DAQmxErrorSCXI1126ThreshHystCombination: ::std::os::raw::c_int =
    -200223;
pub const DAQmxErrorAcqStoppedToPreventInputBufferOverwrite:
          ::std::os::raw::c_int =
    -200222;
pub const DAQmxErrorTimeoutExceeded: ::std::os::raw::c_int = -200221;
pub const DAQmxErrorInvalidDeviceID: ::std::os::raw::c_int = -200220;
pub const DAQmxErrorInvalidAOChanOrder: ::std::os::raw::c_int = -200219;
pub const DAQmxErrorSampleTimingTypeAndDataXferMode: ::std::os::raw::c_int =
    -200218;
pub const DAQmxErrorBufferWithOnDemandSampTiming: ::std::os::raw::c_int =
    -200217;
pub const DAQmxErrorBufferAndDataXferMode: ::std::os::raw::c_int = -200216;
pub const DAQmxErrorMemMapAndBuffer: ::std::os::raw::c_int = -200215;
pub const DAQmxErrorNoAnalogTrigHW: ::std::os::raw::c_int = -200214;
pub const DAQmxErrorTooManyPretrigPlusMinPostTrigSamps: ::std::os::raw::c_int
          =
    -200213;
pub const DAQmxErrorInconsistentUnitsSpecified: ::std::os::raw::c_int =
    -200212;
pub const DAQmxErrorMultipleRelaysForSingleRelayOp: ::std::os::raw::c_int =
    -200211;
pub const DAQmxErrorMultipleDevIDsPerChassisSpecifiedInList:
          ::std::os::raw::c_int =
    -200210;
pub const DAQmxErrorDuplicateDevIDInList: ::std::os::raw::c_int = -200209;
pub const DAQmxErrorInvalidRangeStatementCharInList: ::std::os::raw::c_int =
    -200208;
pub const DAQmxErrorInvalidDeviceIDInList: ::std::os::raw::c_int = -200207;
pub const DAQmxErrorTriggerPolarityConflict: ::std::os::raw::c_int = -200206;
pub const DAQmxErrorCannotScanWithCurrentTopology: ::std::os::raw::c_int =
    -200205;
pub const DAQmxErrorUnexpectedIdentifierInFullySpecifiedPathInList:
          ::std::os::raw::c_int =
    -200204;
pub const DAQmxErrorSwitchCannotDriveMultipleTrigLines: ::std::os::raw::c_int
          =
    -200203;
pub const DAQmxErrorInvalidRelayName: ::std::os::raw::c_int = -200202;
pub const DAQmxErrorSwitchScanlistTooBig: ::std::os::raw::c_int = -200201;
pub const DAQmxErrorSwitchChanInUse: ::std::os::raw::c_int = -200200;
pub const DAQmxErrorSwitchNotResetBeforeScan: ::std::os::raw::c_int = -200199;
pub const DAQmxErrorInvalidTopology: ::std::os::raw::c_int = -200198;
pub const DAQmxErrorAttrNotSupported: ::std::os::raw::c_int = -200197;
pub const DAQmxErrorUnexpectedEndOfActionsInList: ::std::os::raw::c_int =
    -200196;
pub const DAQmxErrorPowerLimitExceeded: ::std::os::raw::c_int = -200195;
pub const DAQmxErrorHWUnexpectedlyPoweredOffAndOn: ::std::os::raw::c_int =
    -200194;
pub const DAQmxErrorSwitchOperationNotSupported: ::std::os::raw::c_int =
    -200193;
pub const DAQmxErrorOnlyContinuousScanSupported: ::std::os::raw::c_int =
    -200192;
pub const DAQmxErrorSwitchDifferentTopologyWhenScanning: ::std::os::raw::c_int
          =
    -200191;
pub const DAQmxErrorDisconnectPathNotSameAsExistingPath: ::std::os::raw::c_int
          =
    -200190;
pub const DAQmxErrorConnectionNotPermittedOnChanReservedForRouting:
          ::std::os::raw::c_int =
    -200189;
pub const DAQmxErrorCannotConnectSrcChans: ::std::os::raw::c_int = -200188;
pub const DAQmxErrorCannotConnectChannelToItself: ::std::os::raw::c_int =
    -200187;
pub const DAQmxErrorChannelNotReservedForRouting: ::std::os::raw::c_int =
    -200186;
pub const DAQmxErrorCannotConnectChansDirectly: ::std::os::raw::c_int =
    -200185;
pub const DAQmxErrorChansAlreadyConnected: ::std::os::raw::c_int = -200184;
pub const DAQmxErrorChanDuplicatedInPath: ::std::os::raw::c_int = -200183;
pub const DAQmxErrorNoPathToDisconnect: ::std::os::raw::c_int = -200182;
pub const DAQmxErrorInvalidSwitchChan: ::std::os::raw::c_int = -200181;
pub const DAQmxErrorNoPathAvailableBetween2SwitchChans: ::std::os::raw::c_int
          =
    -200180;
pub const DAQmxErrorExplicitConnectionExists: ::std::os::raw::c_int = -200179;
pub const DAQmxErrorSwitchDifferentSettlingTimeWhenScanning:
          ::std::os::raw::c_int =
    -200178;
pub const DAQmxErrorOperationOnlyPermittedWhileScanning: ::std::os::raw::c_int
          =
    -200177;
pub const DAQmxErrorOperationNotPermittedWhileScanning: ::std::os::raw::c_int
          =
    -200176;
pub const DAQmxErrorHardwareNotResponding: ::std::os::raw::c_int = -200175;
pub const DAQmxErrorInvalidSampAndMasterTimebaseRateCombo:
          ::std::os::raw::c_int =
    -200173;
pub const DAQmxErrorNonZeroBufferSizeInProgIOXfer: ::std::os::raw::c_int =
    -200172;
pub const DAQmxErrorVirtualChanNameUsed: ::std::os::raw::c_int = -200171;
pub const DAQmxErrorPhysicalChanDoesNotExist: ::std::os::raw::c_int = -200170;
pub const DAQmxErrorMemMapOnlyForProgIOXfer: ::std::os::raw::c_int = -200169;
pub const DAQmxErrorTooManyChans: ::std::os::raw::c_int = -200168;
pub const DAQmxErrorCannotHaveCJTempWithOtherChans: ::std::os::raw::c_int =
    -200167;
pub const DAQmxErrorOutputBufferUnderwrite: ::std::os::raw::c_int = -200166;
pub const DAQmxErrorSensorInvalidCompletionResistance: ::std::os::raw::c_int =
    -200163;
pub const DAQmxErrorVoltageExcitIncompatibleWith2WireCfg:
          ::std::os::raw::c_int =
    -200162;
pub const DAQmxErrorIntExcitSrcNotAvailable: ::std::os::raw::c_int = -200161;
pub const DAQmxErrorCannotCreateChannelAfterTaskVerified:
          ::std::os::raw::c_int =
    -200160;
pub const DAQmxErrorLinesReservedForSCXIControl: ::std::os::raw::c_int =
    -200159;
pub const DAQmxErrorCouldNotReserveLinesForSCXIControl: ::std::os::raw::c_int
          =
    -200158;
pub const DAQmxErrorCalibrationFailed: ::std::os::raw::c_int = -200157;
pub const DAQmxErrorReferenceFrequencyInvalid: ::std::os::raw::c_int =
    -200156;
pub const DAQmxErrorReferenceResistanceInvalid: ::std::os::raw::c_int =
    -200155;
pub const DAQmxErrorReferenceCurrentInvalid: ::std::os::raw::c_int = -200154;
pub const DAQmxErrorReferenceVoltageInvalid: ::std::os::raw::c_int = -200153;
pub const DAQmxErrorEEPROMDataInvalid: ::std::os::raw::c_int = -200152;
pub const DAQmxErrorCabledModuleNotCapableOfRoutingAI: ::std::os::raw::c_int =
    -200151;
pub const DAQmxErrorChannelNotAvailableInParallelMode: ::std::os::raw::c_int =
    -200150;
pub const DAQmxErrorExternalTimebaseRateNotKnownForDelay:
          ::std::os::raw::c_int =
    -200149;
pub const DAQmxErrorFREQOUTCannotProduceDesiredFrequency:
          ::std::os::raw::c_int =
    -200148;
pub const DAQmxErrorMultipleCounterInputTask: ::std::os::raw::c_int = -200147;
pub const DAQmxErrorCounterStartPauseTriggerConflict: ::std::os::raw::c_int =
    -200146;
pub const DAQmxErrorCounterInputPauseTriggerAndSampleClockInvalid:
          ::std::os::raw::c_int =
    -200145;
pub const DAQmxErrorCounterOutputPauseTriggerInvalid: ::std::os::raw::c_int =
    -200144;
pub const DAQmxErrorCounterTimebaseRateNotSpecified: ::std::os::raw::c_int =
    -200143;
pub const DAQmxErrorCounterTimebaseRateNotFound: ::std::os::raw::c_int =
    -200142;
pub const DAQmxErrorCounterOverflow: ::std::os::raw::c_int = -200141;
pub const DAQmxErrorCounterNoTimebaseEdgesBetweenGates: ::std::os::raw::c_int
          =
    -200140;
pub const DAQmxErrorCounterMaxMinRangeFreq: ::std::os::raw::c_int = -200139;
pub const DAQmxErrorCounterMaxMinRangeTime: ::std::os::raw::c_int = -200138;
pub const DAQmxErrorSuitableTimebaseNotFoundTimeCombo: ::std::os::raw::c_int =
    -200137;
pub const DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo:
          ::std::os::raw::c_int =
    -200136;
pub const DAQmxErrorInternalTimebaseSourceDivisorCombo: ::std::os::raw::c_int
          =
    -200135;
pub const DAQmxErrorInternalTimebaseSourceRateCombo: ::std::os::raw::c_int =
    -200134;
pub const DAQmxErrorInternalTimebaseRateDivisorSourceCombo:
          ::std::os::raw::c_int =
    -200133;
pub const DAQmxErrorExternalTimebaseRateNotknownForRate: ::std::os::raw::c_int
          =
    -200132;
pub const DAQmxErrorAnalogTrigChanNotFirstInScanList: ::std::os::raw::c_int =
    -200131;
pub const DAQmxErrorNoDivisorForExternalSignal: ::std::os::raw::c_int =
    -200130;
pub const DAQmxErrorAttributeInconsistentAcrossRepeatedPhysicalChannels:
          ::std::os::raw::c_int =
    -200128;
pub const DAQmxErrorCannotHandshakeWithPort0: ::std::os::raw::c_int = -200127;
pub const DAQmxErrorControlLineConflictOnPortC: ::std::os::raw::c_int =
    -200126;
pub const DAQmxErrorLines4To7ConfiguredForOutput: ::std::os::raw::c_int =
    -200125;
pub const DAQmxErrorLines4To7ConfiguredForInput: ::std::os::raw::c_int =
    -200124;
pub const DAQmxErrorLines0To3ConfiguredForOutput: ::std::os::raw::c_int =
    -200123;
pub const DAQmxErrorLines0To3ConfiguredForInput: ::std::os::raw::c_int =
    -200122;
pub const DAQmxErrorPortConfiguredForOutput: ::std::os::raw::c_int = -200121;
pub const DAQmxErrorPortConfiguredForInput: ::std::os::raw::c_int = -200120;
pub const DAQmxErrorPortConfiguredForStaticDigitalOps: ::std::os::raw::c_int =
    -200119;
pub const DAQmxErrorPortReservedForHandshaking: ::std::os::raw::c_int =
    -200118;
pub const DAQmxErrorPortDoesNotSupportHandshakingDataIO: ::std::os::raw::c_int
          =
    -200117;
pub const DAQmxErrorCannotTristate8255OutputLines: ::std::os::raw::c_int =
    -200116;
pub const DAQmxErrorTemperatureOutOfRangeForCalibration: ::std::os::raw::c_int
          =
    -200113;
pub const DAQmxErrorCalibrationHandleInvalid: ::std::os::raw::c_int = -200112;
pub const DAQmxErrorPasswordRequired: ::std::os::raw::c_int = -200111;
pub const DAQmxErrorIncorrectPassword: ::std::os::raw::c_int = -200110;
pub const DAQmxErrorPasswordTooLong: ::std::os::raw::c_int = -200109;
pub const DAQmxErrorCalibrationSessionAlreadyOpen: ::std::os::raw::c_int =
    -200108;
pub const DAQmxErrorSCXIModuleIncorrect: ::std::os::raw::c_int = -200107;
pub const DAQmxErrorAttributeInconsistentAcrossChannelsOnDevice:
          ::std::os::raw::c_int =
    -200106;
pub const DAQmxErrorSCXI1122ResistanceChanNotSupportedForCfg:
          ::std::os::raw::c_int =
    -200105;
pub const DAQmxErrorBracketPairingMismatchInList: ::std::os::raw::c_int =
    -200104;
pub const DAQmxErrorInconsistentNumSamplesToWrite: ::std::os::raw::c_int =
    -200103;
pub const DAQmxErrorIncorrectDigitalPattern: ::std::os::raw::c_int = -200102;
pub const DAQmxErrorIncorrectNumChannelsToWrite: ::std::os::raw::c_int =
    -200101;
pub const DAQmxErrorIncorrectReadFunction: ::std::os::raw::c_int = -200100;
pub const DAQmxErrorPhysicalChannelNotSpecified: ::std::os::raw::c_int =
    -200099;
pub const DAQmxErrorMoreThanOneTerminal: ::std::os::raw::c_int = -200098;
pub const DAQmxErrorMoreThanOneActiveChannelSpecified: ::std::os::raw::c_int =
    -200097;
pub const DAQmxErrorInvalidNumberSamplesToRead: ::std::os::raw::c_int =
    -200096;
pub const DAQmxErrorAnalogWaveformExpected: ::std::os::raw::c_int = -200095;
pub const DAQmxErrorDigitalWaveformExpected: ::std::os::raw::c_int = -200094;
pub const DAQmxErrorActiveChannelNotSpecified: ::std::os::raw::c_int =
    -200093;
pub const DAQmxErrorFunctionNotSupportedForDeviceTasks: ::std::os::raw::c_int
          =
    -200092;
pub const DAQmxErrorFunctionNotInLibrary: ::std::os::raw::c_int = -200091;
pub const DAQmxErrorLibraryNotPresent: ::std::os::raw::c_int = -200090;
pub const DAQmxErrorDuplicateTask: ::std::os::raw::c_int = -200089;
pub const DAQmxErrorInvalidTask: ::std::os::raw::c_int = -200088;
pub const DAQmxErrorInvalidChannel: ::std::os::raw::c_int = -200087;
pub const DAQmxErrorInvalidSyntaxForPhysicalChannelRange:
          ::std::os::raw::c_int =
    -200086;
pub const DAQmxErrorMinNotLessThanMax: ::std::os::raw::c_int = -200082;
pub const DAQmxErrorSampleRateNumChansConvertPeriodCombo:
          ::std::os::raw::c_int =
    -200081;
pub const DAQmxErrorAODuringCounter1DMAConflict: ::std::os::raw::c_int =
    -200079;
pub const DAQmxErrorAIDuringCounter0DMAConflict: ::std::os::raw::c_int =
    -200078;
pub const DAQmxErrorInvalidAttributeValue: ::std::os::raw::c_int = -200077;
pub const DAQmxErrorSuppliedCurrentDataOutsideSpecifiedRange:
          ::std::os::raw::c_int =
    -200076;
pub const DAQmxErrorSuppliedVoltageDataOutsideSpecifiedRange:
          ::std::os::raw::c_int =
    -200075;
pub const DAQmxErrorCannotStoreCalConst: ::std::os::raw::c_int = -200074;
pub const DAQmxErrorSCXIModuleNotFound: ::std::os::raw::c_int = -200073;
pub const DAQmxErrorDuplicatePhysicalChansNotSupported: ::std::os::raw::c_int
          =
    -200072;
pub const DAQmxErrorTooManyPhysicalChansInList: ::std::os::raw::c_int =
    -200071;
pub const DAQmxErrorInvalidAdvanceEventTriggerType: ::std::os::raw::c_int =
    -200070;
pub const DAQmxErrorDeviceIsNotAValidSwitch: ::std::os::raw::c_int = -200069;
pub const DAQmxErrorDeviceDoesNotSupportScanning: ::std::os::raw::c_int =
    -200068;
pub const DAQmxErrorScanListCannotBeTimed: ::std::os::raw::c_int = -200067;
pub const DAQmxErrorConnectOperatorInvalidAtPointInList: ::std::os::raw::c_int
          =
    -200066;
pub const DAQmxErrorUnexpectedSwitchActionInList: ::std::os::raw::c_int =
    -200065;
pub const DAQmxErrorUnexpectedSeparatorInList: ::std::os::raw::c_int =
    -200064;
pub const DAQmxErrorExpectedTerminatorInList: ::std::os::raw::c_int = -200063;
pub const DAQmxErrorExpectedConnectOperatorInList: ::std::os::raw::c_int =
    -200062;
pub const DAQmxErrorExpectedSeparatorInList: ::std::os::raw::c_int = -200061;
pub const DAQmxErrorFullySpecifiedPathInListContainsRange:
          ::std::os::raw::c_int =
    -200060;
pub const DAQmxErrorConnectionSeparatorAtEndOfList: ::std::os::raw::c_int =
    -200059;
pub const DAQmxErrorIdentifierInListTooLong: ::std::os::raw::c_int = -200058;
pub const DAQmxErrorDuplicateDeviceIDInListWhenSettling: ::std::os::raw::c_int
          =
    -200057;
pub const DAQmxErrorChannelNameNotSpecifiedInList: ::std::os::raw::c_int =
    -200056;
pub const DAQmxErrorDeviceIDNotSpecifiedInList: ::std::os::raw::c_int =
    -200055;
pub const DAQmxErrorSemicolonDoesNotFollowRangeInList: ::std::os::raw::c_int =
    -200054;
pub const DAQmxErrorSwitchActionInListSpansMultipleDevices:
          ::std::os::raw::c_int =
    -200053;
pub const DAQmxErrorRangeWithoutAConnectActionInList: ::std::os::raw::c_int =
    -200052;
pub const DAQmxErrorInvalidIdentifierFollowingSeparatorInList:
          ::std::os::raw::c_int =
    -200051;
pub const DAQmxErrorInvalidChannelNameInList: ::std::os::raw::c_int = -200050;
pub const DAQmxErrorInvalidNumberInRepeatStatementInList:
          ::std::os::raw::c_int =
    -200049;
pub const DAQmxErrorInvalidTriggerLineInList: ::std::os::raw::c_int = -200048;
pub const DAQmxErrorInvalidIdentifierInListFollowingDeviceID:
          ::std::os::raw::c_int =
    -200047;
pub const DAQmxErrorInvalidIdentifierInListAtEndOfSwitchAction:
          ::std::os::raw::c_int =
    -200046;
pub const DAQmxErrorDeviceRemoved: ::std::os::raw::c_int = -200045;
pub const DAQmxErrorRoutingPathNotAvailable: ::std::os::raw::c_int = -200044;
pub const DAQmxErrorRoutingHardwareBusy: ::std::os::raw::c_int = -200043;
pub const DAQmxErrorRequestedSignalInversionForRoutingNotPossible:
          ::std::os::raw::c_int =
    -200042;
pub const DAQmxErrorInvalidRoutingDestinationTerminalName:
          ::std::os::raw::c_int =
    -200041;
pub const DAQmxErrorInvalidRoutingSourceTerminalName: ::std::os::raw::c_int =
    -200040;
pub const DAQmxErrorRoutingNotSupportedForDevice: ::std::os::raw::c_int =
    -200039;
pub const DAQmxErrorWaitIsLastInstructionOfLoopInScript: ::std::os::raw::c_int
          =
    -200038;
pub const DAQmxErrorClearIsLastInstructionOfLoopInScript:
          ::std::os::raw::c_int =
    -200037;
pub const DAQmxErrorInvalidLoopIterationsInScript: ::std::os::raw::c_int =
    -200036;
pub const DAQmxErrorRepeatLoopNestingTooDeepInScript: ::std::os::raw::c_int =
    -200035;
pub const DAQmxErrorMarkerPositionOutsideSubsetInScript: ::std::os::raw::c_int
          =
    -200034;
pub const DAQmxErrorSubsetStartOffsetNotAlignedInScript: ::std::os::raw::c_int
          =
    -200033;
pub const DAQmxErrorInvalidSubsetLengthInScript: ::std::os::raw::c_int =
    -200032;
pub const DAQmxErrorMarkerPositionNotAlignedInScript: ::std::os::raw::c_int =
    -200031;
pub const DAQmxErrorSubsetOutsideWaveformInScript: ::std::os::raw::c_int =
    -200030;
pub const DAQmxErrorMarkerOutsideWaveformInScript: ::std::os::raw::c_int =
    -200029;
pub const DAQmxErrorWaveformInScriptNotInMem: ::std::os::raw::c_int = -200028;
pub const DAQmxErrorKeywordExpectedInScript: ::std::os::raw::c_int = -200027;
pub const DAQmxErrorBufferNameExpectedInScript: ::std::os::raw::c_int =
    -200026;
pub const DAQmxErrorProcedureNameExpectedInScript: ::std::os::raw::c_int =
    -200025;
pub const DAQmxErrorScriptHasInvalidIdentifier: ::std::os::raw::c_int =
    -200024;
pub const DAQmxErrorScriptHasInvalidCharacter: ::std::os::raw::c_int =
    -200023;
pub const DAQmxErrorResourceAlreadyReserved: ::std::os::raw::c_int = -200022;
pub const DAQmxErrorSelfTestFailed: ::std::os::raw::c_int = -200020;
pub const DAQmxErrorADCOverrun: ::std::os::raw::c_int = -200019;
pub const DAQmxErrorDACUnderflow: ::std::os::raw::c_int = -200018;
pub const DAQmxErrorInputFIFOUnderflow: ::std::os::raw::c_int = -200017;
pub const DAQmxErrorOutputFIFOUnderflow: ::std::os::raw::c_int = -200016;
pub const DAQmxErrorSCXISerialCommunication: ::std::os::raw::c_int = -200015;
pub const DAQmxErrorDigitalTerminalSpecifiedMoreThanOnce:
          ::std::os::raw::c_int =
    -200014;
pub const DAQmxErrorDigitalOutputNotSupported: ::std::os::raw::c_int =
    -200012;
pub const DAQmxErrorInconsistentChannelDirections: ::std::os::raw::c_int =
    -200011;
pub const DAQmxErrorInputFIFOOverflow: ::std::os::raw::c_int = -200010;
pub const DAQmxErrorTimeStampOverwritten: ::std::os::raw::c_int = -200009;
pub const DAQmxErrorStopTriggerHasNotOccurred: ::std::os::raw::c_int =
    -200008;
pub const DAQmxErrorRecordNotAvailable: ::std::os::raw::c_int = -200007;
pub const DAQmxErrorRecordOverwritten: ::std::os::raw::c_int = -200006;
pub const DAQmxErrorDataNotAvailable: ::std::os::raw::c_int = -200005;
pub const DAQmxErrorDataOverwrittenInDeviceMemory: ::std::os::raw::c_int =
    -200004;
pub const DAQmxErrorDuplicatedChannel: ::std::os::raw::c_int = -200003;
pub const DAQmxWarningTimestampCounterRolledOver: ::std::os::raw::c_uint =
    200003;
pub const DAQmxWarningInputTerminationOverloaded: ::std::os::raw::c_uint =
    200004;
pub const DAQmxWarningADCOverloaded: ::std::os::raw::c_uint = 200005;
pub const DAQmxWarningPLLUnlocked: ::std::os::raw::c_uint = 200007;
pub const DAQmxWarningCounter0DMADuringAIConflict: ::std::os::raw::c_uint =
    200008;
pub const DAQmxWarningCounter1DMADuringAOConflict: ::std::os::raw::c_uint =
    200009;
pub const DAQmxWarningStoppedBeforeDone: ::std::os::raw::c_uint = 200010;
pub const DAQmxWarningRateViolatesSettlingTime: ::std::os::raw::c_uint =
    200011;
pub const DAQmxWarningRateViolatesMaxADCRate: ::std::os::raw::c_uint = 200012;
pub const DAQmxWarningUserDefInfoStringTooLong: ::std::os::raw::c_uint =
    200013;
pub const DAQmxWarningTooManyInterruptsPerSecond: ::std::os::raw::c_uint =
    200014;
pub const DAQmxWarningPotentialGlitchDuringWrite: ::std::os::raw::c_uint =
    200015;
pub const DAQmxWarningDevNotSelfCalibratedWithDAQmx: ::std::os::raw::c_uint =
    200016;
pub const DAQmxWarningAISampRateTooLow: ::std::os::raw::c_uint = 200017;
pub const DAQmxWarningAIConvRateTooLow: ::std::os::raw::c_uint = 200018;
pub const DAQmxWarningReadOffsetCoercion: ::std::os::raw::c_uint = 200019;
pub const DAQmxWarningPretrigCoercion: ::std::os::raw::c_uint = 200020;
pub const DAQmxWarningSampValCoercedToMax: ::std::os::raw::c_uint = 200021;
pub const DAQmxWarningSampValCoercedToMin: ::std::os::raw::c_uint = 200022;
pub const DAQmxWarningPropertyVersionNew: ::std::os::raw::c_uint = 200024;
pub const DAQmxWarningUserDefinedInfoTooLong: ::std::os::raw::c_uint = 200025;
pub const DAQmxWarningCAPIStringTruncatedToFitBuffer: ::std::os::raw::c_uint =
    200026;
pub const DAQmxWarningSampClkRateTooLow: ::std::os::raw::c_uint = 200027;
pub const DAQmxWarningPossiblyInvalidCTRSampsInFiniteDMAAcq:
          ::std::os::raw::c_uint =
    200028;
pub const DAQmxWarningRISAcqCompletedSomeBinsNotFilled: ::std::os::raw::c_uint
          =
    200029;
pub const DAQmxWarningPXIDevTempExceedsMaxOpTemp: ::std::os::raw::c_uint =
    200030;
pub const DAQmxWarningOutputGainTooLowForRFFreq: ::std::os::raw::c_uint =
    200031;
pub const DAQmxWarningOutputGainTooHighForRFFreq: ::std::os::raw::c_uint =
    200032;
pub const DAQmxWarningMultipleWritesBetweenSampClks: ::std::os::raw::c_uint =
    200033;
pub const DAQmxWarningDeviceMayShutDownDueToHighTemp: ::std::os::raw::c_uint =
    200034;
pub const DAQmxWarningRateViolatesMinADCRate: ::std::os::raw::c_uint = 200035;
pub const DAQmxWarningSampClkRateAboveDevSpecs: ::std::os::raw::c_uint =
    200036;
pub const DAQmxWarningCOPrevDAQmxWriteSettingsOverwrittenForHWTimedSinglePoint:
          ::std::os::raw::c_uint =
    200037;
pub const DAQmxWarningLowpassFilterSettlingTimeExceedsUserTimeBetween2ADCConversions:
          ::std::os::raw::c_uint =
    200038;
pub const DAQmxWarningLowpassFilterSettlingTimeExceedsDriverTimeBetween2ADCConversions:
          ::std::os::raw::c_uint =
    200039;
pub const DAQmxWarningSampClkRateViolatesSettlingTimeForGen:
          ::std::os::raw::c_uint =
    200040;
pub const DAQmxWarningInvalidCalConstValueForAI: ::std::os::raw::c_uint =
    200041;
pub const DAQmxWarningInvalidCalConstValueForAO: ::std::os::raw::c_uint =
    200042;
pub const DAQmxWarningChanCalExpired: ::std::os::raw::c_uint = 200043;
pub const DAQmxWarningUnrecognizedEnumValueEncounteredInStorage:
          ::std::os::raw::c_uint =
    200044;
pub const DAQmxWarningTableCRCNotCorrect: ::std::os::raw::c_uint = 200045;
pub const DAQmxWarningExternalCRCNotCorrect: ::std::os::raw::c_uint = 200046;
pub const DAQmxWarningSelfCalCRCNotCorrect: ::std::os::raw::c_uint = 200047;
pub const DAQmxWarningDeviceSpecExceeded: ::std::os::raw::c_uint = 200048;
pub const DAQmxWarningOnlyGainCalibrated: ::std::os::raw::c_uint = 200049;
pub const DAQmxWarningReversePowerProtectionActivated: ::std::os::raw::c_uint
          =
    200050;
pub const DAQmxWarningOverVoltageProtectionActivated: ::std::os::raw::c_uint =
    200051;
pub const DAQmxWarningBufferSizeNotMultipleOfSectorSize:
          ::std::os::raw::c_uint =
    200052;
pub const DAQmxWarningSampleRateMayCauseAcqToFail: ::std::os::raw::c_uint =
    200053;
pub const DAQmxWarningUserAreaCRCNotCorrect: ::std::os::raw::c_uint = 200054;
pub const DAQmxWarningPowerUpInfoCRCNotCorrect: ::std::os::raw::c_uint =
    200055;
pub const DAQmxWarningConnectionCountHasExceededRecommendedLimit:
          ::std::os::raw::c_uint =
    200056;
pub const DAQmxWarningNetworkDeviceAlreadyAdded: ::std::os::raw::c_uint =
    200057;
pub const DAQmxWarningAccessoryConnectionCountIsInvalid:
          ::std::os::raw::c_uint =
    200058;
pub const DAQmxWarningUnableToDisconnectPorts: ::std::os::raw::c_uint =
    200059;
pub const DAQmxWarningReadRepeatedData: ::std::os::raw::c_uint = 200060;
pub const DAQmxWarningPXI5600_NotConfigured: ::std::os::raw::c_uint = 200061;
pub const DAQmxWarningPXI5661_IncorrectlyConfigured: ::std::os::raw::c_uint =
    200062;
pub const DAQmxWarningPXIe5601_NotConfigured: ::std::os::raw::c_uint = 200063;
pub const DAQmxWarningPXIe5663_IncorrectlyConfigured: ::std::os::raw::c_uint =
    200064;
pub const DAQmxWarningPXIe5663E_IncorrectlyConfigured: ::std::os::raw::c_uint
          =
    200065;
pub const DAQmxWarningPXIe5603_NotConfigured: ::std::os::raw::c_uint = 200066;
pub const DAQmxWarningPXIe5665_5603_IncorrectlyConfigured:
          ::std::os::raw::c_uint =
    200067;
pub const DAQmxWarningPXIe5667_5603_IncorrectlyConfigured:
          ::std::os::raw::c_uint =
    200068;
pub const DAQmxWarningPXIe5605_NotConfigured: ::std::os::raw::c_uint = 200069;
pub const DAQmxWarningPXIe5665_5605_IncorrectlyConfigured:
          ::std::os::raw::c_uint =
    200070;
pub const DAQmxWarningPXIe5667_5605_IncorrectlyConfigured:
          ::std::os::raw::c_uint =
    200071;
pub const DAQmxWarningPXIe5606_NotConfigured: ::std::os::raw::c_uint = 200072;
pub const DAQmxWarningPXIe5665_5606_IncorrectlyConfigured:
          ::std::os::raw::c_uint =
    200073;
pub const DAQmxWarningPXI5610_NotConfigured: ::std::os::raw::c_uint = 200074;
pub const DAQmxWarningPXI5610_IncorrectlyConfigured: ::std::os::raw::c_uint =
    200075;
pub const DAQmxWarningPXIe5611_NotConfigured: ::std::os::raw::c_uint = 200076;
pub const DAQmxWarningPXIe5611_IncorrectlyConfigured: ::std::os::raw::c_uint =
    200077;
pub const DAQmxWarningUSBHotfixForDAQ: ::std::os::raw::c_uint = 200078;
pub const DAQmxWarningNoChangeSupersededByIdleBehavior: ::std::os::raw::c_uint
          =
    200079;
pub const DAQmxWarningReadNotCompleteBeforeSampClk: ::std::os::raw::c_uint =
    209800;
pub const DAQmxWarningWriteNotCompleteBeforeSampClk: ::std::os::raw::c_uint =
    209801;
pub const DAQmxWarningWaitForNextSampClkDetectedMissedSampClk:
          ::std::os::raw::c_uint =
    209802;
pub const DAQmxWarningOutputDataTransferConditionNotSupported:
          ::std::os::raw::c_uint =
    209803;
pub const DAQmxErrorRoutingDestTermPXIDStarXNotInSystemTimingSlot_Routing:
          ::std::os::raw::c_int =
    -89167;
pub const DAQmxErrorRoutingSrcTermPXIDStarXNotInSystemTimingSlot_Routing:
          ::std::os::raw::c_int =
    -89166;
pub const DAQmxErrorRoutingSrcTermPXIDStarInNonDStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89165;
pub const DAQmxErrorRoutingDestTermPXIDStarInNonDStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89164;
pub const DAQmxErrorRoutingDestTermPXIClk10InNotInStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89162;
pub const DAQmxErrorRoutingDestTermPXIClk10InNotInSystemTimingSlot_Routing:
          ::std::os::raw::c_int =
    -89161;
pub const DAQmxErrorRoutingDestTermPXIStarXNotInStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89160;
pub const DAQmxErrorRoutingDestTermPXIStarXNotInSystemTimingSlot_Routing:
          ::std::os::raw::c_int =
    -89159;
pub const DAQmxErrorRoutingSrcTermPXIStarXNotInStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89158;
pub const DAQmxErrorRoutingSrcTermPXIStarXNotInSystemTimingSlot_Routing:
          ::std::os::raw::c_int =
    -89157;
pub const DAQmxErrorRoutingSrcTermPXIStarInNonStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89156;
pub const DAQmxErrorRoutingDestTermPXIStarInNonStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89155;
pub const DAQmxErrorRoutingDestTermPXIStarInStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89154;
pub const DAQmxErrorRoutingDestTermPXIStarInSystemTimingSlot_Routing:
          ::std::os::raw::c_int =
    -89153;
pub const DAQmxErrorRoutingSrcTermPXIStarInStarTriggerSlot_Routing:
          ::std::os::raw::c_int =
    -89152;
pub const DAQmxErrorRoutingSrcTermPXIStarInSystemTimingSlot_Routing:
          ::std::os::raw::c_int =
    -89151;
pub const DAQmxErrorInvalidSignalModifier_Routing: ::std::os::raw::c_int =
    -89150;
pub const DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2_Routing:
          ::std::os::raw::c_int =
    -89149;
pub const DAQmxErrorRoutingDestTermPXIStarXNotInSlot2_Routing:
          ::std::os::raw::c_int =
    -89148;
pub const DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2_Routing:
          ::std::os::raw::c_int =
    -89147;
pub const DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove_Routing:
          ::std::os::raw::c_int =
    -89146;
pub const DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove_Routing:
          ::std::os::raw::c_int =
    -89145;
pub const DAQmxErrorRoutingDestTermPXIStarInSlot2_Routing:
          ::std::os::raw::c_int =
    -89144;
pub const DAQmxErrorRoutingSrcTermPXIStarInSlot2_Routing:
          ::std::os::raw::c_int =
    -89143;
pub const DAQmxErrorRoutingDestTermPXIChassisNotIdentified_Routing:
          ::std::os::raw::c_int =
    -89142;
pub const DAQmxErrorRoutingSrcTermPXIChassisNotIdentified_Routing:
          ::std::os::raw::c_int =
    -89141;
pub const DAQmxErrorTrigLineNotFoundSingleDevRoute_Routing:
          ::std::os::raw::c_int =
    -89140;
pub const DAQmxErrorNoCommonTrigLineForRoute_Routing: ::std::os::raw::c_int =
    -89139;
pub const DAQmxErrorResourcesInUseForRouteInTask_Routing:
          ::std::os::raw::c_int =
    -89138;
pub const DAQmxErrorResourcesInUseForRoute_Routing: ::std::os::raw::c_int =
    -89137;
pub const DAQmxErrorRouteNotSupportedByHW_Routing: ::std::os::raw::c_int =
    -89136;
pub const DAQmxErrorResourcesInUseForInversionInTask_Routing:
          ::std::os::raw::c_int =
    -89135;
pub const DAQmxErrorResourcesInUseForInversion_Routing: ::std::os::raw::c_int
          =
    -89134;
pub const DAQmxErrorInversionNotSupportedByHW_Routing: ::std::os::raw::c_int =
    -89133;
pub const DAQmxErrorResourcesInUseForProperty_Routing: ::std::os::raw::c_int =
    -89132;
pub const DAQmxErrorRouteSrcAndDestSame_Routing: ::std::os::raw::c_int =
    -89131;
pub const DAQmxErrorDevAbsentOrUnavailable_Routing: ::std::os::raw::c_int =
    -89130;
pub const DAQmxErrorInvalidTerm_Routing: ::std::os::raw::c_int = -89129;
pub const DAQmxErrorCannotTristateTerm_Routing: ::std::os::raw::c_int =
    -89128;
pub const DAQmxErrorCannotTristateBusyTerm_Routing: ::std::os::raw::c_int =
    -89127;
pub const DAQmxErrorCouldNotReserveRequestedTrigLine_Routing:
          ::std::os::raw::c_int =
    -89126;
pub const DAQmxErrorTrigLineNotFound_Routing: ::std::os::raw::c_int = -89125;
pub const DAQmxErrorRoutingPathNotAvailable_Routing: ::std::os::raw::c_int =
    -89124;
pub const DAQmxErrorRoutingHardwareBusy_Routing: ::std::os::raw::c_int =
    -89123;
pub const DAQmxErrorRequestedSignalInversionForRoutingNotPossible_Routing:
          ::std::os::raw::c_int =
    -89122;
pub const DAQmxErrorInvalidRoutingDestinationTerminalName_Routing:
          ::std::os::raw::c_int =
    -89121;
pub const DAQmxErrorInvalidRoutingSourceTerminalName_Routing:
          ::std::os::raw::c_int =
    -89120;
pub const DAQmxErrorServiceLocatorNotAvailable_Routing: ::std::os::raw::c_int
          =
    -88907;
pub const DAQmxErrorCouldNotConnectToServer_Routing: ::std::os::raw::c_int =
    -88900;
pub const DAQmxErrorDeviceNameContainsSpacesOrPunctuation_Routing:
          ::std::os::raw::c_int =
    -88720;
pub const DAQmxErrorDeviceNameContainsNonprintableCharacters_Routing:
          ::std::os::raw::c_int =
    -88719;
pub const DAQmxErrorDeviceNameIsEmpty_Routing: ::std::os::raw::c_int = -88718;
pub const DAQmxErrorDeviceNameNotFound_Routing: ::std::os::raw::c_int =
    -88717;
pub const DAQmxErrorLocalRemoteDriverVersionMismatch_Routing:
          ::std::os::raw::c_int =
    -88716;
pub const DAQmxErrorDuplicateDeviceName_Routing: ::std::os::raw::c_int =
    -88715;
pub const DAQmxErrorRuntimeAborting_Routing: ::std::os::raw::c_int = -88710;
pub const DAQmxErrorRuntimeAborted_Routing: ::std::os::raw::c_int = -88709;
pub const DAQmxErrorResourceNotInPool_Routing: ::std::os::raw::c_int = -88708;
pub const DAQmxErrorDriverDeviceGUIDNotFound_Routing: ::std::os::raw::c_int =
    -88705;
pub const DAQmxErrorPALUSBTransactionError: ::std::os::raw::c_int = -50808;
pub const DAQmxErrorPALIsocStreamBufferError: ::std::os::raw::c_int = -50807;
pub const DAQmxErrorPALInvalidAddressComponent: ::std::os::raw::c_int =
    -50806;
pub const DAQmxErrorPALSharingViolation: ::std::os::raw::c_int = -50805;
pub const DAQmxErrorPALInvalidDeviceState: ::std::os::raw::c_int = -50804;
pub const DAQmxErrorPALConnectionReset: ::std::os::raw::c_int = -50803;
pub const DAQmxErrorPALConnectionAborted: ::std::os::raw::c_int = -50802;
pub const DAQmxErrorPALConnectionRefused: ::std::os::raw::c_int = -50801;
pub const DAQmxErrorPALBusResetOccurred: ::std::os::raw::c_int = -50800;
pub const DAQmxErrorPALWaitInterrupted: ::std::os::raw::c_int = -50700;
pub const DAQmxErrorPALMessageUnderflow: ::std::os::raw::c_int = -50651;
pub const DAQmxErrorPALMessageOverflow: ::std::os::raw::c_int = -50650;
pub const DAQmxErrorPALThreadAlreadyDead: ::std::os::raw::c_int = -50604;
pub const DAQmxErrorPALThreadStackSizeNotSupported: ::std::os::raw::c_int =
    -50603;
pub const DAQmxErrorPALThreadControllerIsNotThreadCreator:
          ::std::os::raw::c_int =
    -50602;
pub const DAQmxErrorPALThreadHasNoThreadObject: ::std::os::raw::c_int =
    -50601;
pub const DAQmxErrorPALThreadCouldNotRun: ::std::os::raw::c_int = -50600;
pub const DAQmxErrorPALSyncAbandoned: ::std::os::raw::c_int = -50551;
pub const DAQmxErrorPALSyncTimedOut: ::std::os::raw::c_int = -50550;
pub const DAQmxErrorPALReceiverSocketInvalid: ::std::os::raw::c_int = -50503;
pub const DAQmxErrorPALSocketListenerInvalid: ::std::os::raw::c_int = -50502;
pub const DAQmxErrorPALSocketListenerAlreadyRegistered: ::std::os::raw::c_int
          =
    -50501;
pub const DAQmxErrorPALDispatcherAlreadyExported: ::std::os::raw::c_int =
    -50500;
pub const DAQmxErrorPALDMALinkEventMissed: ::std::os::raw::c_int = -50450;
pub const DAQmxErrorPALBusError: ::std::os::raw::c_int = -50413;
pub const DAQmxErrorPALRetryLimitExceeded: ::std::os::raw::c_int = -50412;
pub const DAQmxErrorPALTransferOverread: ::std::os::raw::c_int = -50411;
pub const DAQmxErrorPALTransferOverwritten: ::std::os::raw::c_int = -50410;
pub const DAQmxErrorPALPhysicalBufferFull: ::std::os::raw::c_int = -50409;
pub const DAQmxErrorPALPhysicalBufferEmpty: ::std::os::raw::c_int = -50408;
pub const DAQmxErrorPALLogicalBufferFull: ::std::os::raw::c_int = -50407;
pub const DAQmxErrorPALLogicalBufferEmpty: ::std::os::raw::c_int = -50406;
pub const DAQmxErrorPALTransferAborted: ::std::os::raw::c_int = -50405;
pub const DAQmxErrorPALTransferStopped: ::std::os::raw::c_int = -50404;
pub const DAQmxErrorPALTransferInProgress: ::std::os::raw::c_int = -50403;
pub const DAQmxErrorPALTransferNotInProgress: ::std::os::raw::c_int = -50402;
pub const DAQmxErrorPALCommunicationsFault: ::std::os::raw::c_int = -50401;
pub const DAQmxErrorPALTransferTimedOut: ::std::os::raw::c_int = -50400;
pub const DAQmxErrorPALMemoryHeapNotEmpty: ::std::os::raw::c_int = -50355;
pub const DAQmxErrorPALMemoryBlockCheckFailed: ::std::os::raw::c_int = -50354;
pub const DAQmxErrorPALMemoryPageLockFailed: ::std::os::raw::c_int = -50353;
pub const DAQmxErrorPALMemoryFull: ::std::os::raw::c_int = -50352;
pub const DAQmxErrorPALMemoryAlignmentFault: ::std::os::raw::c_int = -50351;
pub const DAQmxErrorPALMemoryConfigurationFault: ::std::os::raw::c_int =
    -50350;
pub const DAQmxErrorPALDeviceInitializationFault: ::std::os::raw::c_int =
    -50303;
pub const DAQmxErrorPALDeviceNotSupported: ::std::os::raw::c_int = -50302;
pub const DAQmxErrorPALDeviceUnknown: ::std::os::raw::c_int = -50301;
pub const DAQmxErrorPALDeviceNotFound: ::std::os::raw::c_int = -50300;
pub const DAQmxErrorPALFeatureDisabled: ::std::os::raw::c_int = -50265;
pub const DAQmxErrorPALComponentBusy: ::std::os::raw::c_int = -50264;
pub const DAQmxErrorPALComponentAlreadyInstalled: ::std::os::raw::c_int =
    -50263;
pub const DAQmxErrorPALComponentNotUnloadable: ::std::os::raw::c_int = -50262;
pub const DAQmxErrorPALComponentNeverLoaded: ::std::os::raw::c_int = -50261;
pub const DAQmxErrorPALComponentAlreadyLoaded: ::std::os::raw::c_int = -50260;
pub const DAQmxErrorPALComponentCircularDependency: ::std::os::raw::c_int =
    -50259;
pub const DAQmxErrorPALComponentInitializationFault: ::std::os::raw::c_int =
    -50258;
pub const DAQmxErrorPALComponentImageCorrupt: ::std::os::raw::c_int = -50257;
pub const DAQmxErrorPALFeatureNotSupported: ::std::os::raw::c_int = -50256;
pub const DAQmxErrorPALFunctionNotFound: ::std::os::raw::c_int = -50255;
pub const DAQmxErrorPALFunctionObsolete: ::std::os::raw::c_int = -50254;
pub const DAQmxErrorPALComponentTooNew: ::std::os::raw::c_int = -50253;
pub const DAQmxErrorPALComponentTooOld: ::std::os::raw::c_int = -50252;
pub const DAQmxErrorPALComponentNotFound: ::std::os::raw::c_int = -50251;
pub const DAQmxErrorPALVersionMismatch: ::std::os::raw::c_int = -50250;
pub const DAQmxErrorPALFileFault: ::std::os::raw::c_int = -50209;
pub const DAQmxErrorPALFileWriteFault: ::std::os::raw::c_int = -50208;
pub const DAQmxErrorPALFileReadFault: ::std::os::raw::c_int = -50207;
pub const DAQmxErrorPALFileSeekFault: ::std::os::raw::c_int = -50206;
pub const DAQmxErrorPALFileCloseFault: ::std::os::raw::c_int = -50205;
pub const DAQmxErrorPALFileOpenFault: ::std::os::raw::c_int = -50204;
pub const DAQmxErrorPALDiskFull: ::std::os::raw::c_int = -50203;
pub const DAQmxErrorPALOSFault: ::std::os::raw::c_int = -50202;
pub const DAQmxErrorPALOSInitializationFault: ::std::os::raw::c_int = -50201;
pub const DAQmxErrorPALOSUnsupported: ::std::os::raw::c_int = -50200;
pub const DAQmxErrorPALCalculationOverflow: ::std::os::raw::c_int = -50175;
pub const DAQmxErrorPALHardwareFault: ::std::os::raw::c_int = -50152;
pub const DAQmxErrorPALFirmwareFault: ::std::os::raw::c_int = -50151;
pub const DAQmxErrorPALSoftwareFault: ::std::os::raw::c_int = -50150;
pub const DAQmxErrorPALMessageQueueFull: ::std::os::raw::c_int = -50108;
pub const DAQmxErrorPALResourceAmbiguous: ::std::os::raw::c_int = -50107;
pub const DAQmxErrorPALResourceBusy: ::std::os::raw::c_int = -50106;
pub const DAQmxErrorPALResourceInitialized: ::std::os::raw::c_int = -50105;
pub const DAQmxErrorPALResourceNotInitialized: ::std::os::raw::c_int = -50104;
pub const DAQmxErrorPALResourceReserved: ::std::os::raw::c_int = -50103;
pub const DAQmxErrorPALResourceNotReserved: ::std::os::raw::c_int = -50102;
pub const DAQmxErrorPALResourceNotAvailable: ::std::os::raw::c_int = -50101;
pub const DAQmxErrorPALResourceOwnedBySystem: ::std::os::raw::c_int = -50100;
pub const DAQmxErrorPALBadToken: ::std::os::raw::c_int = -50020;
pub const DAQmxErrorPALBadThreadMultitask: ::std::os::raw::c_int = -50019;
pub const DAQmxErrorPALBadLibrarySpecifier: ::std::os::raw::c_int = -50018;
pub const DAQmxErrorPALBadAddressSpace: ::std::os::raw::c_int = -50017;
pub const DAQmxErrorPALBadWindowType: ::std::os::raw::c_int = -50016;
pub const DAQmxErrorPALBadAddressClass: ::std::os::raw::c_int = -50015;
pub const DAQmxErrorPALBadWriteCount: ::std::os::raw::c_int = -50014;
pub const DAQmxErrorPALBadWriteOffset: ::std::os::raw::c_int = -50013;
pub const DAQmxErrorPALBadWriteMode: ::std::os::raw::c_int = -50012;
pub const DAQmxErrorPALBadReadCount: ::std::os::raw::c_int = -50011;
pub const DAQmxErrorPALBadReadOffset: ::std::os::raw::c_int = -50010;
pub const DAQmxErrorPALBadReadMode: ::std::os::raw::c_int = -50009;
pub const DAQmxErrorPALBadCount: ::std::os::raw::c_int = -50008;
pub const DAQmxErrorPALBadOffset: ::std::os::raw::c_int = -50007;
pub const DAQmxErrorPALBadMode: ::std::os::raw::c_int = -50006;
pub const DAQmxErrorPALBadDataSize: ::std::os::raw::c_int = -50005;
pub const DAQmxErrorPALBadPointer: ::std::os::raw::c_int = -50004;
pub const DAQmxErrorPALBadSelector: ::std::os::raw::c_int = -50003;
pub const DAQmxErrorPALBadDevice: ::std::os::raw::c_int = -50002;
pub const DAQmxErrorPALIrrelevantAttribute: ::std::os::raw::c_int = -50001;
pub const DAQmxErrorPALValueConflict: ::std::os::raw::c_int = -50000;
pub const DAQmxErrorRetryCall: ::std::os::raw::c_short = -26853;
pub const DAQmxErrorFileDoesNotExist: ::std::os::raw::c_short = -26852;
pub const DAQmxErrorGenerationDisabled: ::std::os::raw::c_short = -26851;
pub const DAQmxErrorAlreadyInitialized: ::std::os::raw::c_short = -26850;
pub const DAQmxErrorPXISystemDescriptionParseError: ::std::os::raw::c_short =
    -26809;
pub const DAQmxErrorPXISAConfigurationLocked: ::std::os::raw::c_short =
    -26808;
pub const DAQmxErrorNotActiveResourceManager: ::std::os::raw::c_short =
    -26807;
pub const DAQmxErrorInvalidAttribute: ::std::os::raw::c_short = -26806;
pub const DAQmxErrorInvalidHandle: ::std::os::raw::c_short = -26805;
pub const DAQmxErrorServiceNotRunning: ::std::os::raw::c_short = -26804;
pub const DAQmxErrorRecursiveCall: ::std::os::raw::c_short = -26803;
pub const DAQmxErrorTimeout: ::std::os::raw::c_short = -26802;
pub const DAQmxErrorUnspecifiedError: ::std::os::raw::c_short = -26801;
pub const DAQmxErrorHandlerNotFound: ::std::os::raw::c_short = -26657;
pub const DAQmxErrorIncorrectDataType: ::std::os::raw::c_short = -26656;
pub const DAQmxErrorInconsistentFileFault: ::std::os::raw::c_short = -26655;
pub const DAQmxErrorChildNotFound: ::std::os::raw::c_short = -26654;
pub const DAQmxErrorAttributeNotFound: ::std::os::raw::c_short = -26653;
pub const DAQmxErrorIOError: ::std::os::raw::c_short = -26652;
pub const DAQmxErrorPxiResmanMxsPxiSystemNotFound: ::std::os::raw::c_short =
    -26600;
pub const DAQmxErrorPxiResmanPciDescriptionStringParseError:
          ::std::os::raw::c_short =
    -26550;
pub const DAQmxErrorPxiResmanModuleParseError: ::std::os::raw::c_short =
    -26500;
pub const DAQmxErrorPxiResmanSystemDescriptionSpecLimitation:
          ::std::os::raw::c_short =
    -26403;
pub const DAQmxErrorPxiResmanSystemDescriptionWriteError:
          ::std::os::raw::c_short =
    -26402;
pub const DAQmxErrorPxiResmanSystemDescriptionParseError:
          ::std::os::raw::c_short =
    -26401;
pub const DAQmxErrorPxiResmanSystemDescriptionFileNotFound:
          ::std::os::raw::c_short =
    -26400;
pub const DAQmxErrorPxiResmanControllerParseError: ::std::os::raw::c_short =
    -26302;
pub const DAQmxErrorPxiResmanControllerTypeInvalid: ::std::os::raw::c_short =
    -26301;
pub const DAQmxErrorPxiResmanControllerFileNotFound: ::std::os::raw::c_short =
    -26300;
pub const DAQmxErrorPxiResmanChassisTriggerParseError: ::std::os::raw::c_short
          =
    -26206;
pub const DAQmxErrorPxiResmanChassisBridgeParseError: ::std::os::raw::c_short
          =
    -26205;
pub const DAQmxErrorPxiResmanChassisSlotParseError: ::std::os::raw::c_short =
    -26204;
pub const DAQmxErrorPxiResmanChassisSegmentParseError: ::std::os::raw::c_short
          =
    -26203;
pub const DAQmxErrorPxiResmanChassisParseError: ::std::os::raw::c_short =
    -26202;
pub const DAQmxErrorPxiResmanChassisBridgeNotFound: ::std::os::raw::c_short =
    -26201;
pub const DAQmxErrorPxiResmanChassisFileNotFound: ::std::os::raw::c_short =
    -26200;
pub const DAQmxErrorInsufficientBuffer: ::std::os::raw::c_short = -26113;
pub const DAQmxErrorDirCreateFault: ::std::os::raw::c_short = -26112;
pub const DAQmxErrorAccessDenied: ::std::os::raw::c_short = -26111;
pub const DAQmxErrorPathNotFound: ::std::os::raw::c_short = -26110;
pub const DAQmxErrorFileExists: ::std::os::raw::c_short = -26109;
pub const DAQmxErrorFileDeleteFault: ::std::os::raw::c_short = -26107;
pub const DAQmxErrorFileCopyFault: ::std::os::raw::c_short = -26106;
pub const DAQmxErrorFileCloseFault: ::std::os::raw::c_short = -26105;
pub const DAQmxErrorFileNotFound: ::std::os::raw::c_short = -26103;
pub const DAQmxErrorPxiResmanSystemNotInitialized: ::std::os::raw::c_short =
    -26102;
pub const DAQmxErrorPxiResmanInvalidConfiguration: ::std::os::raw::c_short =
    -26101;
pub const DAQmxErrorPxiResmanAllocationError: ::std::os::raw::c_short =
    -26100;
pub const DAQmxErrorTrigmanDisconnected: ::std::os::raw::c_short = -26010;
pub const DAQmxErrorTrigmanInvalidClient: ::std::os::raw::c_short = -26009;
pub const DAQmxErrorTrigmanConflictingRoute: ::std::os::raw::c_short = -26008;
pub const DAQmxErrorTrigmanConflictingRouteNoUnreserve:
          ::std::os::raw::c_short =
    -26007;
pub const DAQmxErrorTrigmanConflictingRouteGeneric: ::std::os::raw::c_short =
    -26006;
pub const DAQmxErrorTrigmanLineAlreadyReserved: ::std::os::raw::c_short =
    -26005;
pub const DAQmxErrorTrigmanLineNotReservedUnroutable: ::std::os::raw::c_short
          =
    -26004;
pub const DAQmxErrorTrigmanLineNotReserved: ::std::os::raw::c_short = -26003;
pub const DAQmxErrorTrigmanInvalidParameter: ::std::os::raw::c_short = -26002;
pub const DAQmxErrorTrigmanUnsupportedOper: ::std::os::raw::c_short = -26001;
pub const DAQmxErrorTrigmanUnknownError: ::std::os::raw::c_short = -26000;
pub const DAQmxWarningTrigmanUnknownError: ::std::os::raw::c_ushort = 26000;
pub const DAQmxWarningTrigmanUnsupportedOper: ::std::os::raw::c_ushort =
    26001;
pub const DAQmxWarningTrigmanInvalidParameter: ::std::os::raw::c_ushort =
    26002;
pub const DAQmxWarningTrigmanLineNotReserved: ::std::os::raw::c_ushort =
    26003;
pub const DAQmxWarningTrigmanLineNotReservedUnroutable:
          ::std::os::raw::c_ushort =
    26004;
pub const DAQmxWarningTrigmanLineAlreadyReserved: ::std::os::raw::c_ushort =
    26005;
pub const DAQmxWarningTrigmanConflictingRouteGeneric: ::std::os::raw::c_ushort
          =
    26006;
pub const DAQmxWarningTrigmanConflictingRouteNoUnreserve:
          ::std::os::raw::c_ushort =
    26007;
pub const DAQmxWarningTrigmanConflictingRoute: ::std::os::raw::c_ushort =
    26008;
pub const DAQmxWarningTrigmanInvalidClient: ::std::os::raw::c_ushort = 26009;
pub const DAQmxWarningTrigmanDisconnected: ::std::os::raw::c_ushort = 26010;
pub const DAQmxWarningPxiResmanAllocationError: ::std::os::raw::c_ushort =
    26100;
pub const DAQmxWarningPxiResmanInvalidConfiguration: ::std::os::raw::c_ushort
          =
    26101;
pub const DAQmxWarningPxiResmanSystemNotInitialized: ::std::os::raw::c_ushort
          =
    26102;
pub const DAQmxWarningFileNotFound: ::std::os::raw::c_ushort = 26103;
pub const DAQmxWarningFileCloseFault: ::std::os::raw::c_ushort = 26105;
pub const DAQmxWarningFileCopyFault: ::std::os::raw::c_ushort = 26106;
pub const DAQmxWarningFileDeleteFault: ::std::os::raw::c_ushort = 26107;
pub const DAQmxWarningFileExists: ::std::os::raw::c_ushort = 26109;
pub const DAQmxWarningPathNotFound: ::std::os::raw::c_ushort = 26110;
pub const DAQmxWarningAccessDenied: ::std::os::raw::c_ushort = 26111;
pub const DAQmxWarningDirCreateFault: ::std::os::raw::c_ushort = 26112;
pub const DAQmxWarningInsufficientBuffer: ::std::os::raw::c_ushort = 26113;
pub const DAQmxWarningPxiResmanChassisFileNotFound: ::std::os::raw::c_ushort =
    26200;
pub const DAQmxWarningPxiResmanChassisBridgeNotFound: ::std::os::raw::c_ushort
          =
    26201;
pub const DAQmxWarningPxiResmanChassisParseError: ::std::os::raw::c_ushort =
    26202;
pub const DAQmxWarningPxiResmanChassisSegmentParseError:
          ::std::os::raw::c_ushort =
    26203;
pub const DAQmxWarningPxiResmanChassisSlotParseError: ::std::os::raw::c_ushort
          =
    26204;
pub const DAQmxWarningPxiResmanChassisBridgeParseError:
          ::std::os::raw::c_ushort =
    26205;
pub const DAQmxWarningPxiResmanChassisTriggerParseError:
          ::std::os::raw::c_ushort =
    26206;
pub const DAQmxWarningPxiResmanControllerFileNotFound:
          ::std::os::raw::c_ushort =
    26300;
pub const DAQmxWarningPxiResmanControllerTypeInvalid: ::std::os::raw::c_ushort
          =
    26301;
pub const DAQmxWarningPxiResmanControllerParseError: ::std::os::raw::c_ushort
          =
    26302;
pub const DAQmxWarningPxiResmanSystemDescriptionFileNotFound:
          ::std::os::raw::c_ushort =
    26400;
pub const DAQmxWarningPxiResmanSystemDescriptionParseError:
          ::std::os::raw::c_ushort =
    26401;
pub const DAQmxWarningPxiResmanSystemDescriptionWriteError:
          ::std::os::raw::c_ushort =
    26402;
pub const DAQmxWarningPxiResmanSystemDescriptionSpecLimitation:
          ::std::os::raw::c_ushort =
    26403;
pub const DAQmxWarningPxiResmanModuleParseError: ::std::os::raw::c_ushort =
    26500;
pub const DAQmxWarningPxiResmanPciDescriptionStringParseError:
          ::std::os::raw::c_ushort =
    26550;
pub const DAQmxWarningPxiResmanMxsPxiSystemNotFound: ::std::os::raw::c_ushort
          =
    26600;
pub const DAQmxWarningIOError: ::std::os::raw::c_ushort = 26652;
pub const DAQmxWarningAttributeNotFound: ::std::os::raw::c_ushort = 26653;
pub const DAQmxWarningChildNotFound: ::std::os::raw::c_ushort = 26654;
pub const DAQmxWarningInconsistentFileFault: ::std::os::raw::c_ushort = 26655;
pub const DAQmxWarningIncorrectDataType: ::std::os::raw::c_ushort = 26656;
pub const DAQmxWarningHandlerNotFound: ::std::os::raw::c_ushort = 26657;
pub const DAQmxWarningUnspecifiedError: ::std::os::raw::c_ushort = 26801;
pub const DAQmxWarningTimeout: ::std::os::raw::c_ushort = 26802;
pub const DAQmxWarningRecursiveCall: ::std::os::raw::c_ushort = 26803;
pub const DAQmxWarningServiceNotRunning: ::std::os::raw::c_ushort = 26804;
pub const DAQmxWarningInvalidHandle: ::std::os::raw::c_ushort = 26805;
pub const DAQmxWarningInvalidAttribute: ::std::os::raw::c_ushort = 26806;
pub const DAQmxWarningNotActiveResourceManager: ::std::os::raw::c_ushort =
    26807;
pub const DAQmxWarningPXISAConfigurationLocked: ::std::os::raw::c_ushort =
    26808;
pub const DAQmxWarningPXISystemDescriptionParseError: ::std::os::raw::c_ushort
          =
    26809;
pub const DAQmxWarningAlreadyInitialized: ::std::os::raw::c_ushort = 26850;
pub const DAQmxWarningGenerationDisabled: ::std::os::raw::c_ushort = 26851;
pub const DAQmxWarningFileDoesNotExist: ::std::os::raw::c_ushort = 26852;
pub const DAQmxWarningRetryCall: ::std::os::raw::c_ushort = 26853;
pub const DAQmxWarningPALValueConflict: ::std::os::raw::c_ushort = 50000;
pub const DAQmxWarningPALIrrelevantAttribute: ::std::os::raw::c_ushort =
    50001;
pub const DAQmxWarningPALBadDevice: ::std::os::raw::c_ushort = 50002;
pub const DAQmxWarningPALBadSelector: ::std::os::raw::c_ushort = 50003;
pub const DAQmxWarningPALBadPointer: ::std::os::raw::c_ushort = 50004;
pub const DAQmxWarningPALBadDataSize: ::std::os::raw::c_ushort = 50005;
pub const DAQmxWarningPALBadMode: ::std::os::raw::c_ushort = 50006;
pub const DAQmxWarningPALBadOffset: ::std::os::raw::c_ushort = 50007;
pub const DAQmxWarningPALBadCount: ::std::os::raw::c_ushort = 50008;
pub const DAQmxWarningPALBadReadMode: ::std::os::raw::c_ushort = 50009;
pub const DAQmxWarningPALBadReadOffset: ::std::os::raw::c_ushort = 50010;
pub const DAQmxWarningPALBadReadCount: ::std::os::raw::c_ushort = 50011;
pub const DAQmxWarningPALBadWriteMode: ::std::os::raw::c_ushort = 50012;
pub const DAQmxWarningPALBadWriteOffset: ::std::os::raw::c_ushort = 50013;
pub const DAQmxWarningPALBadWriteCount: ::std::os::raw::c_ushort = 50014;
pub const DAQmxWarningPALBadAddressClass: ::std::os::raw::c_ushort = 50015;
pub const DAQmxWarningPALBadWindowType: ::std::os::raw::c_ushort = 50016;
pub const DAQmxWarningPALBadThreadMultitask: ::std::os::raw::c_ushort = 50019;
pub const DAQmxWarningPALResourceOwnedBySystem: ::std::os::raw::c_ushort =
    50100;
pub const DAQmxWarningPALResourceNotAvailable: ::std::os::raw::c_ushort =
    50101;
pub const DAQmxWarningPALResourceNotReserved: ::std::os::raw::c_ushort =
    50102;
pub const DAQmxWarningPALResourceReserved: ::std::os::raw::c_ushort = 50103;
pub const DAQmxWarningPALResourceNotInitialized: ::std::os::raw::c_ushort =
    50104;
pub const DAQmxWarningPALResourceInitialized: ::std::os::raw::c_ushort =
    50105;
pub const DAQmxWarningPALResourceBusy: ::std::os::raw::c_ushort = 50106;
pub const DAQmxWarningPALResourceAmbiguous: ::std::os::raw::c_ushort = 50107;
pub const DAQmxWarningPALFirmwareFault: ::std::os::raw::c_ushort = 50151;
pub const DAQmxWarningPALHardwareFault: ::std::os::raw::c_ushort = 50152;
pub const DAQmxWarningPALOSUnsupported: ::std::os::raw::c_ushort = 50200;
pub const DAQmxWarningPALOSFault: ::std::os::raw::c_ushort = 50202;
pub const DAQmxWarningPALFunctionObsolete: ::std::os::raw::c_ushort = 50254;
pub const DAQmxWarningPALFunctionNotFound: ::std::os::raw::c_ushort = 50255;
pub const DAQmxWarningPALFeatureNotSupported: ::std::os::raw::c_ushort =
    50256;
pub const DAQmxWarningPALComponentInitializationFault:
          ::std::os::raw::c_ushort =
    50258;
pub const DAQmxWarningPALComponentAlreadyLoaded: ::std::os::raw::c_ushort =
    50260;
pub const DAQmxWarningPALComponentNotUnloadable: ::std::os::raw::c_ushort =
    50262;
pub const DAQmxWarningPALMemoryAlignmentFault: ::std::os::raw::c_ushort =
    50351;
pub const DAQmxWarningPALMemoryHeapNotEmpty: ::std::os::raw::c_ushort = 50355;
pub const DAQmxWarningPALTransferNotInProgress: ::std::os::raw::c_ushort =
    50402;
pub const DAQmxWarningPALTransferInProgress: ::std::os::raw::c_ushort = 50403;
pub const DAQmxWarningPALTransferStopped: ::std::os::raw::c_ushort = 50404;
pub const DAQmxWarningPALTransferAborted: ::std::os::raw::c_ushort = 50405;
pub const DAQmxWarningPALLogicalBufferEmpty: ::std::os::raw::c_ushort = 50406;
pub const DAQmxWarningPALLogicalBufferFull: ::std::os::raw::c_ushort = 50407;
pub const DAQmxWarningPALPhysicalBufferEmpty: ::std::os::raw::c_ushort =
    50408;
pub const DAQmxWarningPALPhysicalBufferFull: ::std::os::raw::c_ushort = 50409;
pub const DAQmxWarningPALTransferOverwritten: ::std::os::raw::c_ushort =
    50410;
pub const DAQmxWarningPALTransferOverread: ::std::os::raw::c_ushort = 50411;
pub const DAQmxWarningPALDispatcherAlreadyExported: ::std::os::raw::c_ushort =
    50500;
pub const DAQmxWarningPALSyncAbandoned: ::std::os::raw::c_ushort = 50551;
pub type int8 = ::std::os::raw::c_char;
pub type uInt8 = ::std::os::raw::c_uchar;
pub type int16 = ::std::os::raw::c_short;
pub type uInt16 = ::std::os::raw::c_ushort;
pub type int32 = ::std::os::raw::c_long;
pub type uInt32 = ::std::os::raw::c_ulong;
pub type float32 = f32;
pub type float64 = f64;
pub type int64 = ::std::os::raw::c_longlong;
pub type uInt64 = ::std::os::raw::c_ulonglong;
pub type bool32 = uInt32;
pub type TaskHandle = *mut ::std::os::raw::c_void;
pub type CalHandle = uInt32;
pub type DAQmxEveryNSamplesEventCallbackPtr =
    ::std::option::Option<unsafe extern "C" fn(taskHandle: TaskHandle,
                                               everyNsamplesEventType: int32,
                                               nSamples: uInt32,
                                               callbackData:
                                                   *mut ::std::os::raw::c_void)
                              -> int32>;
pub type DAQmxDoneEventCallbackPtr =
    ::std::option::Option<unsafe extern "C" fn(taskHandle: TaskHandle,
                                               status: int32,
                                               callbackData:
                                                   *mut ::std::os::raw::c_void)
                              -> int32>;
pub type DAQmxSignalEventCallbackPtr =
    ::std::option::Option<unsafe extern "C" fn(taskHandle: TaskHandle,
                                               signalID: int32,
                                               callbackData:
                                                   *mut ::std::os::raw::c_void)
                              -> int32>;
#[link(name =
           "C:\\Program Files (x86)\\National Instruments\\Shared\\ExternalCompilerSupport\\C\\lib64\\msvc\\NIDAQmx",
       kind = "dylib")]
extern "C" {
    pub fn DAQmxLoadTask(taskName: *mut ::std::os::raw::c_char,
                         taskHandle: *mut TaskHandle) -> int32;
    pub fn DAQmxCreateTask(taskName: *mut ::std::os::raw::c_char,
                           taskHandle: *mut TaskHandle) -> int32;
    pub fn DAQmxAddGlobalChansToTask(taskHandle: TaskHandle,
                                     channelNames:
                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxStartTask(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxStopTask(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxClearTask(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxWaitUntilTaskDone(taskHandle: TaskHandle, timeToWait: float64)
     -> int32;
    pub fn DAQmxIsTaskDone(taskHandle: TaskHandle, isTaskDone: *mut bool32)
     -> int32;
    pub fn DAQmxTaskControl(taskHandle: TaskHandle, action: int32) -> int32;
    pub fn DAQmxGetNthTaskChannel(taskHandle: TaskHandle, index: uInt32,
                                  buffer: *mut ::std::os::raw::c_char,
                                  bufferSize: int32) -> int32;
    pub fn DAQmxGetNthTaskDevice(taskHandle: TaskHandle, index: uInt32,
                                 buffer: *mut ::std::os::raw::c_char,
                                 bufferSize: int32) -> int32;
    pub fn DAQmxGetTaskAttribute(taskHandle: TaskHandle, attribute: int32,
                                 value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxRegisterEveryNSamplesEvent(task: TaskHandle,
                                           everyNsamplesEventType: int32,
                                           nSamples: uInt32, options: uInt32,
                                           callbackFunction:
                                               DAQmxEveryNSamplesEventCallbackPtr,
                                           callbackData:
                                               *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxRegisterDoneEvent(task: TaskHandle, options: uInt32,
                                  callbackFunction: DAQmxDoneEventCallbackPtr,
                                  callbackData: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxRegisterSignalEvent(task: TaskHandle, signalID: int32,
                                    options: uInt32,
                                    callbackFunction:
                                        DAQmxSignalEventCallbackPtr,
                                    callbackData: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxCreateAIVoltageChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    terminalConfig: int32, minVal: float64,
                                    maxVal: float64, units: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAICurrentChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    terminalConfig: int32, minVal: float64,
                                    maxVal: float64, units: int32,
                                    shuntResistorLoc: int32,
                                    extShuntResistorVal: float64,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIVoltageRMSChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       terminalConfig: int32, minVal: float64,
                                       maxVal: float64, units: int32,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAICurrentRMSChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       terminalConfig: int32, minVal: float64,
                                       maxVal: float64, units: int32,
                                       shuntResistorLoc: int32,
                                       extShuntResistorVal: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIThrmcplChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32, thermocoupleType: int32,
                                    cjcSource: int32, cjcVal: float64,
                                    cjcChannel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIRTDChan(taskHandle: TaskHandle,
                                physicalChannel: *mut ::std::os::raw::c_char,
                                nameToAssignToChannel:
                                    *mut ::std::os::raw::c_char,
                                minVal: float64, maxVal: float64,
                                units: int32, rtdType: int32,
                                resistanceConfig: int32,
                                currentExcitSource: int32,
                                currentExcitVal: float64, r0: float64)
     -> int32;
    pub fn DAQmxCreateAIThrmstrChanIex(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, resistanceConfig: int32,
                                       currentExcitSource: int32,
                                       currentExcitVal: float64, a: float64,
                                       b: float64, c: float64) -> int32;
    pub fn DAQmxCreateAIThrmstrChanVex(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, resistanceConfig: int32,
                                       voltageExcitSource: int32,
                                       voltageExcitVal: float64, a: float64,
                                       b: float64, c: float64, r1: float64)
     -> int32;
    pub fn DAQmxCreateAIFreqVoltageChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        units: int32, thresholdLevel: float64,
                                        hysteresis: float64,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIResistanceChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, resistanceConfig: int32,
                                       currentExcitSource: int32,
                                       currentExcitVal: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIStrainGageChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, strainConfig: int32,
                                       voltageExcitSource: int32,
                                       voltageExcitVal: float64,
                                       gageFactor: float64,
                                       initialBridgeVoltage: float64,
                                       nominalGageResistance: float64,
                                       poissonRatio: float64,
                                       leadWireResistance: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIRosetteStrainGageChan(taskHandle: TaskHandle,
                                              physicalChannel:
                                                  *mut ::std::os::raw::c_char,
                                              nameToAssignToChannel:
                                                  *mut ::std::os::raw::c_char,
                                              minVal: float64,
                                              maxVal: float64,
                                              rosetteType: int32,
                                              gageOrientation: float64,
                                              rosetteMeasTypes: *mut int32,
                                              numRosetteMeasTypes: uInt32,
                                              strainConfig: int32,
                                              voltageExcitSource: int32,
                                              voltageExcitVal: float64,
                                              gageFactor: float64,
                                              nominalGageResistance: float64,
                                              poissonRatio: float64,
                                              leadWireResistance: float64)
     -> int32;
    pub fn DAQmxCreateAIForceBridgeTwoPointLinChan(taskHandle: TaskHandle,
                                                   physicalChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   nameToAssignToChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   minVal: float64,
                                                   maxVal: float64,
                                                   units: int32,
                                                   bridgeConfig: int32,
                                                   voltageExcitSource: int32,
                                                   voltageExcitVal: float64,
                                                   nominalBridgeResistance:
                                                       float64,
                                                   firstElectricalVal:
                                                       float64,
                                                   secondElectricalVal:
                                                       float64,
                                                   electricalUnits: int32,
                                                   firstPhysicalVal: float64,
                                                   secondPhysicalVal: float64,
                                                   physicalUnits: int32,
                                                   customScaleName:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIForceBridgeTableChan(taskHandle: TaskHandle,
                                             physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             nameToAssignToChannel:
                                                 *mut ::std::os::raw::c_char,
                                             minVal: float64, maxVal: float64,
                                             units: int32,
                                             bridgeConfig: int32,
                                             voltageExcitSource: int32,
                                             voltageExcitVal: float64,
                                             nominalBridgeResistance: float64,
                                             electricalVals: *mut float64,
                                             numElectricalVals: uInt32,
                                             electricalUnits: int32,
                                             physicalVals: *mut float64,
                                             numPhysicalVals: uInt32,
                                             physicalUnits: int32,
                                             customScaleName:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIForceBridgePolynomialChan(taskHandle: TaskHandle,
                                                  physicalChannel:
                                                      *mut ::std::os::raw::c_char,
                                                  nameToAssignToChannel:
                                                      *mut ::std::os::raw::c_char,
                                                  minVal: float64,
                                                  maxVal: float64,
                                                  units: int32,
                                                  bridgeConfig: int32,
                                                  voltageExcitSource: int32,
                                                  voltageExcitVal: float64,
                                                  nominalBridgeResistance:
                                                      float64,
                                                  forwardCoeffs: *mut float64,
                                                  numForwardCoeffs: uInt32,
                                                  reverseCoeffs: *mut float64,
                                                  numReverseCoeffs: uInt32,
                                                  electricalUnits: int32,
                                                  physicalUnits: int32,
                                                  customScaleName:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIPressureBridgeTwoPointLinChan(taskHandle: TaskHandle,
                                                      physicalChannel:
                                                          *mut ::std::os::raw::c_char,
                                                      nameToAssignToChannel:
                                                          *mut ::std::os::raw::c_char,
                                                      minVal: float64,
                                                      maxVal: float64,
                                                      units: int32,
                                                      bridgeConfig: int32,
                                                      voltageExcitSource:
                                                          int32,
                                                      voltageExcitVal:
                                                          float64,
                                                      nominalBridgeResistance:
                                                          float64,
                                                      firstElectricalVal:
                                                          float64,
                                                      secondElectricalVal:
                                                          float64,
                                                      electricalUnits: int32,
                                                      firstPhysicalVal:
                                                          float64,
                                                      secondPhysicalVal:
                                                          float64,
                                                      physicalUnits: int32,
                                                      customScaleName:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIPressureBridgeTableChan(taskHandle: TaskHandle,
                                                physicalChannel:
                                                    *mut ::std::os::raw::c_char,
                                                nameToAssignToChannel:
                                                    *mut ::std::os::raw::c_char,
                                                minVal: float64,
                                                maxVal: float64, units: int32,
                                                bridgeConfig: int32,
                                                voltageExcitSource: int32,
                                                voltageExcitVal: float64,
                                                nominalBridgeResistance:
                                                    float64,
                                                electricalVals: *mut float64,
                                                numElectricalVals: uInt32,
                                                electricalUnits: int32,
                                                physicalVals: *mut float64,
                                                numPhysicalVals: uInt32,
                                                physicalUnits: int32,
                                                customScaleName:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIPressureBridgePolynomialChan(taskHandle: TaskHandle,
                                                     physicalChannel:
                                                         *mut ::std::os::raw::c_char,
                                                     nameToAssignToChannel:
                                                         *mut ::std::os::raw::c_char,
                                                     minVal: float64,
                                                     maxVal: float64,
                                                     units: int32,
                                                     bridgeConfig: int32,
                                                     voltageExcitSource:
                                                         int32,
                                                     voltageExcitVal: float64,
                                                     nominalBridgeResistance:
                                                         float64,
                                                     forwardCoeffs:
                                                         *mut float64,
                                                     numForwardCoeffs: uInt32,
                                                     reverseCoeffs:
                                                         *mut float64,
                                                     numReverseCoeffs: uInt32,
                                                     electricalUnits: int32,
                                                     physicalUnits: int32,
                                                     customScaleName:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAITorqueBridgeTwoPointLinChan(taskHandle: TaskHandle,
                                                    physicalChannel:
                                                        *mut ::std::os::raw::c_char,
                                                    nameToAssignToChannel:
                                                        *mut ::std::os::raw::c_char,
                                                    minVal: float64,
                                                    maxVal: float64,
                                                    units: int32,
                                                    bridgeConfig: int32,
                                                    voltageExcitSource: int32,
                                                    voltageExcitVal: float64,
                                                    nominalBridgeResistance:
                                                        float64,
                                                    firstElectricalVal:
                                                        float64,
                                                    secondElectricalVal:
                                                        float64,
                                                    electricalUnits: int32,
                                                    firstPhysicalVal: float64,
                                                    secondPhysicalVal:
                                                        float64,
                                                    physicalUnits: int32,
                                                    customScaleName:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAITorqueBridgeTableChan(taskHandle: TaskHandle,
                                              physicalChannel:
                                                  *mut ::std::os::raw::c_char,
                                              nameToAssignToChannel:
                                                  *mut ::std::os::raw::c_char,
                                              minVal: float64,
                                              maxVal: float64, units: int32,
                                              bridgeConfig: int32,
                                              voltageExcitSource: int32,
                                              voltageExcitVal: float64,
                                              nominalBridgeResistance:
                                                  float64,
                                              electricalVals: *mut float64,
                                              numElectricalVals: uInt32,
                                              electricalUnits: int32,
                                              physicalVals: *mut float64,
                                              numPhysicalVals: uInt32,
                                              physicalUnits: int32,
                                              customScaleName:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAITorqueBridgePolynomialChan(taskHandle: TaskHandle,
                                                   physicalChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   nameToAssignToChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   minVal: float64,
                                                   maxVal: float64,
                                                   units: int32,
                                                   bridgeConfig: int32,
                                                   voltageExcitSource: int32,
                                                   voltageExcitVal: float64,
                                                   nominalBridgeResistance:
                                                       float64,
                                                   forwardCoeffs:
                                                       *mut float64,
                                                   numForwardCoeffs: uInt32,
                                                   reverseCoeffs:
                                                       *mut float64,
                                                   numReverseCoeffs: uInt32,
                                                   electricalUnits: int32,
                                                   physicalUnits: int32,
                                                   customScaleName:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIBridgeChan(taskHandle: TaskHandle,
                                   physicalChannel:
                                       *mut ::std::os::raw::c_char,
                                   nameToAssignToChannel:
                                       *mut ::std::os::raw::c_char,
                                   minVal: float64, maxVal: float64,
                                   units: int32, bridgeConfig: int32,
                                   voltageExcitSource: int32,
                                   voltageExcitVal: float64,
                                   nominalBridgeResistance: float64,
                                   customScaleName:
                                       *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIVoltageChanWithExcit(taskHandle: TaskHandle,
                                             physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             nameToAssignToChannel:
                                                 *mut ::std::os::raw::c_char,
                                             terminalConfig: int32,
                                             minVal: float64, maxVal: float64,
                                             units: int32,
                                             bridgeConfig: int32,
                                             voltageExcitSource: int32,
                                             voltageExcitVal: float64,
                                             useExcitForScaling: bool32,
                                             customScaleName:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAITempBuiltInSensorChan(taskHandle: TaskHandle,
                                              physicalChannel:
                                                  *mut ::std::os::raw::c_char,
                                              nameToAssignToChannel:
                                                  *mut ::std::os::raw::c_char,
                                              units: int32) -> int32;
    pub fn DAQmxCreateAIAccelChan(taskHandle: TaskHandle,
                                  physicalChannel:
                                      *mut ::std::os::raw::c_char,
                                  nameToAssignToChannel:
                                      *mut ::std::os::raw::c_char,
                                  terminalConfig: int32, minVal: float64,
                                  maxVal: float64, units: int32,
                                  sensitivity: float64,
                                  sensitivityUnits: int32,
                                  currentExcitSource: int32,
                                  currentExcitVal: float64,
                                  customScaleName:
                                      *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIVelocityIEPEChan(taskHandle: TaskHandle,
                                         physicalChannel:
                                             *mut ::std::os::raw::c_char,
                                         nameToAssignToChannel:
                                             *mut ::std::os::raw::c_char,
                                         terminalConfig: int32,
                                         minVal: float64, maxVal: float64,
                                         units: int32, sensitivity: float64,
                                         sensitivityUnits: int32,
                                         currentExcitSource: int32,
                                         currentExcitVal: float64,
                                         customScaleName:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIForceIEPEChan(taskHandle: TaskHandle,
                                      physicalChannel:
                                          *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      terminalConfig: int32, minVal: float64,
                                      maxVal: float64, units: int32,
                                      sensitivity: float64,
                                      sensitivityUnits: int32,
                                      currentExcitSource: int32,
                                      currentExcitVal: float64,
                                      customScaleName:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIMicrophoneChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       terminalConfig: int32, units: int32,
                                       micSensitivity: float64,
                                       maxSndPressLevel: float64,
                                       currentExcitSource: int32,
                                       currentExcitVal: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIChargeChan(taskHandle: TaskHandle,
                                   physicalChannel:
                                       *mut ::std::os::raw::c_char,
                                   nameToAssignToChannel:
                                       *mut ::std::os::raw::c_char,
                                   terminalConfig: int32, minVal: float64,
                                   maxVal: float64, units: int32,
                                   customScaleName:
                                       *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIAccelChargeChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        terminalConfig: int32,
                                        minVal: float64, maxVal: float64,
                                        units: int32, sensitivity: float64,
                                        sensitivityUnits: int32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIAccel4WireDCVoltageChan(taskHandle: TaskHandle,
                                                physicalChannel:
                                                    *mut ::std::os::raw::c_char,
                                                nameToAssignToChannel:
                                                    *mut ::std::os::raw::c_char,
                                                terminalConfig: int32,
                                                minVal: float64,
                                                maxVal: float64, units: int32,
                                                sensitivity: float64,
                                                sensitivityUnits: int32,
                                                voltageExcitSource: int32,
                                                voltageExcitVal: float64,
                                                useExcitForScaling: bool32,
                                                customScaleName:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIPosLVDTChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32, sensitivity: float64,
                                    sensitivityUnits: int32,
                                    voltageExcitSource: int32,
                                    voltageExcitVal: float64,
                                    voltageExcitFreq: float64,
                                    ACExcitWireMode: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIPosRVDTChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32, sensitivity: float64,
                                    sensitivityUnits: int32,
                                    voltageExcitSource: int32,
                                    voltageExcitVal: float64,
                                    voltageExcitFreq: float64,
                                    ACExcitWireMode: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAIPosEddyCurrProxProbeChan(taskHandle: TaskHandle,
                                                 physicalChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 nameToAssignToChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 minVal: float64,
                                                 maxVal: float64,
                                                 units: int32,
                                                 sensitivity: float64,
                                                 sensitivityUnits: int32,
                                                 customScaleName:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAIDeviceTempChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       units: int32) -> int32;
    pub fn DAQmxCreateTEDSAIVoltageChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        terminalConfig: int32,
                                        minVal: float64, maxVal: float64,
                                        units: int32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAICurrentChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        terminalConfig: int32,
                                        minVal: float64, maxVal: float64,
                                        units: int32, shuntResistorLoc: int32,
                                        extShuntResistorVal: float64,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIThrmcplChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        units: int32, cjcSource: int32,
                                        cjcVal: float64,
                                        cjcChannel:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIRTDChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32, resistanceConfig: int32,
                                    currentExcitSource: int32,
                                    currentExcitVal: float64) -> int32;
    pub fn DAQmxCreateTEDSAIThrmstrChanIex(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           minVal: float64, maxVal: float64,
                                           units: int32,
                                           resistanceConfig: int32,
                                           currentExcitSource: int32,
                                           currentExcitVal: float64) -> int32;
    pub fn DAQmxCreateTEDSAIThrmstrChanVex(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           minVal: float64, maxVal: float64,
                                           units: int32,
                                           resistanceConfig: int32,
                                           voltageExcitSource: int32,
                                           voltageExcitVal: float64,
                                           r1: float64) -> int32;
    pub fn DAQmxCreateTEDSAIResistanceChan(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           minVal: float64, maxVal: float64,
                                           units: int32,
                                           resistanceConfig: int32,
                                           currentExcitSource: int32,
                                           currentExcitVal: float64,
                                           customScaleName:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIStrainGageChan(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           minVal: float64, maxVal: float64,
                                           units: int32,
                                           voltageExcitSource: int32,
                                           voltageExcitVal: float64,
                                           initialBridgeVoltage: float64,
                                           leadWireResistance: float64,
                                           customScaleName:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIForceBridgeChan(taskHandle: TaskHandle,
                                            physicalChannel:
                                                *mut ::std::os::raw::c_char,
                                            nameToAssignToChannel:
                                                *mut ::std::os::raw::c_char,
                                            minVal: float64, maxVal: float64,
                                            units: int32,
                                            voltageExcitSource: int32,
                                            voltageExcitVal: float64,
                                            customScaleName:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIPressureBridgeChan(taskHandle: TaskHandle,
                                               physicalChannel:
                                                   *mut ::std::os::raw::c_char,
                                               nameToAssignToChannel:
                                                   *mut ::std::os::raw::c_char,
                                               minVal: float64,
                                               maxVal: float64, units: int32,
                                               voltageExcitSource: int32,
                                               voltageExcitVal: float64,
                                               customScaleName:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAITorqueBridgeChan(taskHandle: TaskHandle,
                                             physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             nameToAssignToChannel:
                                                 *mut ::std::os::raw::c_char,
                                             minVal: float64, maxVal: float64,
                                             units: int32,
                                             voltageExcitSource: int32,
                                             voltageExcitVal: float64,
                                             customScaleName:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIBridgeChan(taskHandle: TaskHandle,
                                       physicalChannel:
                                           *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32,
                                       voltageExcitSource: int32,
                                       voltageExcitVal: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIVoltageChanWithExcit(taskHandle: TaskHandle,
                                                 physicalChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 nameToAssignToChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 terminalConfig: int32,
                                                 minVal: float64,
                                                 maxVal: float64,
                                                 units: int32,
                                                 voltageExcitSource: int32,
                                                 voltageExcitVal: float64,
                                                 customScaleName:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIAccelChan(taskHandle: TaskHandle,
                                      physicalChannel:
                                          *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      terminalConfig: int32, minVal: float64,
                                      maxVal: float64, units: int32,
                                      currentExcitSource: int32,
                                      currentExcitVal: float64,
                                      customScaleName:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIForceIEPEChan(taskHandle: TaskHandle,
                                          physicalChannel:
                                              *mut ::std::os::raw::c_char,
                                          nameToAssignToChannel:
                                              *mut ::std::os::raw::c_char,
                                          terminalConfig: int32,
                                          minVal: float64, maxVal: float64,
                                          units: int32,
                                          currentExcitSource: int32,
                                          currentExcitVal: float64,
                                          customScaleName:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIMicrophoneChan(taskHandle: TaskHandle,
                                           physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           nameToAssignToChannel:
                                               *mut ::std::os::raw::c_char,
                                           terminalConfig: int32,
                                           units: int32,
                                           maxSndPressLevel: float64,
                                           currentExcitSource: int32,
                                           currentExcitVal: float64,
                                           customScaleName:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIPosLVDTChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        units: int32,
                                        voltageExcitSource: int32,
                                        voltageExcitVal: float64,
                                        voltageExcitFreq: float64,
                                        ACExcitWireMode: int32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTEDSAIPosRVDTChan(taskHandle: TaskHandle,
                                        physicalChannel:
                                            *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        units: int32,
                                        voltageExcitSource: int32,
                                        voltageExcitVal: float64,
                                        voltageExcitFreq: float64,
                                        ACExcitWireMode: int32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateAOVoltageChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAOCurrentChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    minVal: float64, maxVal: float64,
                                    units: int32,
                                    customScaleName:
                                        *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateAOFuncGenChan(taskHandle: TaskHandle,
                                    physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    nameToAssignToChannel:
                                        *mut ::std::os::raw::c_char,
                                    type_: int32, freq: float64,
                                    amplitude: float64, offset: float64)
     -> int32;
    pub fn DAQmxCreateDIChan(taskHandle: TaskHandle,
                             lines: *mut ::std::os::raw::c_char,
                             nameToAssignToLines: *mut ::std::os::raw::c_char,
                             lineGrouping: int32) -> int32;
    pub fn DAQmxCreateDOChan(taskHandle: TaskHandle,
                             lines: *mut ::std::os::raw::c_char,
                             nameToAssignToLines: *mut ::std::os::raw::c_char,
                             lineGrouping: int32) -> int32;
    pub fn DAQmxCreateCIFreqChan(taskHandle: TaskHandle,
                                 counter: *mut ::std::os::raw::c_char,
                                 nameToAssignToChannel:
                                     *mut ::std::os::raw::c_char,
                                 minVal: float64, maxVal: float64,
                                 units: int32, edge: int32, measMethod: int32,
                                 measTime: float64, divisor: uInt32,
                                 customScaleName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIPeriodChan(taskHandle: TaskHandle,
                                   counter: *mut ::std::os::raw::c_char,
                                   nameToAssignToChannel:
                                       *mut ::std::os::raw::c_char,
                                   minVal: float64, maxVal: float64,
                                   units: int32, edge: int32,
                                   measMethod: int32, measTime: float64,
                                   divisor: uInt32,
                                   customScaleName:
                                       *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxCreateCICountEdgesChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       edge: int32, initialCount: uInt32,
                                       countDirection: int32) -> int32;
    pub fn DAQmxCreateCIDutyCycleChan(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      minFreq: float64, maxFreq: float64,
                                      edge: int32,
                                      customScaleName:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIPulseWidthChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, startingEdge: int32,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCISemiPeriodChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCITwoEdgeSepChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64,
                                       units: int32, firstEdge: int32,
                                       secondEdge: int32,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIPulseChanFreq(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      minVal: float64, maxVal: float64,
                                      units: int32) -> int32;
    pub fn DAQmxCreateCIPulseChanTime(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      minVal: float64, maxVal: float64,
                                      units: int32) -> int32;
    pub fn DAQmxCreateCIPulseChanTicks(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       sourceTerminal:
                                           *mut ::std::os::raw::c_char,
                                       minVal: float64, maxVal: float64)
     -> int32;
    pub fn DAQmxCreateCILinEncoderChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       decodingType: int32,
                                       ZidxEnable: bool32, ZidxVal: float64,
                                       ZidxPhase: int32, units: int32,
                                       distPerPulse: float64,
                                       initialPos: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIAngEncoderChan(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       decodingType: int32,
                                       ZidxEnable: bool32, ZidxVal: float64,
                                       ZidxPhase: int32, units: int32,
                                       pulsesPerRev: uInt32,
                                       initialAngle: float64,
                                       customScaleName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCILinVelocityChan(taskHandle: TaskHandle,
                                        counter: *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        decodingType: int32, units: int32,
                                        distPerPulse: float64,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIAngVelocityChan(taskHandle: TaskHandle,
                                        counter: *mut ::std::os::raw::c_char,
                                        nameToAssignToChannel:
                                            *mut ::std::os::raw::c_char,
                                        minVal: float64, maxVal: float64,
                                        decodingType: int32, units: int32,
                                        pulsesPerRev: uInt32,
                                        customScaleName:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCIGPSTimestampChan(taskHandle: TaskHandle,
                                         counter: *mut ::std::os::raw::c_char,
                                         nameToAssignToChannel:
                                             *mut ::std::os::raw::c_char,
                                         units: int32, syncMethod: int32,
                                         customScaleName:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateCOPulseChanFreq(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      units: int32, idleState: int32,
                                      initialDelay: float64, freq: float64,
                                      dutyCycle: float64) -> int32;
    pub fn DAQmxCreateCOPulseChanTime(taskHandle: TaskHandle,
                                      counter: *mut ::std::os::raw::c_char,
                                      nameToAssignToChannel:
                                          *mut ::std::os::raw::c_char,
                                      units: int32, idleState: int32,
                                      initialDelay: float64, lowTime: float64,
                                      highTime: float64) -> int32;
    pub fn DAQmxCreateCOPulseChanTicks(taskHandle: TaskHandle,
                                       counter: *mut ::std::os::raw::c_char,
                                       nameToAssignToChannel:
                                           *mut ::std::os::raw::c_char,
                                       sourceTerminal:
                                           *mut ::std::os::raw::c_char,
                                       idleState: int32, initialDelay: int32,
                                       lowTicks: int32, highTicks: int32)
     -> int32;
    pub fn DAQmxGetAIChanCalCalDate(taskHandle: TaskHandle,
                                    channelName: *mut ::std::os::raw::c_char,
                                    year: *mut uInt32, month: *mut uInt32,
                                    day: *mut uInt32, hour: *mut uInt32,
                                    minute: *mut uInt32) -> int32;
    pub fn DAQmxSetAIChanCalCalDate(taskHandle: TaskHandle,
                                    channelName: *mut ::std::os::raw::c_char,
                                    year: uInt32, month: uInt32, day: uInt32,
                                    hour: uInt32, minute: uInt32) -> int32;
    pub fn DAQmxGetAIChanCalExpDate(taskHandle: TaskHandle,
                                    channelName: *mut ::std::os::raw::c_char,
                                    year: *mut uInt32, month: *mut uInt32,
                                    day: *mut uInt32, hour: *mut uInt32,
                                    minute: *mut uInt32) -> int32;
    pub fn DAQmxSetAIChanCalExpDate(taskHandle: TaskHandle,
                                    channelName: *mut ::std::os::raw::c_char,
                                    year: uInt32, month: uInt32, day: uInt32,
                                    hour: uInt32, minute: uInt32) -> int32;
    pub fn DAQmxGetChanAttribute(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 attribute: int32,
                                 value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetChanAttribute(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 attribute: int32, ...) -> int32;
    pub fn DAQmxResetChanAttribute(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   attribute: int32) -> int32;
    pub fn DAQmxCfgSampClkTiming(taskHandle: TaskHandle,
                                 source: *mut ::std::os::raw::c_char,
                                 rate: float64, activeEdge: int32,
                                 sampleMode: int32, sampsPerChan: uInt64)
     -> int32;
    pub fn DAQmxCfgHandshakingTiming(taskHandle: TaskHandle,
                                     sampleMode: int32, sampsPerChan: uInt64)
     -> int32;
    pub fn DAQmxCfgBurstHandshakingTimingImportClock(taskHandle: TaskHandle,
                                                     sampleMode: int32,
                                                     sampsPerChan: uInt64,
                                                     sampleClkRate: float64,
                                                     sampleClkSrc:
                                                         *mut ::std::os::raw::c_char,
                                                     sampleClkActiveEdge:
                                                         int32,
                                                     pauseWhen: int32,
                                                     readyEventActiveLevel:
                                                         int32) -> int32;
    pub fn DAQmxCfgBurstHandshakingTimingExportClock(taskHandle: TaskHandle,
                                                     sampleMode: int32,
                                                     sampsPerChan: uInt64,
                                                     sampleClkRate: float64,
                                                     sampleClkOutpTerm:
                                                         *mut ::std::os::raw::c_char,
                                                     sampleClkPulsePolarity:
                                                         int32,
                                                     pauseWhen: int32,
                                                     readyEventActiveLevel:
                                                         int32) -> int32;
    pub fn DAQmxCfgChangeDetectionTiming(taskHandle: TaskHandle,
                                         risingEdgeChan:
                                             *mut ::std::os::raw::c_char,
                                         fallingEdgeChan:
                                             *mut ::std::os::raw::c_char,
                                         sampleMode: int32,
                                         sampsPerChan: uInt64) -> int32;
    pub fn DAQmxCfgImplicitTiming(taskHandle: TaskHandle, sampleMode: int32,
                                  sampsPerChan: uInt64) -> int32;
    pub fn DAQmxCfgPipelinedSampClkTiming(taskHandle: TaskHandle,
                                          source: *mut ::std::os::raw::c_char,
                                          rate: float64, activeEdge: int32,
                                          sampleMode: int32,
                                          sampsPerChan: uInt64) -> int32;
    pub fn DAQmxGetTimingAttribute(taskHandle: TaskHandle, attribute: int32,
                                   value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetTimingAttribute(taskHandle: TaskHandle,
                                   attribute: int32, ...) -> int32;
    pub fn DAQmxResetTimingAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxGetTimingAttributeEx(taskHandle: TaskHandle,
                                     deviceNames: *mut ::std::os::raw::c_char,
                                     attribute: int32,
                                     value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetTimingAttributeEx(taskHandle: TaskHandle,
                                     deviceNames: *mut ::std::os::raw::c_char,
                                     attribute: int32, ...) -> int32;
    pub fn DAQmxResetTimingAttributeEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       attribute: int32) -> int32;
    pub fn DAQmxDisableStartTrig(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxCfgDigEdgeStartTrig(taskHandle: TaskHandle,
                                    triggerSource:
                                        *mut ::std::os::raw::c_char,
                                    triggerEdge: int32) -> int32;
    pub fn DAQmxCfgAnlgEdgeStartTrig(taskHandle: TaskHandle,
                                     triggerSource:
                                         *mut ::std::os::raw::c_char,
                                     triggerSlope: int32,
                                     triggerLevel: float64) -> int32;
    pub fn DAQmxCfgAnlgWindowStartTrig(taskHandle: TaskHandle,
                                       triggerSource:
                                           *mut ::std::os::raw::c_char,
                                       triggerWhen: int32, windowTop: float64,
                                       windowBottom: float64) -> int32;
    pub fn DAQmxCfgDigPatternStartTrig(taskHandle: TaskHandle,
                                       triggerSource:
                                           *mut ::std::os::raw::c_char,
                                       triggerPattern:
                                           *mut ::std::os::raw::c_char,
                                       triggerWhen: int32) -> int32;
    pub fn DAQmxDisableRefTrig(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxCfgDigEdgeRefTrig(taskHandle: TaskHandle,
                                  triggerSource: *mut ::std::os::raw::c_char,
                                  triggerEdge: int32,
                                  pretriggerSamples: uInt32) -> int32;
    pub fn DAQmxCfgAnlgEdgeRefTrig(taskHandle: TaskHandle,
                                   triggerSource: *mut ::std::os::raw::c_char,
                                   triggerSlope: int32, triggerLevel: float64,
                                   pretriggerSamples: uInt32) -> int32;
    pub fn DAQmxCfgAnlgWindowRefTrig(taskHandle: TaskHandle,
                                     triggerSource:
                                         *mut ::std::os::raw::c_char,
                                     triggerWhen: int32, windowTop: float64,
                                     windowBottom: float64,
                                     pretriggerSamples: uInt32) -> int32;
    pub fn DAQmxCfgDigPatternRefTrig(taskHandle: TaskHandle,
                                     triggerSource:
                                         *mut ::std::os::raw::c_char,
                                     triggerPattern:
                                         *mut ::std::os::raw::c_char,
                                     triggerWhen: int32,
                                     pretriggerSamples: uInt32) -> int32;
    pub fn DAQmxDisableAdvTrig(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxCfgDigEdgeAdvTrig(taskHandle: TaskHandle,
                                  triggerSource: *mut ::std::os::raw::c_char,
                                  triggerEdge: int32) -> int32;
    pub fn DAQmxGetTrigAttribute(taskHandle: TaskHandle, attribute: int32,
                                 value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetTrigAttribute(taskHandle: TaskHandle,
                                 attribute: int32, ...) -> int32;
    pub fn DAQmxResetTrigAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxSendSoftwareTrigger(taskHandle: TaskHandle, triggerID: int32)
     -> int32;
    pub fn DAQmxReadAnalogF64(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut float64,
                              arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadAnalogScalarF64(taskHandle: TaskHandle, timeout: float64,
                                    value: *mut float64,
                                    reserved: *mut bool32) -> int32;
    pub fn DAQmxReadBinaryI16(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut int16, arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadBinaryU16(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut uInt16,
                              arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadBinaryI32(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut int32, arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadBinaryU32(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut uInt32,
                              arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalU8(taskHandle: TaskHandle, numSampsPerChan: int32,
                              timeout: float64, fillMode: bool32,
                              readArray: *mut uInt8, arraySizeInSamps: uInt32,
                              sampsPerChanRead: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalU16(taskHandle: TaskHandle, numSampsPerChan: int32,
                               timeout: float64, fillMode: bool32,
                               readArray: *mut uInt16,
                               arraySizeInSamps: uInt32,
                               sampsPerChanRead: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalU32(taskHandle: TaskHandle, numSampsPerChan: int32,
                               timeout: float64, fillMode: bool32,
                               readArray: *mut uInt32,
                               arraySizeInSamps: uInt32,
                               sampsPerChanRead: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalScalarU32(taskHandle: TaskHandle, timeout: float64,
                                     value: *mut uInt32,
                                     reserved: *mut bool32) -> int32;
    pub fn DAQmxReadDigitalLines(taskHandle: TaskHandle,
                                 numSampsPerChan: int32, timeout: float64,
                                 fillMode: bool32, readArray: *mut uInt8,
                                 arraySizeInBytes: uInt32,
                                 sampsPerChanRead: *mut int32,
                                 numBytesPerSamp: *mut int32,
                                 reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterF64(taskHandle: TaskHandle, numSampsPerChan: int32,
                               timeout: float64, readArray: *mut float64,
                               arraySizeInSamps: uInt32,
                               sampsPerChanRead: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterU32(taskHandle: TaskHandle, numSampsPerChan: int32,
                               timeout: float64, readArray: *mut uInt32,
                               arraySizeInSamps: uInt32,
                               sampsPerChanRead: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterF64Ex(taskHandle: TaskHandle,
                                 numSampsPerChan: int32, timeout: float64,
                                 fillMode: bool32, readArray: *mut float64,
                                 arraySizeInSamps: uInt32,
                                 sampsPerChanRead: *mut int32,
                                 reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterU32Ex(taskHandle: TaskHandle,
                                 numSampsPerChan: int32, timeout: float64,
                                 fillMode: bool32, readArray: *mut uInt32,
                                 arraySizeInSamps: uInt32,
                                 sampsPerChanRead: *mut int32,
                                 reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterScalarF64(taskHandle: TaskHandle, timeout: float64,
                                     value: *mut float64,
                                     reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCounterScalarU32(taskHandle: TaskHandle, timeout: float64,
                                     value: *mut uInt32,
                                     reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrFreq(taskHandle: TaskHandle, numSampsPerChan: int32,
                            timeout: float64, interleaved: bool32,
                            readArrayFrequency: *mut float64,
                            readArrayDutyCycle: *mut float64,
                            arraySizeInSamps: uInt32,
                            sampsPerChanRead: *mut int32,
                            reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrTime(taskHandle: TaskHandle, numSampsPerChan: int32,
                            timeout: float64, interleaved: bool32,
                            readArrayHighTime: *mut float64,
                            readArrayLowTime: *mut float64,
                            arraySizeInSamps: uInt32,
                            sampsPerChanRead: *mut int32,
                            reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrTicks(taskHandle: TaskHandle, numSampsPerChan: int32,
                             timeout: float64, interleaved: bool32,
                             readArrayHighTicks: *mut uInt32,
                             readArrayLowTicks: *mut uInt32,
                             arraySizeInSamps: uInt32,
                             sampsPerChanRead: *mut int32,
                             reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrFreqScalar(taskHandle: TaskHandle, timeout: float64,
                                  frequency: *mut float64,
                                  dutyCycle: *mut float64,
                                  reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrTimeScalar(taskHandle: TaskHandle, timeout: float64,
                                  highTime: *mut float64,
                                  lowTime: *mut float64,
                                  reserved: *mut bool32) -> int32;
    pub fn DAQmxReadCtrTicksScalar(taskHandle: TaskHandle, timeout: float64,
                                   highTicks: *mut uInt32,
                                   lowTicks: *mut uInt32,
                                   reserved: *mut bool32) -> int32;
    pub fn DAQmxReadRaw(taskHandle: TaskHandle, numSampsPerChan: int32,
                        timeout: float64,
                        readArray: *mut ::std::os::raw::c_void,
                        arraySizeInBytes: uInt32, sampsRead: *mut int32,
                        numBytesPerSamp: *mut int32, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxGetNthTaskReadChannel(taskHandle: TaskHandle, index: uInt32,
                                      buffer: *mut ::std::os::raw::c_char,
                                      bufferSize: int32) -> int32;
    pub fn DAQmxGetReadAttribute(taskHandle: TaskHandle, attribute: int32,
                                 value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetReadAttribute(taskHandle: TaskHandle,
                                 attribute: int32, ...) -> int32;
    pub fn DAQmxResetReadAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxConfigureLogging(taskHandle: TaskHandle,
                                 filePath: *mut ::std::os::raw::c_char,
                                 loggingMode: int32,
                                 groupName: *mut ::std::os::raw::c_char,
                                 operation: int32) -> int32;
    pub fn DAQmxStartNewFile(taskHandle: TaskHandle,
                             filePath: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxWriteAnalogF64(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut float64,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteAnalogScalarF64(taskHandle: TaskHandle,
                                     autoStart: bool32, timeout: float64,
                                     value: float64, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteBinaryI16(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut int16,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteBinaryU16(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut uInt16,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteBinaryI32(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut int32,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteBinaryU32(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut uInt32,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteDigitalU8(taskHandle: TaskHandle, numSampsPerChan: int32,
                               autoStart: bool32, timeout: float64,
                               dataLayout: bool32, writeArray: *mut uInt8,
                               sampsPerChanWritten: *mut int32,
                               reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteDigitalU16(taskHandle: TaskHandle,
                                numSampsPerChan: int32, autoStart: bool32,
                                timeout: float64, dataLayout: bool32,
                                writeArray: *mut uInt16,
                                sampsPerChanWritten: *mut int32,
                                reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteDigitalU32(taskHandle: TaskHandle,
                                numSampsPerChan: int32, autoStart: bool32,
                                timeout: float64, dataLayout: bool32,
                                writeArray: *mut uInt32,
                                sampsPerChanWritten: *mut int32,
                                reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteDigitalScalarU32(taskHandle: TaskHandle,
                                      autoStart: bool32, timeout: float64,
                                      value: uInt32, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteDigitalLines(taskHandle: TaskHandle,
                                  numSampsPerChan: int32, autoStart: bool32,
                                  timeout: float64, dataLayout: bool32,
                                  writeArray: *mut uInt8,
                                  sampsPerChanWritten: *mut int32,
                                  reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteCtrFreq(taskHandle: TaskHandle, numSampsPerChan: int32,
                             autoStart: bool32, timeout: float64,
                             dataLayout: bool32, frequency: *mut float64,
                             dutyCycle: *mut float64,
                             numSampsPerChanWritten: *mut int32,
                             reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteCtrFreqScalar(taskHandle: TaskHandle, autoStart: bool32,
                                   timeout: float64, frequency: float64,
                                   dutyCycle: float64, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteCtrTime(taskHandle: TaskHandle, numSampsPerChan: int32,
                             autoStart: bool32, timeout: float64,
                             dataLayout: bool32, highTime: *mut float64,
                             lowTime: *mut float64,
                             numSampsPerChanWritten: *mut int32,
                             reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteCtrTimeScalar(taskHandle: TaskHandle, autoStart: bool32,
                                   timeout: float64, highTime: float64,
                                   lowTime: float64, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteCtrTicks(taskHandle: TaskHandle, numSampsPerChan: int32,
                              autoStart: bool32, timeout: float64,
                              dataLayout: bool32, highTicks: *mut uInt32,
                              lowTicks: *mut uInt32,
                              numSampsPerChanWritten: *mut int32,
                              reserved: *mut bool32) -> int32;
    pub fn DAQmxWriteCtrTicksScalar(taskHandle: TaskHandle, autoStart: bool32,
                                    timeout: float64, highTicks: uInt32,
                                    lowTicks: uInt32, reserved: *mut bool32)
     -> int32;
    pub fn DAQmxWriteRaw(taskHandle: TaskHandle, numSamps: int32,
                         autoStart: bool32, timeout: float64,
                         writeArray: *const ::std::os::raw::c_void,
                         sampsPerChanWritten: *mut int32,
                         reserved: *mut bool32) -> int32;
    pub fn DAQmxGetWriteAttribute(taskHandle: TaskHandle, attribute: int32,
                                  value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetWriteAttribute(taskHandle: TaskHandle,
                                  attribute: int32, ...) -> int32;
    pub fn DAQmxResetWriteAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxExportSignal(taskHandle: TaskHandle, signalID: int32,
                             outputTerminal: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetExportedSignalAttribute(taskHandle: TaskHandle,
                                           attribute: int32,
                                           value:
                                               *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetExportedSignalAttribute(taskHandle: TaskHandle,
                                           attribute: int32, ...) -> int32;
    pub fn DAQmxResetExportedSignalAttribute(taskHandle: TaskHandle,
                                             attribute: int32) -> int32;
    pub fn DAQmxCreateLinScale(name: *mut ::std::os::raw::c_char,
                               slope: float64, yIntercept: float64,
                               preScaledUnits: int32,
                               scaledUnits: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateMapScale(name: *mut ::std::os::raw::c_char,
                               prescaledMin: float64, prescaledMax: float64,
                               scaledMin: float64, scaledMax: float64,
                               preScaledUnits: int32,
                               scaledUnits: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreatePolynomialScale(name: *mut ::std::os::raw::c_char,
                                      forwardCoeffs: *mut float64,
                                      numForwardCoeffsIn: uInt32,
                                      reverseCoeffs: *mut float64,
                                      numReverseCoeffsIn: uInt32,
                                      preScaledUnits: int32,
                                      scaledUnits:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCreateTableScale(name: *mut ::std::os::raw::c_char,
                                 prescaledVals: *mut float64,
                                 numPrescaledValsIn: uInt32,
                                 scaledVals: *mut float64,
                                 numScaledValsIn: uInt32,
                                 preScaledUnits: int32,
                                 scaledUnits: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxCalculateReversePolyCoeff(forwardCoeffs: *mut float64,
                                          numForwardCoeffsIn: uInt32,
                                          minValX: float64, maxValX: float64,
                                          numPointsToCompute: int32,
                                          reversePolyOrder: int32,
                                          reverseCoeffs: *mut float64)
     -> int32;
    pub fn DAQmxGetScaleAttribute(scaleName: *mut ::std::os::raw::c_char,
                                  attribute: int32,
                                  value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetScaleAttribute(scaleName: *mut ::std::os::raw::c_char,
                                  attribute: int32, ...) -> int32;
    pub fn DAQmxCfgInputBuffer(taskHandle: TaskHandle,
                               numSampsPerChan: uInt32) -> int32;
    pub fn DAQmxCfgOutputBuffer(taskHandle: TaskHandle,
                                numSampsPerChan: uInt32) -> int32;
    pub fn DAQmxGetBufferAttribute(taskHandle: TaskHandle, attribute: int32,
                                   value: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxSetBufferAttribute(taskHandle: TaskHandle,
                                   attribute: int32, ...) -> int32;
    pub fn DAQmxResetBufferAttribute(taskHandle: TaskHandle, attribute: int32)
     -> int32;
    pub fn DAQmxSwitchCreateScanList(scanList: *mut ::std::os::raw::c_char,
                                     taskHandle: *mut TaskHandle) -> int32;
    pub fn DAQmxSwitchConnect(switchChannel1: *mut ::std::os::raw::c_char,
                              switchChannel2: *mut ::std::os::raw::c_char,
                              waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchConnectMulti(connectionList:
                                       *mut ::std::os::raw::c_char,
                                   waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchDisconnect(switchChannel1: *mut ::std::os::raw::c_char,
                                 switchChannel2: *mut ::std::os::raw::c_char,
                                 waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchDisconnectMulti(connectionList:
                                          *mut ::std::os::raw::c_char,
                                      waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchDisconnectAll(deviceName: *mut ::std::os::raw::c_char,
                                    waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchSetTopologyAndReset(deviceName:
                                              *mut ::std::os::raw::c_char,
                                          newTopology:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxSwitchFindPath(switchChannel1: *mut ::std::os::raw::c_char,
                               switchChannel2: *mut ::std::os::raw::c_char,
                               path: *mut ::std::os::raw::c_char,
                               pathBufferSize: uInt32, pathStatus: *mut int32)
     -> int32;
    pub fn DAQmxSwitchOpenRelays(relayList: *mut ::std::os::raw::c_char,
                                 waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchCloseRelays(relayList: *mut ::std::os::raw::c_char,
                                  waitForSettling: bool32) -> int32;
    pub fn DAQmxSwitchGetSingleRelayCount(relayName:
                                              *mut ::std::os::raw::c_char,
                                          count: *mut uInt32) -> int32;
    pub fn DAQmxSwitchGetMultiRelayCount(relayList:
                                             *mut ::std::os::raw::c_char,
                                         count: *mut uInt32,
                                         countArraySize: uInt32,
                                         numRelayCountsRead: *mut uInt32)
     -> int32;
    pub fn DAQmxSwitchGetSingleRelayPos(relayName:
                                            *mut ::std::os::raw::c_char,
                                        relayPos: *mut uInt32) -> int32;
    pub fn DAQmxSwitchGetMultiRelayPos(relayList: *mut ::std::os::raw::c_char,
                                       relayPos: *mut uInt32,
                                       relayPosArraySize: uInt32,
                                       numRelayPossRead: *mut uInt32)
     -> int32;
    pub fn DAQmxSwitchWaitForSettling(deviceName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetSwitchChanAttribute(switchChannelName:
                                           *mut ::std::os::raw::c_char,
                                       attribute: int32,
                                       value: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxSetSwitchChanAttribute(switchChannelName:
                                           *mut ::std::os::raw::c_char,
                                       attribute: int32, ...) -> int32;
    pub fn DAQmxGetSwitchDeviceAttribute(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         attribute: int32,
                                         value:
                                             *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetSwitchDeviceAttribute(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         attribute: int32, ...) -> int32;
    pub fn DAQmxGetSwitchScanAttribute(taskHandle: TaskHandle,
                                       attribute: int32,
                                       value: *mut ::std::os::raw::c_void)
     -> int32;
    pub fn DAQmxSetSwitchScanAttribute(taskHandle: TaskHandle,
                                       attribute: int32, ...) -> int32;
    pub fn DAQmxResetSwitchScanAttribute(taskHandle: TaskHandle,
                                         attribute: int32) -> int32;
    pub fn DAQmxConnectTerms(sourceTerminal: *mut ::std::os::raw::c_char,
                             destinationTerminal: *mut ::std::os::raw::c_char,
                             signalModifiers: int32) -> int32;
    pub fn DAQmxDisconnectTerms(sourceTerminal: *mut ::std::os::raw::c_char,
                                destinationTerminal:
                                    *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxTristateOutputTerm(outputTerminal:
                                       *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetDevice(deviceName: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxSelfTestDevice(deviceName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDeviceAttribute(deviceName: *mut ::std::os::raw::c_char,
                                   attribute: int32,
                                   value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxCreateWatchdogTimerTask(deviceName:
                                            *mut ::std::os::raw::c_char,
                                        taskName: *mut ::std::os::raw::c_char,
                                        taskHandle: *mut TaskHandle,
                                        timeout: float64,
                                        lines: *mut ::std::os::raw::c_char,
                                        expState: int32, ...) -> int32;
    pub fn DAQmxCreateWatchdogTimerTaskEx(deviceName:
                                              *mut ::std::os::raw::c_char,
                                          taskName:
                                              *mut ::std::os::raw::c_char,
                                          taskHandle: *mut TaskHandle,
                                          timeout: float64) -> int32;
    pub fn DAQmxControlWatchdogTask(taskHandle: TaskHandle, action: int32)
     -> int32;
    pub fn DAQmxCfgWatchdogAOExpirStates(taskHandle: TaskHandle,
                                         channelNames:
                                             *mut ::std::os::raw::c_char,
                                         expirStateArray: *mut float64,
                                         outputTypeArray: *mut int32,
                                         arraySize: uInt32) -> int32;
    pub fn DAQmxCfgWatchdogCOExpirStates(taskHandle: TaskHandle,
                                         channelNames:
                                             *mut ::std::os::raw::c_char,
                                         expirStateArray: *mut int32,
                                         arraySize: uInt32) -> int32;
    pub fn DAQmxCfgWatchdogDOExpirStates(taskHandle: TaskHandle,
                                         channelNames:
                                             *mut ::std::os::raw::c_char,
                                         expirStateArray: *mut int32,
                                         arraySize: uInt32) -> int32;
    pub fn DAQmxGetWatchdogAttribute(taskHandle: TaskHandle,
                                     lines: *mut ::std::os::raw::c_char,
                                     attribute: int32,
                                     value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetWatchdogAttribute(taskHandle: TaskHandle,
                                     lines: *mut ::std::os::raw::c_char,
                                     attribute: int32, ...) -> int32;
    pub fn DAQmxResetWatchdogAttribute(taskHandle: TaskHandle,
                                       lines: *mut ::std::os::raw::c_char,
                                       attribute: int32) -> int32;
    pub fn DAQmxSelfCal(deviceName: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxPerformBridgeOffsetNullingCal(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxPerformBridgeOffsetNullingCalEx(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                skipUnsupportedChannels:
                                                    bool32) -> int32;
    pub fn DAQmxPerformThrmcplLeadOffsetNullingCal(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   skipUnsupportedChannels:
                                                       bool32) -> int32;
    pub fn DAQmxPerformStrainShuntCal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      shuntResistorValue: float64,
                                      shuntResistorLocation: int32,
                                      skipUnsupportedChannels: bool32)
     -> int32;
    pub fn DAQmxPerformStrainShuntCalEx(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        shuntResistorValue: float64,
                                        shuntResistorLocation: int32,
                                        shuntResistorSelect: int32,
                                        shuntResistorSource: int32,
                                        skipUnsupportedChannels: bool32)
     -> int32;
    pub fn DAQmxPerformBridgeShuntCal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      shuntResistorValue: float64,
                                      shuntResistorLocation: int32,
                                      bridgeResistance: float64,
                                      skipUnsupportedChannels: bool32)
     -> int32;
    pub fn DAQmxPerformBridgeShuntCalEx(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        shuntResistorValue: float64,
                                        shuntResistorLocation: int32,
                                        shuntResistorSelect: int32,
                                        shuntResistorSource: int32,
                                        bridgeResistance: float64,
                                        skipUnsupportedChannels: bool32)
     -> int32;
    pub fn DAQmxGetSelfCalLastDateAndTime(deviceName:
                                              *mut ::std::os::raw::c_char,
                                          year: *mut uInt32,
                                          month: *mut uInt32,
                                          day: *mut uInt32, hour: *mut uInt32,
                                          minute: *mut uInt32) -> int32;
    pub fn DAQmxGetExtCalLastDateAndTime(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         year: *mut uInt32,
                                         month: *mut uInt32, day: *mut uInt32,
                                         hour: *mut uInt32,
                                         minute: *mut uInt32) -> int32;
    pub fn DAQmxRestoreLastExtCalConst(deviceName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxESeriesCalAdjust(calHandle: CalHandle,
                                 referenceVoltage: float64) -> int32;
    pub fn DAQmxMSeriesCalAdjust(calHandle: CalHandle,
                                 referenceVoltage: float64) -> int32;
    pub fn DAQmxSSeriesCalAdjust(calHandle: CalHandle,
                                 referenceVoltage: float64) -> int32;
    pub fn DAQmxSCBaseboardCalAdjust(calHandle: CalHandle,
                                     referenceVoltage: float64) -> int32;
    pub fn DAQmxAOSeriesCalAdjust(calHandle: CalHandle,
                                  referenceVoltage: float64) -> int32;
    pub fn DAQmxXSeriesCalAdjust(calHandle: CalHandle,
                                 referenceVoltage: float64) -> int32;
    pub fn DAQmxDeviceSupportsCal(deviceName: *mut ::std::os::raw::c_char,
                                  calSupported: *mut bool32) -> int32;
    pub fn DAQmxGetCalInfoAttribute(deviceName: *mut ::std::os::raw::c_char,
                                    attribute: int32,
                                    value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetCalInfoAttribute(deviceName: *mut ::std::os::raw::c_char,
                                    attribute: int32, ...) -> int32;
    pub fn DAQmxInitExtCal(deviceName: *mut ::std::os::raw::c_char,
                           password: *mut ::std::os::raw::c_char,
                           calHandle: *mut CalHandle) -> int32;
    pub fn DAQmxCloseExtCal(calHandle: CalHandle, action: int32) -> int32;
    pub fn DAQmxChangeExtCalPassword(deviceName: *mut ::std::os::raw::c_char,
                                     password: *mut ::std::os::raw::c_char,
                                     newPassword: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxDSASetCalTemp(calHandle: CalHandle, temperature: float64)
     -> int32;
    pub fn DAQmxAdjustDSAAICal(calHandle: CalHandle,
                               referenceVoltage: float64) -> int32;
    pub fn DAQmxAdjustDSAAICalEx(calHandle: CalHandle,
                                 referenceVoltage: float64,
                                 inputsShorted: bool32) -> int32;
    pub fn DAQmxAdjustDSAAICalWithGainAndCoupling(calHandle: CalHandle,
                                                  coupling: int32,
                                                  gain: float64,
                                                  referenceVoltage: float64)
     -> int32;
    pub fn DAQmxAdjustDSAAOCal(calHandle: CalHandle, channel: uInt32,
                               requestedLowVoltage: float64,
                               actualLowVoltage: float64,
                               requestedHighVoltage: float64,
                               actualHighVoltage: float64,
                               gainSetting: float64) -> int32;
    pub fn DAQmxAdjust4610Cal(calHandle: CalHandle,
                              channelName: *mut ::std::os::raw::c_char,
                              gain: float64, offset: float64) -> int32;
    pub fn DAQmxAdjustDSATimebaseCal(calHandle: CalHandle,
                                     referenceFrequency: float64) -> int32;
    pub fn DAQmxAdjustDSAAOTimebaseCal(calHandle: CalHandle,
                                       measuredFrequency: float64,
                                       calComplete: *mut bool32) -> int32;
    pub fn DAQmxSetupDSAAOTimebaseCal(calHandle: CalHandle,
                                      expectedFrequency: *mut float64)
     -> int32;
    pub fn DAQmxGet4463AdjustPoints(calHandle: CalHandle,
                                    terminalConfig: int32, gain: float64,
                                    adjustmentPoints: *mut float64,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4463Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              referenceVoltage: float64) -> int32;
    pub fn DAQmxSetup4463Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             terminalConfig: int32, gain: float64,
                             outputVoltage: float64) -> int32;
    pub fn DAQmxSetup4480Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             calMode: int32) -> int32;
    pub fn DAQmxAdjustTIOTimebaseCal(calHandle: CalHandle,
                                     referenceFrequency: float64) -> int32;
    pub fn DAQmxAdjust4204Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              lowPassFreq: float64, trackHoldEnabled: bool32,
                              inputVal: float64) -> int32;
    pub fn DAQmxAdjust4220Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              gain: float64, inputVal: float64) -> int32;
    pub fn DAQmxAdjust4224Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              gain: float64, inputVal: float64) -> int32;
    pub fn DAQmxAdjust4225Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              gain: float64, inputVal: float64) -> int32;
    pub fn DAQmxSetup433xCal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             excitationVoltage: float64) -> int32;
    pub fn DAQmxAdjust433xCal(calHandle: CalHandle, refVoltage: float64,
                              refExcitation: float64, shuntLocation: int32)
     -> int32;
    pub fn DAQmxSetup4339Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             calMode: int32, rangeMax: float64,
                             rangeMin: float64, excitationVoltage: float64)
     -> int32;
    pub fn DAQmxAdjust4339Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxGet4339CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4300Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxSetup4302Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64) -> int32;
    pub fn DAQmxGet4302CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4302Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxSetup4303Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64) -> int32;
    pub fn DAQmxGet4303CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4303Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxSetup4304Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64) -> int32;
    pub fn DAQmxGet4304CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4304Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxSetup4305Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64) -> int32;
    pub fn DAQmxGet4305CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust4305Cal(calHandle: CalHandle, refVoltage: float64)
     -> int32;
    pub fn DAQmxAdjust4353Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              refVal: float64) -> int32;
    pub fn DAQmxAdjust4357Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              refVals: *mut float64, numRefVals: int32)
     -> int32;
    pub fn DAQmxSetup4322Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             outputType: int32, outputVal: float64) -> int32;
    pub fn DAQmxAdjust4322Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              refVal: float64) -> int32;
    pub fn DAQmxGet4322CalAdjustPoints(calHandle: CalHandle,
                                       outputType: int32,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxConnectSCExpressCalAccChans(calHandle: CalHandle,
                                            channelNames:
                                                *mut ::std::os::raw::c_char,
                                            connection:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxDisconnectSCExpressCalAccChans(calHandle: CalHandle) -> int32;
    pub fn DAQmxGetPossibleSCExpressCalAccConnections(deviceName:
                                                          *mut ::std::os::raw::c_char,
                                                      channelNames:
                                                          *mut ::std::os::raw::c_char,
                                                      connections:
                                                          *mut ::std::os::raw::c_char,
                                                      connectionsBufferSize:
                                                          uInt32) -> int32;
    pub fn DAQmxSetSCExpressCalAccBridgeOutput(calHandle: CalHandle,
                                               voltsPerVolt: float64)
     -> int32;
    pub fn DAQmxGet9201CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxCSeriesSetCalTemp(calHandle: CalHandle, temperature: float64)
     -> int32;
    pub fn DAQmxAdjust9201Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9203CalAdjustPoints(calHandle: CalHandle,
                                       rangeMin: float64, rangeMax: float64,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9203GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  rangeMin: float64, rangeMax: float64,
                                  value: float64) -> int32;
    pub fn DAQmxAdjust9203OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char,
                                    rangeMin: float64, rangeMax: float64)
     -> int32;
    pub fn DAQmxAdjust9205Cal(calHandle: CalHandle, value: float64) -> int32;
    pub fn DAQmxAdjust9206Cal(calHandle: CalHandle, value: float64) -> int32;
    pub fn DAQmxGet9207CalAdjustPoints(calHandle: CalHandle,
                                       channelNames:
                                           *mut ::std::os::raw::c_char,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9207GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  value: float64) -> int32;
    pub fn DAQmxAdjust9207OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGet9208CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9208GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  value: float64) -> int32;
    pub fn DAQmxAdjust9208OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGet9209CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9209GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  terminalConfig: int32, value: float64)
     -> int32;
    pub fn DAQmxAdjust9209OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAdjust9210Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxAdjust9211Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9212CalAdjustPoints(calHandle: CalHandle,
                                       channelNames:
                                           *mut ::std::os::raw::c_char,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9212Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9213CalAdjustPoints(calHandle: CalHandle,
                                       rangeMin: float64, rangeMax: float64,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9213Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              rangeMin: float64, rangeMax: float64,
                              value: float64) -> int32;
    pub fn DAQmxGet9214CalAdjustPoints(calHandle: CalHandle,
                                       channelNames:
                                           *mut ::std::os::raw::c_char,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9214Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9215CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9215Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9216CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9216Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9217CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9217Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxSetup9218Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64,
                             measType: int32) -> int32;
    pub fn DAQmxGet9218CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9218Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxSetup9219Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             rangeMin: float64, rangeMax: float64,
                             measType: int32, bridgeConfig: int32) -> int32;
    pub fn DAQmxGet9219CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9219Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9220CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9220Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9221CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9221Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9222CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9222Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9223CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9223Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9225CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9225Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9226CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9226Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9227CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9227Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9229CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9229Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9230CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9230Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9232CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9232Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9234CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9234GainCal(calHandle: CalHandle,
                                  channelNames: *mut ::std::os::raw::c_char,
                                  value: float64) -> int32;
    pub fn DAQmxAdjust9234OffsetCal(calHandle: CalHandle,
                                    channelNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGet9238CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9238Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9239CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9239Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9242CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9242Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: float64) -> int32;
    pub fn DAQmxAdjust9242Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9244CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9244Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: float64) -> int32;
    pub fn DAQmxAdjust9244Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9246CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9246Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9247CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9247Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9251CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut float64,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxAdjust9251Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9260CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9260Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9260Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9263CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9263Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9263Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9264CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9264Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9264Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9265CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9265Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9265Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxGet9269CalAdjustPoints(calHandle: CalHandle,
                                       adjustmentPoints: *mut int32,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetup9269Cal(calHandle: CalHandle,
                             channelNames: *mut ::std::os::raw::c_char,
                             value: int32) -> int32;
    pub fn DAQmxAdjust9269Cal(calHandle: CalHandle,
                              channelNames: *mut ::std::os::raw::c_char,
                              value: float64) -> int32;
    pub fn DAQmxSetup1102Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1102Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1104Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAdjust1104Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1112Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAdjust1112Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1122Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1122Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1124Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             range: int32, dacValue: uInt32) -> int32;
    pub fn DAQmxAdjust1124Cal(calHandle: CalHandle, measOutput: float64)
     -> int32;
    pub fn DAQmxSetup1125Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1125Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1126Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             upperFreqLimit: float64) -> int32;
    pub fn DAQmxAdjust1126Cal(calHandle: CalHandle, refFreq: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1141Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1141Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1142Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1142Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1143Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1143Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1502Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1502Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1503Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1503Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxAdjust1503CurrentCal(calHandle: CalHandle,
                                     channelName: *mut ::std::os::raw::c_char,
                                     measCurrent: float64) -> int32;
    pub fn DAQmxSetup1520Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust1520Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1521Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAdjust1521Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup153xCal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             gain: float64) -> int32;
    pub fn DAQmxAdjust153xCal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64) -> int32;
    pub fn DAQmxSetup1540Cal(calHandle: CalHandle,
                             channelName: *mut ::std::os::raw::c_char,
                             excitationVoltage: float64,
                             excitationFreq: float64) -> int32;
    pub fn DAQmxAdjust1540Cal(calHandle: CalHandle, refVoltage: float64,
                              measOutput: float64, inputCalSource: int32)
     -> int32;
    pub fn DAQmxConfigureTEDS(physicalChannel: *mut ::std::os::raw::c_char,
                              filePath: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxClearTEDS(physicalChannel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxWriteToTEDSFromArray(physicalChannel:
                                         *mut ::std::os::raw::c_char,
                                     bitStream: *mut uInt8, arraySize: uInt32,
                                     basicTEDSOptions: int32) -> int32;
    pub fn DAQmxWriteToTEDSFromFile(physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    filePath: *mut ::std::os::raw::c_char,
                                    basicTEDSOptions: int32) -> int32;
    pub fn DAQmxGetPhysicalChanAttribute(physicalChannel:
                                             *mut ::std::os::raw::c_char,
                                         attribute: int32,
                                         value:
                                             *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxWaitForNextSampleClock(taskHandle: TaskHandle,
                                       timeout: float64, isLate: *mut bool32)
     -> int32;
    pub fn DAQmxGetRealTimeAttribute(taskHandle: TaskHandle, attribute: int32,
                                     value: *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetRealTimeAttribute(taskHandle: TaskHandle,
                                     attribute: int32, ...) -> int32;
    pub fn DAQmxResetRealTimeAttribute(taskHandle: TaskHandle,
                                       attribute: int32) -> int32;
    pub fn DAQmxIsReadOrWriteLate(errorCode: int32) -> bool32;
    pub fn DAQmxSaveTask(taskHandle: TaskHandle,
                         saveAs: *mut ::std::os::raw::c_char,
                         author: *mut ::std::os::raw::c_char, options: uInt32)
     -> int32;
    pub fn DAQmxSaveGlobalChan(taskHandle: TaskHandle,
                               channelName: *mut ::std::os::raw::c_char,
                               saveAs: *mut ::std::os::raw::c_char,
                               author: *mut ::std::os::raw::c_char,
                               options: uInt32) -> int32;
    pub fn DAQmxSaveScale(scaleName: *mut ::std::os::raw::c_char,
                          saveAs: *mut ::std::os::raw::c_char,
                          author: *mut ::std::os::raw::c_char,
                          options: uInt32) -> int32;
    pub fn DAQmxDeleteSavedTask(taskName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxDeleteSavedGlobalChan(channelName:
                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxDeleteSavedScale(scaleName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetPersistedTaskAttribute(taskName:
                                              *mut ::std::os::raw::c_char,
                                          attribute: int32,
                                          value:
                                              *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxGetPersistedChanAttribute(channel:
                                              *mut ::std::os::raw::c_char,
                                          attribute: int32,
                                          value:
                                              *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxGetPersistedScaleAttribute(scaleName:
                                               *mut ::std::os::raw::c_char,
                                           attribute: int32,
                                           value:
                                               *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxGetSystemInfoAttribute(attribute: int32,
                                       value:
                                           *mut ::std::os::raw::c_void, ...)
     -> int32;
    pub fn DAQmxSetDigitalPowerUpStates(deviceName:
                                            *mut ::std::os::raw::c_char,
                                        channelNames:
                                            *mut ::std::os::raw::c_char,
                                        state: int32, ...) -> int32;
    pub fn DAQmxGetDigitalPowerUpStates(deviceName:
                                            *mut ::std::os::raw::c_char,
                                        channelName:
                                            *mut ::std::os::raw::c_char,
                                        state: *mut int32, ...) -> int32;
    pub fn DAQmxSetDigitalPullUpPullDownStates(deviceName:
                                                   *mut ::std::os::raw::c_char,
                                               channelName:
                                                   *mut ::std::os::raw::c_char,
                                               state: int32, ...) -> int32;
    pub fn DAQmxGetDigitalPullUpPullDownStates(deviceName:
                                                   *mut ::std::os::raw::c_char,
                                               channelName:
                                                   *mut ::std::os::raw::c_char,
                                               state: *mut int32, ...)
     -> int32;
    pub fn DAQmxSetAnalogPowerUpStates(deviceName:
                                           *mut ::std::os::raw::c_char,
                                       channelNames:
                                           *mut ::std::os::raw::c_char,
                                       state: float64,
                                       channelType: int32, ...) -> int32;
    pub fn DAQmxSetAnalogPowerUpStatesWithOutputType(channelNames:
                                                         *mut ::std::os::raw::c_char,
                                                     stateArray: *mut float64,
                                                     channelTypeArray:
                                                         *mut int32,
                                                     arraySize: uInt32)
     -> int32;
    pub fn DAQmxGetAnalogPowerUpStates(deviceName:
                                           *mut ::std::os::raw::c_char,
                                       channelName:
                                           *mut ::std::os::raw::c_char,
                                       state: *mut float64,
                                       channelType: int32, ...) -> int32;
    pub fn DAQmxGetAnalogPowerUpStatesWithOutputType(channelNames:
                                                         *mut ::std::os::raw::c_char,
                                                     stateArray: *mut float64,
                                                     channelTypeArray:
                                                         *mut int32,
                                                     arraySizePtr:
                                                         *mut uInt32)
     -> int32;
    pub fn DAQmxSetDigitalLogicFamilyPowerUpState(deviceName:
                                                      *mut ::std::os::raw::c_char,
                                                  logicFamily: int32)
     -> int32;
    pub fn DAQmxGetDigitalLogicFamilyPowerUpState(deviceName:
                                                      *mut ::std::os::raw::c_char,
                                                  logicFamily: *mut int32)
     -> int32;
    pub fn DAQmxAddNetworkDevice(IPAddress: *mut ::std::os::raw::c_char,
                                 deviceName: *mut ::std::os::raw::c_char,
                                 attemptReservation: bool32, timeout: float64,
                                 deviceNameOut: *mut ::std::os::raw::c_char,
                                 deviceNameOutBufferSize: uInt32) -> int32;
    pub fn DAQmxDeleteNetworkDevice(deviceName: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxReserveNetworkDevice(deviceName: *mut ::std::os::raw::c_char,
                                     overrideReservation: bool32) -> int32;
    pub fn DAQmxUnreserveNetworkDevice(deviceName:
                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxAutoConfigureCDAQSyncConnections(chassisDevicesPorts:
                                                     *mut ::std::os::raw::c_char,
                                                 timeout: float64) -> int32;
    pub fn DAQmxGetAutoConfiguredCDAQSyncConnections(portList:
                                                         *mut ::std::os::raw::c_char,
                                                     portListSize: uInt32)
     -> int32;
    pub fn DAQmxAreConfiguredCDAQSyncPortsDisconnected(chassisDevicesPorts:
                                                           *mut ::std::os::raw::c_char,
                                                       timeout: float64,
                                                       disconnectedPortsExist:
                                                           *mut bool32)
     -> int32;
    pub fn DAQmxGetDisconnectedCDAQSyncPorts(portList:
                                                 *mut ::std::os::raw::c_char,
                                             portListSize: uInt32) -> int32;
    pub fn DAQmxAddCDAQSyncConnection(portList: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxRemoveCDAQSyncConnection(portList:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetErrorString(errorCode: int32,
                               errorString: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetExtendedErrorInfo(errorString: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxGetBufInputBufSize(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetBufInputBufSize(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetBufInputBufSize(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetBufInputOnbrdBufSize(taskHandle: TaskHandle,
                                        data: *mut uInt32) -> int32;
    pub fn DAQmxGetBufOutputBufSize(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetBufOutputBufSize(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetBufOutputBufSize(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetBufOutputOnbrdBufSize(taskHandle: TaskHandle,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxSetBufOutputOnbrdBufSize(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetBufOutputOnbrdBufSize(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSelfCalSupported(deviceName: *mut ::std::os::raw::c_char,
                                    data: *mut bool32) -> int32;
    pub fn DAQmxGetSelfCalLastTemp(deviceName: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxGetExtCalRecommendedInterval(deviceName:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxGetExtCalLastTemp(deviceName: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxGetCalUserDefinedInfo(deviceName: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCalUserDefinedInfo(deviceName: *mut ::std::os::raw::c_char,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCalUserDefinedInfoMaxSize(deviceName:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxGetCalDevTemp(deviceName: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxGetCalAccConnectionCount(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxSetCalAccConnectionCount(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         data: uInt32) -> int32;
    pub fn DAQmxGetCalRecommendedAccConnectionCountLimit(deviceName:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetAIMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetAIMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIMax(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetAIMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIMin(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAICustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAICustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAICustomScaleName(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIMeasType(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxGetAIVoltageUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAIVoltageUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAIVoltageUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVoltagedBRef(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetAIVoltagedBRef(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetAIVoltagedBRef(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVoltageACRMSUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetAIVoltageACRMSUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetAIVoltageACRMSUnits(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAITempUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAITempUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAITempUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIThrmcplType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIThrmcplType(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplScaleType(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAIThrmcplScaleType(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAIThrmcplScaleType(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplCJCSrc(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxGetAIThrmcplCJCVal(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmcplCJCVal(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetAIThrmcplCJCVal(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplCJCChan(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxGetAIRTDType(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut int32) -> int32;
    pub fn DAQmxSetAIRTDType(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: int32) -> int32;
    pub fn DAQmxResetAIRTDType(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRTDR0(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: *mut float64) -> int32;
    pub fn DAQmxSetAIRTDR0(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: float64) -> int32;
    pub fn DAQmxResetAIRTDR0(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRTDA(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIRTDA(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIRTDA(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRTDB(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIRTDB(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIRTDB(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRTDC(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIRTDC(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIRTDC(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIThrmstrA(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmstrA(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIThrmstrA(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmstrB(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmstrB(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIThrmstrB(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmstrC(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmstrC(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIThrmstrC(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmstrR1(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmstrR1(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetAIThrmstrR1(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIForceReadFromChan(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIForceReadFromChan(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetAIForceReadFromChan(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAICurrentUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAICurrentUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAICurrentUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAICurrentACRMSUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetAICurrentACRMSUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetAICurrentACRMSUnits(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIStrainUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIStrainUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainGageForceReadFromChan(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAIStrainGageForceReadFromChan(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAIStrainGageForceReadFromChan(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainGageGageFactor(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIStrainGageGageFactor(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetAIStrainGageGageFactor(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainGagePoissonRatio(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAIStrainGagePoissonRatio(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAIStrainGagePoissonRatio(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIStrainGageCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIStrainGageCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIStrainGageCfg(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRosetteStrainGageRosetteType(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxGetAIRosetteStrainGageOrientation(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIRosetteStrainGageOrientation(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: float64) -> int32;
    pub fn DAQmxResetAIRosetteStrainGageOrientation(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRosetteStrainGageStrainChans(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxGetAIRosetteStrainGageRosetteMeasType(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIRosetteStrainGageRosetteMeasType(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: int32) -> int32;
    pub fn DAQmxResetAIRosetteStrainGageRosetteMeasType(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIResistanceUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIResistanceUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIResistanceUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFreqUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAIFreqUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAIFreqUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFreqThreshVoltage(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAIFreqThreshVoltage(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: float64) -> int32;
    pub fn DAQmxResetAIFreqThreshVoltage(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFreqHyst(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIFreqHyst(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIFreqHyst(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILVDTUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAILVDTUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAILVDTUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILVDTSensitivity(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAILVDTSensitivity(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetAILVDTSensitivity(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILVDTSensitivityUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAILVDTSensitivityUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetAILVDTSensitivityUnits(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRVDTUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAIRVDTUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAIRVDTUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRVDTSensitivity(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAIRVDTSensitivity(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetAIRVDTSensitivity(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRVDTSensitivityUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAIRVDTSensitivityUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetAIRVDTSensitivityUnits(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIEddyCurrentProxProbeUnits(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetAIEddyCurrentProxProbeUnits(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetAIEddyCurrentProxProbeUnits(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIEddyCurrentProxProbeSensitivity(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIEddyCurrentProxProbeSensitivity(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: float64) -> int32;
    pub fn DAQmxResetAIEddyCurrentProxProbeSensitivity(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIEddyCurrentProxProbeSensitivityUnits(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIEddyCurrentProxProbeSensitivityUnits(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: int32)
     -> int32;
    pub fn DAQmxResetAIEddyCurrentProxProbeSensitivityUnits(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAISoundPressureMaxSoundPressureLvl(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetAISoundPressureMaxSoundPressureLvl(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: float64) -> int32;
    pub fn DAQmxResetAISoundPressureMaxSoundPressureLvl(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAISoundPressureUnits(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAISoundPressureUnits(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetAISoundPressureUnits(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAISoundPressuredBRef(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAISoundPressuredBRef(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetAISoundPressuredBRef(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIMicrophoneSensitivity(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetAIMicrophoneSensitivity(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetAIMicrophoneSensitivity(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelUnits(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxSetAIAccelUnits(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: int32) -> int32;
    pub fn DAQmxResetAIAccelUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAcceldBRef(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIAcceldBRef(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: float64) -> int32;
    pub fn DAQmxResetAIAcceldBRef(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccel4WireDCVoltageSensitivity(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIAccel4WireDCVoltageSensitivity(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetAIAccel4WireDCVoltageSensitivity(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccel4WireDCVoltageSensitivityUnits(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIAccel4WireDCVoltageSensitivityUnits(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: int32)
     -> int32;
    pub fn DAQmxResetAIAccel4WireDCVoltageSensitivityUnits(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelSensitivity(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetAIAccelSensitivity(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetAIAccelSensitivity(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelSensitivityUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAIAccelSensitivityUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetAIAccelSensitivityUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelChargeSensitivity(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAIAccelChargeSensitivity(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAIAccelChargeSensitivity(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAccelChargeSensitivityUnits(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIAccelChargeSensitivityUnits(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: int32) -> int32;
    pub fn DAQmxResetAIAccelChargeSensitivityUnits(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVelocityUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIVelocityUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIVelocityUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVelocityIEPESensordBRef(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64) -> int32;
    pub fn DAQmxSetAIVelocityIEPESensordBRef(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: float64) -> int32;
    pub fn DAQmxResetAIVelocityIEPESensordBRef(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVelocityIEPESensorSensitivity(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIVelocityIEPESensorSensitivity(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetAIVelocityIEPESensorSensitivity(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIVelocityIEPESensorSensitivityUnits(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIVelocityIEPESensorSensitivityUnits(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: int32) -> int32;
    pub fn DAQmxResetAIVelocityIEPESensorSensitivityUnits(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIForceUnits(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxSetAIForceUnits(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: int32) -> int32;
    pub fn DAQmxResetAIForceUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIForceIEPESensorSensitivity(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIForceIEPESensorSensitivity(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: float64) -> int32;
    pub fn DAQmxResetAIForceIEPESensorSensitivity(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIForceIEPESensorSensitivityUnits(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIForceIEPESensorSensitivityUnits(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: int32) -> int32;
    pub fn DAQmxResetAIForceIEPESensorSensitivityUnits(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIPressureUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIPressureUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIPressureUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAITorqueUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAITorqueUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAITorqueUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIBridgeUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeElectricalUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeElectricalUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetAIBridgeElectricalUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgePhysicalUnits(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgePhysicalUnits(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetAIBridgePhysicalUnits(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeScaleType(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeScaleType(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIBridgeScaleType(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTwoPointLinFirstElectricalVal(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeTwoPointLinFirstElectricalVal(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeTwoPointLinFirstElectricalVal(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTwoPointLinSecondElectricalVal(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeTwoPointLinSecondElectricalVal(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeTwoPointLinSecondElectricalVal(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTableElectricalVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIBridgeTableElectricalVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIBridgeTableElectricalVals(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeTablePhysicalVals(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIBridgeTablePhysicalVals(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIBridgeTablePhysicalVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgePolyForwardCoeff(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIBridgePolyForwardCoeff(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIBridgePolyForwardCoeff(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgePolyReverseCoeff(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIBridgePolyReverseCoeff(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIBridgePolyReverseCoeff(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChargeUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIChargeUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIChargeUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIIsTEDS(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char,
                            data: *mut bool32) -> int32;
    pub fn DAQmxGetAITEDSUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetAICoupling(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxSetAICoupling(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: int32) -> int32;
    pub fn DAQmxResetAICoupling(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIImpedance(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIImpedance(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetAIImpedance(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAITermCfg(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut int32) -> int32;
    pub fn DAQmxSetAITermCfg(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: int32) -> int32;
    pub fn DAQmxResetAITermCfg(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIInputSrc(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIInputSrc(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetAIInputSrc(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIResistanceCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIResistanceCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIResistanceCfg(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILeadWireResistance(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAILeadWireResistance(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetAILeadWireResistance(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeCfg(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeCfg(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAIBridgeCfg(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeNomResistance(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetAIBridgeNomResistance(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: float64) -> int32;
    pub fn DAQmxResetAIBridgeNomResistance(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeInitialVoltage(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIBridgeInitialVoltage(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetAIBridgeInitialVoltage(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeInitialRatio(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAIBridgeInitialRatio(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetAIBridgeInitialRatio(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetAIBridgeShuntCalEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetAIBridgeShuntCalEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalSelect(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeShuntCalSelect(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetAIBridgeShuntCalSelect(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalASrc(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalASrc(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalASrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalGainAdjust(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIBridgeShuntCalGainAdjust(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: float64) -> int32;
    pub fn DAQmxResetAIBridgeShuntCalGainAdjust(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalAResistance(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalAResistance(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalAResistance(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalAActualResistance(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalAActualResistance(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalAActualResistance(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalBResistance(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalBResistance(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalBResistance(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeShuntCalShuntCalBActualResistance(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut float64)
     -> int32;
    pub fn DAQmxSetAIBridgeShuntCalShuntCalBActualResistance(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data: float64)
     -> int32;
    pub fn DAQmxResetAIBridgeShuntCalShuntCalBActualResistance(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeBalanceCoarsePot(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeBalanceCoarsePot(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetAIBridgeBalanceCoarsePot(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIBridgeBalanceFinePot(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAIBridgeBalanceFinePot(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetAIBridgeBalanceFinePot(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAICurrentShuntLoc(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAICurrentShuntLoc(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAICurrentShuntLoc(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAICurrentShuntResistance(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAICurrentShuntResistance(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAICurrentShuntResistance(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitSense(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitSense(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: int32) -> int32;
    pub fn DAQmxResetAIExcitSense(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitSrc(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitSrc(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: int32) -> int32;
    pub fn DAQmxResetAIExcitSrc(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitVal(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIExcitVal(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIExcitVal(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitUseForScaling(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxSetAIExcitUseForScaling(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: bool32) -> int32;
    pub fn DAQmxResetAIExcitUseForScaling(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitUseMultiplexed(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetAIExcitUseMultiplexed(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetAIExcitUseMultiplexed(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitActualVal(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxSetAIExcitActualVal(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: float64) -> int32;
    pub fn DAQmxResetAIExcitActualVal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitDCorAC(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitDCorAC(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIExcitDCorAC(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitVoltageOrCurrent(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitVoltageOrCurrent(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetAIExcitVoltageOrCurrent(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIExcitIdleOutputBehavior(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetAIExcitIdleOutputBehavior(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: int32) -> int32;
    pub fn DAQmxResetAIExcitIdleOutputBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIACExcitFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxSetAIACExcitFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: float64) -> int32;
    pub fn DAQmxResetAIACExcitFreq(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIACExcitSyncEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIACExcitSyncEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetAIACExcitSyncEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIACExcitWireMode(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIACExcitWireMode(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIACExcitWireMode(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIOpenThrmcplDetectEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetAIOpenThrmcplDetectEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetAIOpenThrmcplDetectEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIThrmcplLeadOffsetVoltage(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIThrmcplLeadOffsetVoltage(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: float64) -> int32;
    pub fn DAQmxResetAIThrmcplLeadOffsetVoltage(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAtten(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: *mut float64) -> int32;
    pub fn DAQmxSetAIAtten(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: float64) -> int32;
    pub fn DAQmxResetAIAtten(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIProbeAtten(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIProbeAtten(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: float64) -> int32;
    pub fn DAQmxResetAIProbeAtten(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut bool32) -> int32;
    pub fn DAQmxSetAILowpassEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: bool32) -> int32;
    pub fn DAQmxResetAILowpassEnable(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassCutoffFreq(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAILowpassCutoffFreq(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: float64) -> int32;
    pub fn DAQmxResetAILowpassCutoffFreq(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassSwitchCapClkSrc(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAILowpassSwitchCapClkSrc(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetAILowpassSwitchCapClkSrc(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassSwitchCapExtClkFreq(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxSetAILowpassSwitchCapExtClkFreq(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: float64) -> int32;
    pub fn DAQmxResetAILowpassSwitchCapExtClkFreq(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassSwitchCapExtClkDiv(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetAILowpassSwitchCapExtClkDiv(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: uInt32) -> int32;
    pub fn DAQmxResetAILowpassSwitchCapExtClkDiv(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILowpassSwitchCapOutClkDiv(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetAILowpassSwitchCapOutClkDiv(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: uInt32) -> int32;
    pub fn DAQmxResetAILowpassSwitchCapOutClkDiv(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut bool32) -> int32;
    pub fn DAQmxSetAIDigFltrEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: bool32) -> int32;
    pub fn DAQmxResetAIDigFltrEnable(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAIDigFltrType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAIDigFltrType(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrResponse(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIDigFltrResponse(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIDigFltrResponse(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrOrder(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIDigFltrOrder(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: uInt32) -> int32;
    pub fn DAQmxResetAIDigFltrOrder(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrLowpassCutoffFreq(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrLowpassCutoffFreq(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrLowpassCutoffFreq(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrHighpassCutoffFreq(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrHighpassCutoffFreq(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrHighpassCutoffFreq(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrBandpassCenterFreq(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrBandpassCenterFreq(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrBandpassCenterFreq(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrBandpassWidth(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrBandpassWidth(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrBandpassWidth(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrNotchCenterFreq(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrNotchCenterFreq(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrNotchCenterFreq(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrNotchWidth(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAIDigFltrNotchWidth(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: float64) -> int32;
    pub fn DAQmxResetAIDigFltrNotchWidth(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDigFltrCoeff(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxSetAIDigFltrCoeff(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxResetAIDigFltrCoeff(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFilterDelay(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxGetAIFilterDelayUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAIFilterDelayUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAIFilterDelayUnits(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRemoveFilterDelay(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIRemoveFilterDelay(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetAIRemoveFilterDelay(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIFilterDelayAdjustment(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetAIFilterDelayAdjustment(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetAIFilterDelayAdjustment(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAveragingWinSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIAveragingWinSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: uInt32) -> int32;
    pub fn DAQmxResetAIAveragingWinSize(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIResolutionUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxGetAIResolution(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetAIRawSampSize(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxGetAIRawSampJustification(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxGetAIADCTimingMode(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetAIADCTimingMode(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetAIADCTimingMode(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIADCCustomTimingMode(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIADCCustomTimingMode(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: uInt32) -> int32;
    pub fn DAQmxResetAIADCCustomTimingMode(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDitherEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAIDitherEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetAIDitherEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalHasValidCalInfo(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxGetAIChanCalEnableCal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut bool32) -> int32;
    pub fn DAQmxSetAIChanCalEnableCal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: bool32) -> int32;
    pub fn DAQmxResetAIChanCalEnableCal(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalApplyCalIfExp(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetAIChanCalApplyCalIfExp(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetAIChanCalApplyCalIfExp(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalScaleType(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAIChanCalScaleType(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAIChanCalScaleType(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalTablePreScaledVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalTablePreScaledVals(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalTablePreScaledVals(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalTableScaledVals(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalTableScaledVals(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64,
                                            arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalTableScaledVals(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalPolyForwardCoeff(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalPolyForwardCoeff(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalPolyForwardCoeff(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalPolyReverseCoeff(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalPolyReverseCoeff(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalPolyReverseCoeff(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalOperatorName(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut ::std::os::raw::c_char,
                                         bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIChanCalOperatorName(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAIChanCalOperatorName(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalDesc(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIChanCalDesc(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAIChanCalDesc(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalVerifRefVals(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalVerifRefVals(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalVerifRefVals(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIChanCalVerifAcqVals(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetAIChanCalVerifAcqVals(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxResetAIChanCalVerifAcqVals(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRngHigh(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut float64) -> int32;
    pub fn DAQmxSetAIRngHigh(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: float64) -> int32;
    pub fn DAQmxResetAIRngHigh(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIRngLow(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char,
                            data: *mut float64) -> int32;
    pub fn DAQmxSetAIRngLow(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char,
                            data: float64) -> int32;
    pub fn DAQmxResetAIRngLow(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAIDCOffset(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIDCOffset(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: float64) -> int32;
    pub fn DAQmxResetAIDCOffset(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIGain(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAIGain(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAIGain(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAISampAndHoldEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAISampAndHoldEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetAISampAndHoldEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIAutoZeroMode(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAIAutoZeroMode(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAIAutoZeroMode(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAIDataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAIDataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDataXferCustomThreshold(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIDataXferCustomThreshold(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: uInt32) -> int32;
    pub fn DAQmxResetAIDataXferCustomThreshold(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetAIUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetAIUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetAIMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIRawDataCompressionType(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAIRawDataCompressionType(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetAIRawDataCompressionType(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAILossyLSBRemovalCompressedSampSize(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetAILossyLSBRemovalCompressedSampSize(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: uInt32) -> int32;
    pub fn DAQmxResetAILossyLSBRemovalCompressedSampSize(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIDevScalingCoeff(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64,
                                     arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetAIEnhancedAliasRejectionEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAIEnhancedAliasRejectionEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetAIEnhancedAliasRejectionEnable(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIOpenChanDetectEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetAIOpenChanDetectEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetAIOpenChanDetectEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetAOMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAOMax(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAOMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetAOMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAOMin(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAOCustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAOCustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAOCustomScaleName(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOOutputType(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxGetAOVoltageUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAOVoltageUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAOVoltageUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOVoltageCurrentLimit(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetAOVoltageCurrentLimit(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: float64) -> int32;
    pub fn DAQmxResetAOVoltageCurrentLimit(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOCurrentUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAOCurrentUnits(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAOCurrentUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetAOFuncGenType(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetAOFuncGenType(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenFreq(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenAmplitude(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenAmplitude(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenAmplitude(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenOffset(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenOffset(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenOffset(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenSquareDutyCycle(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenSquareDutyCycle(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenSquareDutyCycle(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenModulationType(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAOFuncGenModulationType(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetAOFuncGenModulationType(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFuncGenFMDeviation(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAOFuncGenFMDeviation(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetAOFuncGenFMDeviation(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOOutputImpedance(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAOOutputImpedance(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetAOOutputImpedance(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOLoadImpedance(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetAOLoadImpedance(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetAOLoadImpedance(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOIdleOutputBehavior(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAOIdleOutputBehavior(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetAOIdleOutputBehavior(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOTermCfg(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut int32) -> int32;
    pub fn DAQmxSetAOTermCfg(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: int32) -> int32;
    pub fn DAQmxResetAOTermCfg(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAOResolutionUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAOResolutionUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAOResolutionUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOResolution(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetAODACRngHigh(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxSetAODACRngHigh(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: float64) -> int32;
    pub fn DAQmxResetAODACRngHigh(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRngLow(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetAODACRngLow(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetAODACRngLow(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefConnToGnd(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetAODACRefConnToGnd(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetAODACRefConnToGnd(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefAllowConnToGnd(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetAODACRefAllowConnToGnd(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetAODACRefAllowConnToGnd(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefSrc(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetAODACRefSrc(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetAODACRefSrc(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefExtSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut ::std::os::raw::c_char,
                                  bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAODACRefExtSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAODACRefExtSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACRefVal(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetAODACRefVal(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetAODACRefVal(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACOffsetSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAODACOffsetSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAODACOffsetSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACOffsetExtSrc(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAODACOffsetExtSrc(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAODACOffsetExtSrc(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODACOffsetVal(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetAODACOffsetVal(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetAODACOffsetVal(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOReglitchEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut bool32) -> int32;
    pub fn DAQmxSetAOReglitchEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: bool32) -> int32;
    pub fn DAQmxResetAOReglitchEnable(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFilterDelay(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxSetAOFilterDelay(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: float64) -> int32;
    pub fn DAQmxResetAOFilterDelay(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFilterDelayUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAOFilterDelayUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAOFilterDelayUnits(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOFilterDelayAdjustment(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetAOFilterDelayAdjustment(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetAOFilterDelayAdjustment(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOGain(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char,
                          data: *mut float64) -> int32;
    pub fn DAQmxSetAOGain(taskHandle: TaskHandle,
                          channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetAOGain(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetAOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetAOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetAOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetAODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetAODataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetAODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetAODataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetAOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetAOUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetAOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetAOUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetAOMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAODevScalingCoeff(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64,
                                     arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetAOEnhancedImageRejectionEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAOEnhancedImageRejectionEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetAOEnhancedImageRejectionEnable(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIInvertLines(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetDIInvertLines(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: bool32) -> int32;
    pub fn DAQmxResetDIInvertLines(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDINumLines(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut uInt32) -> int32;
    pub fn DAQmxGetDIDigFltrEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut bool32) -> int32;
    pub fn DAQmxSetDIDigFltrEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: bool32) -> int32;
    pub fn DAQmxResetDIDigFltrEnable(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetDIDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetDIDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigFltrEnableBusMode(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetDIDigFltrEnableBusMode(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetDIDigFltrEnableBusMode(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDIDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDIDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigFltrTimebaseRate(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetDIDigFltrTimebaseRate(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: float64) -> int32;
    pub fn DAQmxResetDIDigFltrTimebaseRate(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDigSyncEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut bool32) -> int32;
    pub fn DAQmxSetDIDigSyncEnable(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: bool32) -> int32;
    pub fn DAQmxResetDIDigSyncEnable(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDITristate(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut bool32) -> int32;
    pub fn DAQmxSetDITristate(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: bool32) -> int32;
    pub fn DAQmxResetDITristate(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDILogicFamily(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetDILogicFamily(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetDILogicFamily(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetDIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetDIDataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetDIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetDIDataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetDIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetDIUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetDIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetDIUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetDIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetDIMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDIAcquireOn(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetDIAcquireOn(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetDIAcquireOn(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOOutputDriveType(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetDOOutputDriveType(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetDOOutputDriveType(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOInvertLines(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetDOInvertLines(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: bool32) -> int32;
    pub fn DAQmxResetDOInvertLines(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDONumLines(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut uInt32) -> int32;
    pub fn DAQmxGetDOTristate(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut bool32) -> int32;
    pub fn DAQmxSetDOTristate(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: bool32) -> int32;
    pub fn DAQmxResetDOTristate(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOLineStatesStartState(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetDOLineStatesStartState(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetDOLineStatesStartState(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOLineStatesPausedState(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetDOLineStatesPausedState(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetDOLineStatesPausedState(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOLineStatesDoneState(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetDOLineStatesDoneState(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetDOLineStatesDoneState(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOLogicFamily(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetDOLogicFamily(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetDOLogicFamily(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOOvercurrentLimit(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetDOOvercurrentLimit(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetDOOvercurrentLimit(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOOvercurrentAutoReenable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetDOOvercurrentAutoReenable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetDOOvercurrentAutoReenable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOOvercurrentReenablePeriod(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetDOOvercurrentReenablePeriod(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetDOOvercurrentReenablePeriod(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetDOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetDOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetDODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetDODataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetDODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetDODataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetDOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetDOUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetDOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetDOUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetDOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetDOMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDOGenerateOn(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxSetDOGenerateOn(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: int32) -> int32;
    pub fn DAQmxResetDOGenerateOn(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetCIMax(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetCIMax(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetCIMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char,
                         data: *mut float64) -> int32;
    pub fn DAQmxSetCIMin(taskHandle: TaskHandle,
                         channel: *mut ::std::os::raw::c_char, data: float64)
     -> int32;
    pub fn DAQmxResetCIMin(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetCICustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICustomScaleName(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICustomScaleName(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIMeasType(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxGetCIFreqUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqUnits(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: int32) -> int32;
    pub fn DAQmxResetCIFreqUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqTerm(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIFreqTerm(taskHandle: TaskHandle,
                              channel: *mut ::std::os::raw::c_char,
                              data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetCIFreqTerm(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqTermCfg(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqTermCfg(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetCIFreqTermCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCIFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigFltrEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetCIFreqDigFltrEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetCIFreqDigFltrEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetCIFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: float64) -> int32;
    pub fn DAQmxResetCIFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data:
                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut float64) -> int32;
    pub fn DAQmxSetCIFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: float64) -> int32;
    pub fn DAQmxResetCIFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDigSyncEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetCIFreqDigSyncEnable(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: bool32) -> int32;
    pub fn DAQmxResetCIFreqDigSyncEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqStartingEdge(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqStartingEdge(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetCIFreqStartingEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqMeasMeth(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCIFreqMeasMeth(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetCIFreqMeasMeth(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqEnableAveraging(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetCIFreqEnableAveraging(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetCIFreqEnableAveraging(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqMeasTime(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetCIFreqMeasTime(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetCIFreqMeasTime(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIFreqDiv(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIFreqDiv(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: uInt32) -> int32;
    pub fn DAQmxResetCIFreqDiv(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetCIPeriodUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodUnits(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: int32) -> int32;
    pub fn DAQmxResetCIPeriodUnits(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodTerm(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPeriodTerm(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetCIPeriodTerm(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodTermCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodTermCfg(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetCIPeriodTermCfg(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCIPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigFltrEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPeriodDigFltrEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetCIPeriodDigFltrEnable(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxSetCIPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: float64) -> int32;
    pub fn DAQmxResetCIPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetCIPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetCIPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDigSyncEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPeriodDigSyncEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetCIPeriodDigSyncEnable(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodStartingEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodStartingEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCIPeriodStartingEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodMeasMeth(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCIPeriodMeasMeth(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCIPeriodMeasMeth(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodEnableAveraging(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPeriodEnableAveraging(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: bool32) -> int32;
    pub fn DAQmxResetCIPeriodEnableAveraging(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodMeasTime(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxSetCIPeriodMeasTime(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: float64) -> int32;
    pub fn DAQmxResetCIPeriodMeasTime(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPeriodDiv(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIPeriodDiv(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: uInt32) -> int32;
    pub fn DAQmxResetCIPeriodDiv(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesTerm(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesTermCfg(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesLogicLvlBehavior(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesDigFltrEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCICountEdgesDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCICountEdgesDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesDigSyncEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDir(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesDir(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesDir(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesDirTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesDirTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesDirTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirTermCfg(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesCountDirTermCfg(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesCountDirTermCfg(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirLogicLvlBehavior(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut int32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirLogicLvlBehavior(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesCountDirLogicLvlBehavior(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigFltrEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigFltrEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigFltrEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char,
                                                            data:
                                                                *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char,
                                                            data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data:
                                                              *mut ::std::os::raw::c_char,
                                                          bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data:
                                                              *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountDirDigSyncEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountDirDigSyncEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountDirDigSyncEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesInitialCnt(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesInitialCnt(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: uInt32) -> int32;
    pub fn DAQmxResetCICountEdgesInitialCnt(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesActiveEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesActiveEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesActiveEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesCountResetEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetResetCount(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetResetCount(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: uInt32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetResetCount(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetTerm(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesCountResetTerm(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetTerm(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetTermCfg(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesCountResetTermCfg(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetTermCfg(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetLogicLvlBehavior(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut int32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetLogicLvlBehavior(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: int32)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetLogicLvlBehavior(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigFltrEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigFltrEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigFltrEnable(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data:
                                                                  *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth(taskHandle:
                                                                    TaskHandle,
                                                                channel:
                                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char,
                                                            data:
                                                                *mut ::std::os::raw::c_char,
                                                            bufferSize:
                                                                uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char,
                                                            data:
                                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetDigSyncEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetDigSyncEnable(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetDigSyncEnable(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesCountResetActiveEdge(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut int32)
     -> int32;
    pub fn DAQmxSetCICountEdgesCountResetActiveEdge(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesCountResetActiveEdge(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesGateEnable(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesGateEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateTerm(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICountEdgesGateTerm(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesGateTerm(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateTermCfg(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesGateTermCfg(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesGateTermCfg(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateLogicLvlBehavior(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut int32)
     -> int32;
    pub fn DAQmxSetCICountEdgesGateLogicLvlBehavior(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesGateLogicLvlBehavior(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateDigFltrEnable(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetCICountEdgesGateDigFltrEnable(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetCICountEdgesGateDigFltrEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesGateDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesGateDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCICountEdgesGateDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICountEdgesGateDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICountEdgesGateDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetCICountEdgesGateDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICountEdgesGateWhen(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCICountEdgesGateWhen(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCICountEdgesGateWhen(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut ::std::os::raw::c_char,
                                   bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIDutyCycleTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIDutyCycleTerm(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetCIDutyCycleTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetCIDutyCycleTermCfg(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCIDutyCycleLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCIDutyCycleLogicLvlBehavior(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIDutyCycleDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIDutyCycleDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIDutyCycleDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIDutyCycleDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIDutyCycleDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIDutyCycleDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIDutyCycleDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: float64) -> int32;
    pub fn DAQmxResetCIDutyCycleDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDutyCycleStartingEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetCIDutyCycleStartingEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetCIDutyCycleStartingEdge(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIAngEncoderUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCIAngEncoderUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCIAngEncoderUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: uInt32) -> int32;
    pub fn DAQmxResetCIAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIAngEncoderInitialAngle(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetCIAngEncoderInitialAngle(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetCIAngEncoderInitialAngle(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCILinEncoderUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCILinEncoderUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCILinEncoderUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCILinEncoderDistPerPulse(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetCILinEncoderDistPerPulse(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: float64) -> int32;
    pub fn DAQmxResetCILinEncoderDistPerPulse(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCILinEncoderInitialPos(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetCILinEncoderInitialPos(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: float64) -> int32;
    pub fn DAQmxResetCILinEncoderInitialPos(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderDecodingType(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderDecodingType(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetCIEncoderDecodingType(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIEncoderAInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderAInputTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderAInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCIEncoderAInputTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderAInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: int32) -> int32;
    pub fn DAQmxResetCIEncoderAInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderAInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderAInputDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderAInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetCIEncoderAInputDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIEncoderAInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderAInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderAInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: float64) -> int32;
    pub fn DAQmxResetCIEncoderAInputDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderAInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderAInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderAInputDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIEncoderBInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderBInputTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderBInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCIEncoderBInputTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderBInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: int32) -> int32;
    pub fn DAQmxResetCIEncoderBInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderBInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderBInputDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderBInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetCIEncoderBInputDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIEncoderBInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderBInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderBInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: float64) -> int32;
    pub fn DAQmxResetCIEncoderBInputDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderBInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderBInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderBInputDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIEncoderZInputTerm(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderZInputTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderZInputTermCfg(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCIEncoderZInputTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderZInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: int32) -> int32;
    pub fn DAQmxResetCIEncoderZInputLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderZInputDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderZInputDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderZInputDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetCIEncoderZInputDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIEncoderZInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIEncoderZInputDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIEncoderZInputDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: float64) -> int32;
    pub fn DAQmxResetCIEncoderZInputDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderZInputDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderZInputDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZIndexEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetCIEncoderZIndexEnable(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetCIEncoderZIndexEnable(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZIndexVal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetCIEncoderZIndexVal(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetCIEncoderZIndexVal(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIEncoderZIndexPhase(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCIEncoderZIndexPhase(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCIEncoderZIndexPhase(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseWidthUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCIPulseWidthUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseWidthTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseWidthTerm(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseWidthTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetCIPulseWidthTermCfg(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseWidthLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetCIPulseWidthLogicLvlBehavior(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseWidthDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCIPulseWidthDigFltrEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseWidthDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCIPulseWidthDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIPulseWidthDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseWidthDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseWidthDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIPulseWidthDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseWidthDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCIPulseWidthDigSyncEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseWidthStartingEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseWidthStartingEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCIPulseWidthStartingEdge(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITimestampUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCITimestampUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCITimestampUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITimestampInitialSeconds(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxSetCITimestampInitialSeconds(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: uInt32) -> int32;
    pub fn DAQmxResetCITimestampInitialSeconds(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIGPSSyncMethod(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetCIGPSSyncMethod(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxResetCIGPSSyncMethod(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIGPSSyncSrc(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIGPSSyncSrc(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetCIGPSSyncSrc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityAngEncoderUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityAngEncoderUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: int32) -> int32;
    pub fn DAQmxResetCIVelocityAngEncoderUnits(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetCIVelocityAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: uInt32) -> int32;
    pub fn DAQmxResetCIVelocityAngEncoderPulsesPerRev(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityLinEncoderUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityLinEncoderUnits(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: int32) -> int32;
    pub fn DAQmxResetCIVelocityLinEncoderUnits(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityLinEncoderDistPerPulse(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityLinEncoderDistPerPulse(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCIVelocityLinEncoderDistPerPulse(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderDecodingType(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderDecodingType(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data: int32) -> int32;
    pub fn DAQmxResetCIVelocityEncoderDecodingType(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputTerm(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputTerm(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputTerm(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputTermCfg(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputTermCfg(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: int32) -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputTermCfg(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputLogicLvlBehavior(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: *mut int32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputLogicLvlBehavior(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: int32)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputLogicLvlBehavior(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrEnable(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrEnable(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: bool32)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrEnable(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrMinPulseWidth(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char,
                                                               data:
                                                                   *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrMinPulseWidth(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char,
                                                               data: float64)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrMinPulseWidth(taskHandle:
                                                                     TaskHandle,
                                                                 channel:
                                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseSrc(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut ::std::os::raw::c_char,
                                                             bufferSize:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseSrc(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseSrc(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseRate(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data:
                                                                  *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseRate(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data: float64)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseRate(taskHandle:
                                                                    TaskHandle,
                                                                channel:
                                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputTerm(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputTerm(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputTerm(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputTermCfg(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputTermCfg(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: int32) -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputTermCfg(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputLogicLvlBehavior(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: *mut int32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputLogicLvlBehavior(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char,
                                                           data: int32)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputLogicLvlBehavior(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrEnable(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrEnable(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: bool32)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrEnable(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrMinPulseWidth(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char,
                                                               data:
                                                                   *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrMinPulseWidth(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char,
                                                               data: float64)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrMinPulseWidth(taskHandle:
                                                                     TaskHandle,
                                                                 channel:
                                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseSrc(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut ::std::os::raw::c_char,
                                                             bufferSize:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseSrc(taskHandle:
                                                                 TaskHandle,
                                                             channel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseSrc(taskHandle:
                                                                   TaskHandle,
                                                               channel:
                                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseRate(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data:
                                                                  *mut float64)
     -> int32;
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseRate(taskHandle:
                                                                  TaskHandle,
                                                              channel:
                                                                  *mut ::std::os::raw::c_char,
                                                              data: float64)
     -> int32;
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseRate(taskHandle:
                                                                    TaskHandle,
                                                                channel:
                                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityMeasTime(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetCIVelocityMeasTime(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxResetCIVelocityMeasTime(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIVelocityDiv(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIVelocityDiv(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: uInt32) -> int32;
    pub fn DAQmxResetCIVelocityDiv(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut ::std::os::raw::c_char,
                                         bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstTerm(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstTerm(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstTermCfg(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstTermCfg(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut int32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstLogicLvlBehavior(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstLogicLvlBehavior(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrEnable(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut float64)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: float64)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data:
                                                           *mut ::std::os::raw::c_char,
                                                       bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char,
                                                       data:
                                                           *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstDigSyncEnable(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstDigSyncEnable(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepFirstEdge(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepFirstEdge(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepFirstEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondTerm(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondTerm(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondTerm(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondTermCfg(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondTermCfg(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondTermCfg(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondLogicLvlBehavior(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondLogicLvlBehavior(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondLogicLvlBehavior(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: bool32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut float64)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char,
                                                          data: float64)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle:
                                                                TaskHandle,
                                                            channel:
                                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data:
                                                            *mut ::std::os::raw::c_char,
                                                        bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle,
                                                        channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data:
                                                            *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle:
                                                              TaskHandle,
                                                          channel:
                                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut float64)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle,
                                                         channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: float64)
     -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle:
                                                               TaskHandle,
                                                           channel:
                                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondDigSyncEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondDigSyncEnable(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: bool32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondDigSyncEnable(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCITwoEdgeSepSecondEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetCITwoEdgeSepSecondEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char,
                                          data: int32) -> int32;
    pub fn DAQmxResetCITwoEdgeSepSecondEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCISemiPeriodUnits(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCISemiPeriodUnits(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCISemiPeriodTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCISemiPeriodTerm(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetCISemiPeriodTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetCISemiPeriodTermCfg(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetCISemiPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetCISemiPeriodLogicLvlBehavior(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCISemiPeriodDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCISemiPeriodDigFltrEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCISemiPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCISemiPeriodDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCISemiPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCISemiPeriodDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCISemiPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCISemiPeriodDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCISemiPeriodDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCISemiPeriodDigSyncEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISemiPeriodStartingEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCISemiPeriodStartingEdge(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCISemiPeriodStartingEdge(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseFreqUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCIPulseFreqUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut ::std::os::raw::c_char,
                                   bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseFreqTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseFreqTerm(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseFreqTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetCIPulseFreqTermCfg(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCIPulseFreqLogicLvlBehavior(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseFreqDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIPulseFreqDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIPulseFreqDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseFreqDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: float64) -> int32;
    pub fn DAQmxResetCIPulseFreqDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqDigSyncEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseFreqDigSyncEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIPulseFreqDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseFreqStartEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseFreqStartEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCIPulseFreqStartEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTimeUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCIPulseTimeUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut ::std::os::raw::c_char,
                                   bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseTimeTerm(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseTimeTerm(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTimeTermCfg(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetCIPulseTimeTermCfg(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTimeLogicLvlBehavior(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCIPulseTimeLogicLvlBehavior(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseTimeDigFltrEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIPulseTimeDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseTimeDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIPulseTimeDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseTimeDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseTimeDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseTimeDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: float64) -> int32;
    pub fn DAQmxResetCIPulseTimeDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeDigSyncEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseTimeDigSyncEnable(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxResetCIPulseTimeDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTimeStartEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTimeStartEdge(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCIPulseTimeStartEdge(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCIPulseTicksTerm(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseTicksTerm(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTicksTermCfg(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetCIPulseTicksTermCfg(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTicksLogicLvlBehavior(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetCIPulseTicksLogicLvlBehavior(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseTicksDigFltrEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCIPulseTicksDigFltrEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseTicksDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCIPulseTicksDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *mut ::std::os::raw::c_char,
                                                  bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCIPulseTicksDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data:
                                                      *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCIPulseTicksDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetCIPulseTicksDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: float64) -> int32;
    pub fn DAQmxResetCIPulseTicksDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxSetCIPulseTicksDigSyncEnable(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: bool32) -> int32;
    pub fn DAQmxResetCIPulseTicksDigSyncEnable(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPulseTicksStartEdge(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetCIPulseTicksStartEdge(taskHandle: TaskHandle,
                                         channel: *mut ::std::os::raw::c_char,
                                         data: int32) -> int32;
    pub fn DAQmxResetCIPulseTicksStartEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCICtrTimebaseSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICtrTimebaseSrc(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseRate(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetCICtrTimebaseRate(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetCICtrTimebaseRate(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetCICtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetCICtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxSetCICtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: bool32) -> int32;
    pub fn DAQmxResetCICtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: float64) -> int32;
    pub fn DAQmxResetCICtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data:
                                                       *mut ::std::os::raw::c_char,
                                                   bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCICtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data:
                                                       *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCICtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCICtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCICtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxSetCICtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: bool32) -> int32;
    pub fn DAQmxResetCICtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIThreshVoltage(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetCIThreshVoltage(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetCIThreshVoltage(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCICount(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetCIOutputState(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxGetCITCReached(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut bool32) -> int32;
    pub fn DAQmxGetCICtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut uInt32) -> int32;
    pub fn DAQmxSetCICtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: uInt32) -> int32;
    pub fn DAQmxResetCICtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISampClkOverrunBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetCISampClkOverrunBehavior(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: int32) -> int32;
    pub fn DAQmxResetCISampClkOverrunBehavior(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCISampClkOverrunSentinelVal(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut int32) -> int32;
    pub fn DAQmxSetCISampClkOverrunSentinelVal(taskHandle: TaskHandle,
                                               channel:
                                                   *mut ::std::os::raw::c_char,
                                               data: int32) -> int32;
    pub fn DAQmxResetCISampClkOverrunSentinelVal(taskHandle: TaskHandle,
                                                 channel:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCIDataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetCIDataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCIDataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCIDataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetCIUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetCIUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetCIMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetCIMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCINumPossiblyInvalidSamps(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxGetCIDupCountPrevent(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetCIDupCountPrevent(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetCIDupCountPrevent(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIPrescaler(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetCIPrescaler(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: uInt32) -> int32;
    pub fn DAQmxResetCIPrescaler(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCIMaxMeasPeriod(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetCIMaxMeasPeriod(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetCIMaxMeasPeriod(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOOutputType(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut int32) -> int32;
    pub fn DAQmxGetCOPulseIdleState(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCOPulseIdleState(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCOPulseIdleState(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseTerm(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCOPulseTerm(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetCOPulseTerm(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseTimeUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCOPulseTimeUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCOPulseTimeUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseHighTime(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseHighTime(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: float64) -> int32;
    pub fn DAQmxResetCOPulseHighTime(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseLowTime(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseLowTime(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetCOPulseLowTime(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseTimeInitialDelay(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseTimeInitialDelay(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetCOPulseTimeInitialDelay(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseDutyCyc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseDutyCyc(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: float64) -> int32;
    pub fn DAQmxResetCOPulseDutyCyc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseFreqUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut int32) -> int32;
    pub fn DAQmxSetCOPulseFreqUnits(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: int32) -> int32;
    pub fn DAQmxResetCOPulseFreqUnits(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseFreq(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseFreq(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: float64) -> int32;
    pub fn DAQmxResetCOPulseFreq(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseFreqInitialDelay(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetCOPulseFreqInitialDelay(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetCOPulseFreqInitialDelay(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseHighTicks(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOPulseHighTicks(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetCOPulseHighTicks(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseLowTicks(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOPulseLowTicks(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char,
                                   data: uInt32) -> int32;
    pub fn DAQmxResetCOPulseLowTicks(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseTicksInitialDelay(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOPulseTicksInitialDelay(taskHandle: TaskHandle,
                                            channel:
                                                *mut ::std::os::raw::c_char,
                                            data: uInt32) -> int32;
    pub fn DAQmxResetCOPulseTicksInitialDelay(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseSrc(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCOCtrTimebaseSrc(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseRate(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetCOCtrTimebaseRate(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxResetCOCtrTimebaseRate(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                           channel:
                                               *mut ::std::os::raw::c_char,
                                           data: int32) -> int32;
    pub fn DAQmxResetCOCtrTimebaseActiveEdge(taskHandle: TaskHandle,
                                             channel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: bool32) -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigFltrEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: float64) -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       channel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data:
                                                       *mut ::std::os::raw::c_char,
                                                   bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data:
                                                       *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64)
     -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: float64) -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      channel:
                                                          *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                              channel:
                                                  *mut ::std::os::raw::c_char,
                                              data: bool32) -> int32;
    pub fn DAQmxResetCOCtrTimebaseDigSyncEnable(taskHandle: TaskHandle,
                                                channel:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCount(taskHandle: TaskHandle,
                           channel: *mut ::std::os::raw::c_char,
                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetCOOutputState(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut int32) -> int32;
    pub fn DAQmxGetCOAutoIncrCnt(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOAutoIncrCnt(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char,
                                 data: uInt32) -> int32;
    pub fn DAQmxResetCOAutoIncrCnt(taskHandle: TaskHandle,
                                   channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOCtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOCtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                  channel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: uInt32) -> int32;
    pub fn DAQmxResetCOCtrTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                    channel:
                                                        *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPulseDone(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut bool32) -> int32;
    pub fn DAQmxGetCOEnableInitialDelayOnRetrigger(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut bool32)
     -> int32;
    pub fn DAQmxSetCOEnableInitialDelayOnRetrigger(taskHandle: TaskHandle,
                                                   channel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: bool32) -> int32;
    pub fn DAQmxResetCOEnableInitialDelayOnRetrigger(taskHandle: TaskHandle,
                                                     channel:
                                                         *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOConstrainedGenMode(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetCOConstrainedGenMode(taskHandle: TaskHandle,
                                        channel: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetCOConstrainedGenMode(taskHandle: TaskHandle,
                                          channel:
                                              *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut bool32) -> int32;
    pub fn DAQmxSetCOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: bool32) -> int32;
    pub fn DAQmxResetCOUseOnlyOnBrdMem(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxSetCODataXferMech(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: int32) -> int32;
    pub fn DAQmxResetCODataXferMech(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut int32) -> int32;
    pub fn DAQmxSetCODataXferReqCond(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: int32) -> int32;
    pub fn DAQmxResetCODataXferReqCond(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOUsbXferReqSize(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: uInt32) -> int32;
    pub fn DAQmxResetCOUsbXferReqSize(taskHandle: TaskHandle,
                                      channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOUsbXferReqCount(taskHandle: TaskHandle,
                                     channel: *mut ::std::os::raw::c_char,
                                     data: uInt32) -> int32;
    pub fn DAQmxResetCOUsbXferReqCount(taskHandle: TaskHandle,
                                       channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetCOMemMapEnable(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: bool32) -> int32;
    pub fn DAQmxResetCOMemMapEnable(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCOPrescaler(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: *mut uInt32) -> int32;
    pub fn DAQmxSetCOPrescaler(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char,
                               data: uInt32) -> int32;
    pub fn DAQmxResetCOPrescaler(taskHandle: TaskHandle,
                                 channel: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetCORdyForNewVal(taskHandle: TaskHandle,
                                  channel: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetChanType(taskHandle: TaskHandle,
                            channel: *mut ::std::os::raw::c_char,
                            data: *mut int32) -> int32;
    pub fn DAQmxGetPhysicalChanName(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetPhysicalChanName(taskHandle: TaskHandle,
                                    channel: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetChanDescr(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *mut ::std::os::raw::c_char,
                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetChanDescr(taskHandle: TaskHandle,
                             channel: *mut ::std::os::raw::c_char,
                             data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetChanDescr(taskHandle: TaskHandle,
                               channel: *mut ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetChanIsGlobal(taskHandle: TaskHandle,
                                channel: *mut ::std::os::raw::c_char,
                                data: *mut bool32) -> int32;
    pub fn DAQmxGetDevIsSimulated(device: *mut ::std::os::raw::c_char,
                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetDevProductCategory(device: *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxGetDevProductType(device: *mut ::std::os::raw::c_char,
                                  data: *mut ::std::os::raw::c_char,
                                  bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevProductNum(device: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevSerialNum(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevAccessoryProductTypes(device:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevAccessoryProductNums(device:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut uInt32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAccessorySerialNums(device: *mut ::std::os::raw::c_char,
                                          data: *mut uInt32,
                                          arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetCarrierSerialNum(device: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevChassisModuleDevNames(device:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevAnlgTrigSupported(device: *mut ::std::os::raw::c_char,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxGetDevDigTrigSupported(device: *mut ::std::os::raw::c_char,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxGetDevAIPhysicalChans(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevAISupportedMeasTypes(device:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAIMaxSingleChanRate(device: *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxGetDevAIMaxMultiChanRate(device: *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxGetDevAIMinRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevAISimultaneousSamplingSupported(device:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut bool32)
     -> int32;
    pub fn DAQmxGetDevAISampModes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAITrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevAIVoltageRngs(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64,
                                    arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIVoltageIntExcitDiscreteVals(device:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64,
                                                    arraySizeInElements:
                                                        uInt32) -> int32;
    pub fn DAQmxGetDevAIVoltageIntExcitRangeVals(device:
                                                     *mut ::std::os::raw::c_char,
                                                 data: *mut float64,
                                                 arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAIChargeRngs(device: *mut ::std::os::raw::c_char,
                                   data: *mut float64,
                                   arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAICurrentRngs(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64,
                                    arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAICurrentIntExcitDiscreteVals(device:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut float64,
                                                    arraySizeInElements:
                                                        uInt32) -> int32;
    pub fn DAQmxGetDevAIBridgeRngs(device: *mut ::std::os::raw::c_char,
                                   data: *mut float64,
                                   arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIResistanceRngs(device: *mut ::std::os::raw::c_char,
                                       data: *mut float64,
                                       arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIFreqRngs(device: *mut ::std::os::raw::c_char,
                                 data: *mut float64,
                                 arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIGains(device: *mut ::std::os::raw::c_char,
                              data: *mut float64, arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAICouplings(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevAILowpassCutoffFreqDiscreteVals(device:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut float64,
                                                      arraySizeInElements:
                                                          uInt32) -> int32;
    pub fn DAQmxGetDevAILowpassCutoffFreqRangeVals(device:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64,
                                                   arraySizeInElements:
                                                       uInt32) -> int32;
    pub fn DAQmxGetAIDigFltrTypes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAIDigFltrLowpassCutoffFreqDiscreteVals(device:
                                                                 *mut ::std::os::raw::c_char,
                                                             data:
                                                                 *mut float64,
                                                             arraySizeInElements:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxGetDevAIDigFltrLowpassCutoffFreqRangeVals(device:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut float64,
                                                          arraySizeInElements:
                                                              uInt32)
     -> int32;
    pub fn DAQmxGetDevAOPhysicalChans(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevAOSupportedOutputTypes(device:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevAOSampClkSupported(device: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxGetDevAOSampModes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAOMaxRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevAOMinRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevAOTrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevAOVoltageRngs(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64,
                                    arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAOCurrentRngs(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64,
                                    arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevAOGains(device: *mut ::std::os::raw::c_char,
                              data: *mut float64, arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevDILines(device: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevDIPorts(device: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevDIMaxRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevDITrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevDOLines(device: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevDOPorts(device: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevDOMaxRate(device: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxGetDevDOTrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevCIPhysicalChans(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevCISupportedMeasTypes(device:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevCITrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevCISampClkSupported(device: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxGetDevCISampModes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevCIMaxSize(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevCIMaxTimebase(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxGetDevCOPhysicalChans(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevCOSupportedOutputTypes(device:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut int32,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetDevCOSampClkSupported(device: *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxGetDevCOSampModes(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32,
                                  arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetDevCOTrigUsage(device: *mut ::std::os::raw::c_char,
                                  data: *mut int32) -> int32;
    pub fn DAQmxGetDevCOMaxSize(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevCOMaxTimebase(device: *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxGetDevTEDSHWTEDSSupported(device: *mut ::std::os::raw::c_char,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxGetDevNumDMAChans(device: *mut ::std::os::raw::c_char,
                                  data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevBusType(device: *mut ::std::os::raw::c_char,
                              data: *mut int32) -> int32;
    pub fn DAQmxGetDevPCIBusNum(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevPCIDevNum(device: *mut ::std::os::raw::c_char,
                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevPXIChassisNum(device: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevPXISlotNum(device: *mut ::std::os::raw::c_char,
                                 data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevCompactDAQChassisDevName(device:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevCompactDAQSlotNum(device: *mut ::std::os::raw::c_char,
                                        data: *mut uInt32) -> int32;
    pub fn DAQmxGetDevTCPIPHostname(device: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevTCPIPEthernetIP(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevTCPIPWirelessIP(device: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDevTerminals(device: *mut ::std::os::raw::c_char,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxGetExportedAIConvClkOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedAIConvClkOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedAIConvClkOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAIConvClkPulsePolarity(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxGetExported10MHzRefClkOutputTerm(taskHandle: TaskHandle,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExported10MHzRefClkOutputTerm(taskHandle: TaskHandle,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExported10MHzRefClkOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExported20MHzTimebaseOutputTerm(taskHandle: TaskHandle,
                                                   data:
                                                       *mut ::std::os::raw::c_char,
                                                   bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExported20MHzTimebaseOutputTerm(taskHandle: TaskHandle,
                                                   data:
                                                       *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExported20MHzTimebaseOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkOutputBehavior(taskHandle: TaskHandle,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetExportedSampClkOutputBehavior(taskHandle: TaskHandle,
                                                 data: int32) -> int32;
    pub fn DAQmxResetExportedSampClkOutputBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedSampClkOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedSampClkOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkDelayOffset(taskHandle: TaskHandle,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetExportedSampClkDelayOffset(taskHandle: TaskHandle,
                                              data: float64) -> int32;
    pub fn DAQmxResetExportedSampClkDelayOffset(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkPulsePolarity(taskHandle: TaskHandle,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetExportedSampClkPulsePolarity(taskHandle: TaskHandle,
                                                data: int32) -> int32;
    pub fn DAQmxResetExportedSampClkPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSampClkTimebaseOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedSampClkTimebaseOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedSampClkTimebaseOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedDividedSampClkTimebaseOutputTerm(taskHandle:
                                                                TaskHandle,
                                                            data:
                                                                *mut ::std::os::raw::c_char,
                                                            bufferSize:
                                                                uInt32)
     -> int32;
    pub fn DAQmxSetExportedDividedSampClkTimebaseOutputTerm(taskHandle:
                                                                TaskHandle,
                                                            data:
                                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedDividedSampClkTimebaseOutputTerm(taskHandle:
                                                                  TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvTrigOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedAdvTrigOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedAdvTrigOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvTrigPulsePolarity(taskHandle: TaskHandle,
                                                data: *mut int32) -> int32;
    pub fn DAQmxGetExportedAdvTrigPulseWidthUnits(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetExportedAdvTrigPulseWidthUnits(taskHandle: TaskHandle,
                                                  data: int32) -> int32;
    pub fn DAQmxResetExportedAdvTrigPulseWidthUnits(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvTrigPulseWidth(taskHandle: TaskHandle,
                                             data: *mut float64) -> int32;
    pub fn DAQmxSetExportedAdvTrigPulseWidth(taskHandle: TaskHandle,
                                             data: float64) -> int32;
    pub fn DAQmxResetExportedAdvTrigPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedPauseTrigOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedPauseTrigOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedPauseTrigOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle,
                                                 data: *mut int32) -> int32;
    pub fn DAQmxSetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle,
                                                 data: int32) -> int32;
    pub fn DAQmxResetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRefTrigOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedRefTrigOutputTerm(taskHandle: TaskHandle,
                                             data:
                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedRefTrigOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRefTrigPulsePolarity(taskHandle: TaskHandle,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetExportedRefTrigPulsePolarity(taskHandle: TaskHandle,
                                                data: int32) -> int32;
    pub fn DAQmxResetExportedRefTrigPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedStartTrigOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedStartTrigOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedStartTrigOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedStartTrigPulsePolarity(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetExportedStartTrigPulsePolarity(taskHandle: TaskHandle,
                                                  data: int32) -> int32;
    pub fn DAQmxResetExportedStartTrigPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvCmpltEventOutputTerm(taskHandle: TaskHandle,
                                                   data:
                                                       *mut ::std::os::raw::c_char,
                                                   bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedAdvCmpltEventOutputTerm(taskHandle: TaskHandle,
                                                   data:
                                                       *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedAdvCmpltEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvCmpltEventDelay(taskHandle: TaskHandle,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetExportedAdvCmpltEventDelay(taskHandle: TaskHandle,
                                              data: float64) -> int32;
    pub fn DAQmxResetExportedAdvCmpltEventDelay(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvCmpltEventPulsePolarity(taskHandle: TaskHandle,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedAdvCmpltEventPulsePolarity(taskHandle: TaskHandle,
                                                      data: int32) -> int32;
    pub fn DAQmxResetExportedAdvCmpltEventPulsePolarity(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAdvCmpltEventPulseWidth(taskHandle: TaskHandle,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxSetExportedAdvCmpltEventPulseWidth(taskHandle: TaskHandle,
                                                   data: float64) -> int32;
    pub fn DAQmxResetExportedAdvCmpltEventPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAIHoldCmpltEventOutputTerm(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedAIHoldCmpltEventOutputTerm(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedAIHoldCmpltEventOutputTerm(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedAIHoldCmpltEventPulsePolarity(taskHandle:
                                                             TaskHandle,
                                                         data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedAIHoldCmpltEventPulsePolarity(taskHandle:
                                                             TaskHandle,
                                                         data: int32)
     -> int32;
    pub fn DAQmxResetExportedAIHoldCmpltEventPulsePolarity(taskHandle:
                                                               TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedChangeDetectEventOutputTerm(taskHandle: TaskHandle,
                                                       data:
                                                           *mut ::std::os::raw::c_char,
                                                       bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedChangeDetectEventOutputTerm(taskHandle: TaskHandle,
                                                       data:
                                                           *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedChangeDetectEventOutputTerm(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedChangeDetectEventPulsePolarity(taskHandle:
                                                              TaskHandle,
                                                          data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedChangeDetectEventPulsePolarity(taskHandle:
                                                              TaskHandle,
                                                          data: int32)
     -> int32;
    pub fn DAQmxResetExportedChangeDetectEventPulsePolarity(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedCtrOutEventOutputTerm(taskHandle: TaskHandle,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedCtrOutEventOutputTerm(taskHandle: TaskHandle,
                                                 data:
                                                     *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedCtrOutEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedCtrOutEventOutputBehavior(taskHandle: TaskHandle,
                                                     data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedCtrOutEventOutputBehavior(taskHandle: TaskHandle,
                                                     data: int32) -> int32;
    pub fn DAQmxResetExportedCtrOutEventOutputBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedCtrOutEventPulsePolarity(taskHandle: TaskHandle,
                                                    data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedCtrOutEventPulsePolarity(taskHandle: TaskHandle,
                                                    data: int32) -> int32;
    pub fn DAQmxResetExportedCtrOutEventPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedCtrOutEventToggleIdleState(taskHandle: TaskHandle,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedCtrOutEventToggleIdleState(taskHandle: TaskHandle,
                                                      data: int32) -> int32;
    pub fn DAQmxResetExportedCtrOutEventToggleIdleState(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetExportedHshkEventOutputTerm(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedHshkEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventOutputBehavior(taskHandle: TaskHandle,
                                                   data: *mut int32) -> int32;
    pub fn DAQmxSetExportedHshkEventOutputBehavior(taskHandle: TaskHandle,
                                                   data: int32) -> int32;
    pub fn DAQmxResetExportedHshkEventOutputBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventDelay(taskHandle: TaskHandle,
                                          data: *mut float64) -> int32;
    pub fn DAQmxSetExportedHshkEventDelay(taskHandle: TaskHandle,
                                          data: float64) -> int32;
    pub fn DAQmxResetExportedHshkEventDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetExportedHshkEventInterlockedAssertedLvl(taskHandle:
                                                               TaskHandle,
                                                           data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedHshkEventInterlockedAssertedLvl(taskHandle:
                                                               TaskHandle,
                                                           data: int32)
     -> int32;
    pub fn DAQmxResetExportedHshkEventInterlockedAssertedLvl(taskHandle:
                                                                 TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventInterlockedAssertOnStart(taskHandle:
                                                                 TaskHandle,
                                                             data:
                                                                 *mut bool32)
     -> int32;
    pub fn DAQmxSetExportedHshkEventInterlockedAssertOnStart(taskHandle:
                                                                 TaskHandle,
                                                             data: bool32)
     -> int32;
    pub fn DAQmxResetExportedHshkEventInterlockedAssertOnStart(taskHandle:
                                                                   TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventInterlockedDeassertDelay(taskHandle:
                                                                 TaskHandle,
                                                             data:
                                                                 *mut float64)
     -> int32;
    pub fn DAQmxSetExportedHshkEventInterlockedDeassertDelay(taskHandle:
                                                                 TaskHandle,
                                                             data: float64)
     -> int32;
    pub fn DAQmxResetExportedHshkEventInterlockedDeassertDelay(taskHandle:
                                                                   TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventPulsePolarity(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetExportedHshkEventPulsePolarity(taskHandle: TaskHandle,
                                                  data: int32) -> int32;
    pub fn DAQmxResetExportedHshkEventPulsePolarity(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedHshkEventPulseWidth(taskHandle: TaskHandle,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetExportedHshkEventPulseWidth(taskHandle: TaskHandle,
                                               data: float64) -> int32;
    pub fn DAQmxResetExportedHshkEventPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForXferEventOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedRdyForXferEventOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedRdyForXferEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForXferEventLvlActiveLvl(taskHandle: TaskHandle,
                                                       data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedRdyForXferEventLvlActiveLvl(taskHandle: TaskHandle,
                                                       data: int32) -> int32;
    pub fn DAQmxResetExportedRdyForXferEventLvlActiveLvl(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForXferEventDeassertCond(taskHandle: TaskHandle,
                                                       data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedRdyForXferEventDeassertCond(taskHandle: TaskHandle,
                                                       data: int32) -> int32;
    pub fn DAQmxResetExportedRdyForXferEventDeassertCond(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle:
                                                                          TaskHandle,
                                                                      data:
                                                                          *mut uInt32)
     -> int32;
    pub fn DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle:
                                                                          TaskHandle,
                                                                      data:
                                                                          uInt32)
     -> int32;
    pub fn DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle:
                                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedDataActiveEventOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedDataActiveEventOutputTerm(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedDataActiveEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedDataActiveEventLvlActiveLvl(taskHandle: TaskHandle,
                                                       data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedDataActiveEventLvlActiveLvl(taskHandle: TaskHandle,
                                                       data: int32) -> int32;
    pub fn DAQmxResetExportedDataActiveEventLvlActiveLvl(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForStartEventOutputTerm(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedRdyForStartEventOutputTerm(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedRdyForStartEventOutputTerm(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedRdyForStartEventLvlActiveLvl(taskHandle:
                                                            TaskHandle,
                                                        data: *mut int32)
     -> int32;
    pub fn DAQmxSetExportedRdyForStartEventLvlActiveLvl(taskHandle:
                                                            TaskHandle,
                                                        data: int32) -> int32;
    pub fn DAQmxResetExportedRdyForStartEventLvlActiveLvl(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedSyncPulseEventOutputTerm(taskHandle: TaskHandle,
                                                    data:
                                                        *mut ::std::os::raw::c_char,
                                                    bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedSyncPulseEventOutputTerm(taskHandle: TaskHandle,
                                                    data:
                                                        *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedSyncPulseEventOutputTerm(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetExportedWatchdogExpiredEventOutputTerm(taskHandle:
                                                              TaskHandle,
                                                          data:
                                                              *mut ::std::os::raw::c_char,
                                                          bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetExportedWatchdogExpiredEventOutputTerm(taskHandle:
                                                              TaskHandle,
                                                          data:
                                                              *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetExportedWatchdogExpiredEventOutputTerm(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetPersistedChanAuthor(channel: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPersistedChanAllowInteractiveEditing(channel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedChanAllowInteractiveDeletion(channel:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedScaleAuthor(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPersistedScaleAllowInteractiveEditing(scaleName:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedScaleAllowInteractiveDeletion(scaleName:
                                                              *mut ::std::os::raw::c_char,
                                                          data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedTaskAuthor(taskName: *mut ::std::os::raw::c_char,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPersistedTaskAllowInteractiveEditing(taskName:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPersistedTaskAllowInteractiveDeletion(taskName:
                                                             *mut ::std::os::raw::c_char,
                                                         data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPhysicalChanAISupportedMeasTypes(physicalChannel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut int32,
                                                    arraySizeInElements:
                                                        uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanAITermCfgs(physicalChannel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxGetPhysicalChanAIInputSrcs(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut ::std::os::raw::c_char,
                                           bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanAOSupportedOutputTypes(physicalChannel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut int32,
                                                      arraySizeInElements:
                                                          uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanAOSupportedPowerUpOutputTypes(physicalChannel:
                                                                 *mut ::std::os::raw::c_char,
                                                             data: *mut int32,
                                                             arraySizeInElements:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxGetPhysicalChanAOTermCfgs(physicalChannel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut int32) -> int32;
    pub fn DAQmxGetPhysicalChanAOManualControlEnable(physicalChannel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: *mut bool32)
     -> int32;
    pub fn DAQmxSetPhysicalChanAOManualControlEnable(physicalChannel:
                                                         *mut ::std::os::raw::c_char,
                                                     data: bool32) -> int32;
    pub fn DAQmxResetPhysicalChanAOManualControlEnable(physicalChannel:
                                                           *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetPhysicalChanAOManualControlShortDetected(physicalChannel:
                                                                *mut ::std::os::raw::c_char,
                                                            data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPhysicalChanAOManualControlAmplitude(physicalChannel:
                                                            *mut ::std::os::raw::c_char,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxGetPhysicalChanAOManualControlFreq(physicalChannel:
                                                       *mut ::std::os::raw::c_char,
                                                   data: *mut float64)
     -> int32;
    pub fn DAQmxGetAOPowerAmpChannelEnable(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut bool32) -> int32;
    pub fn DAQmxSetAOPowerAmpChannelEnable(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: bool32) -> int32;
    pub fn DAQmxResetAOPowerAmpChannelEnable(physicalChannel:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAOPowerAmpScalingCoeff(physicalChannel:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64,
                                          arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetAOPowerAmpOvercurrent(physicalChannel:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxGetAOPowerAmpGain(physicalChannel:
                                      *mut ::std::os::raw::c_char,
                                  data: *mut float64) -> int32;
    pub fn DAQmxGetAOPowerAmpOffset(physicalChannel:
                                        *mut ::std::os::raw::c_char,
                                    data: *mut float64) -> int32;
    pub fn DAQmxGetPhysicalChanDIPortWidth(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanDISampClkSupported(physicalChannel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetPhysicalChanDISampModes(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetPhysicalChanDIChangeDetectSupported(physicalChannel:
                                                           *mut ::std::os::raw::c_char,
                                                       data: *mut bool32)
     -> int32;
    pub fn DAQmxGetPhysicalChanDOPortWidth(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanDOSampClkSupported(physicalChannel:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetPhysicalChanDOSampModes(physicalChannel:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut int32,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetPhysicalChanCISupportedMeasTypes(physicalChannel:
                                                        *mut ::std::os::raw::c_char,
                                                    data: *mut int32,
                                                    arraySizeInElements:
                                                        uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanCOSupportedOutputTypes(physicalChannel:
                                                          *mut ::std::os::raw::c_char,
                                                      data: *mut int32,
                                                      arraySizeInElements:
                                                          uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSMfgID(physicalChannel:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSModelNum(physicalChannel:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSSerialNum(physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSVersionNum(physicalChannel:
                                                  *mut ::std::os::raw::c_char,
                                              data: *mut uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSVersionLetter(physicalChannel:
                                                     *mut ::std::os::raw::c_char,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetPhysicalChanTEDSBitStream(physicalChannel:
                                                 *mut ::std::os::raw::c_char,
                                             data: *mut uInt8,
                                             arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetPhysicalChanTEDSTemplateIDs(physicalChannel:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut uInt32,
                                               arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetReadRelativeTo(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetReadRelativeTo(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetReadRelativeTo(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadOffset(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetReadOffset(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetReadOffset(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadChannelsToRead(taskHandle: TaskHandle,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetReadChannelsToRead(taskHandle: TaskHandle,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetReadChannelsToRead(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadReadAllAvailSamp(taskHandle: TaskHandle,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxSetReadReadAllAvailSamp(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetReadReadAllAvailSamp(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadAutoStart(taskHandle: TaskHandle, data: *mut bool32)
     -> int32;
    pub fn DAQmxSetReadAutoStart(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetReadAutoStart(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadOverWrite(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetReadOverWrite(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetReadOverWrite(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingFilePath(taskHandle: TaskHandle,
                                   data: *mut ::std::os::raw::c_char,
                                   bufferSize: uInt32) -> int32;
    pub fn DAQmxSetLoggingFilePath(taskHandle: TaskHandle,
                                   data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetLoggingFilePath(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetLoggingMode(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetLoggingMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingTDMSGroupName(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetLoggingTDMSGroupName(taskHandle: TaskHandle,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetLoggingTDMSGroupName(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingTDMSOperation(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetLoggingTDMSOperation(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetLoggingTDMSOperation(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingPause(taskHandle: TaskHandle, data: *mut bool32)
     -> int32;
    pub fn DAQmxSetLoggingPause(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetLoggingPause(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingSampsPerFile(taskHandle: TaskHandle,
                                       data: *mut uInt64) -> int32;
    pub fn DAQmxSetLoggingSampsPerFile(taskHandle: TaskHandle, data: uInt64)
     -> int32;
    pub fn DAQmxResetLoggingSampsPerFile(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingFileWriteSize(taskHandle: TaskHandle,
                                        data: *mut uInt32) -> int32;
    pub fn DAQmxSetLoggingFileWriteSize(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetLoggingFileWriteSize(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetLoggingFilePreallocationSize(taskHandle: TaskHandle,
                                                data: *mut uInt64) -> int32;
    pub fn DAQmxSetLoggingFilePreallocationSize(taskHandle: TaskHandle,
                                                data: uInt64) -> int32;
    pub fn DAQmxResetLoggingFilePreallocationSize(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetReadCurrReadPos(taskHandle: TaskHandle, data: *mut uInt64)
     -> int32;
    pub fn DAQmxGetReadAvailSampPerChan(taskHandle: TaskHandle,
                                        data: *mut uInt32) -> int32;
    pub fn DAQmxGetReadTotalSampPerChanAcquired(taskHandle: TaskHandle,
                                                data: *mut uInt64) -> int32;
    pub fn DAQmxGetReadCommonModeRangeErrorChansExist(taskHandle: TaskHandle,
                                                      data: *mut bool32)
     -> int32;
    pub fn DAQmxGetReadCommonModeRangeErrorChans(taskHandle: TaskHandle,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadExcitFaultChansExist(taskHandle: TaskHandle,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxGetReadExcitFaultChans(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOvercurrentChansExist(taskHandle: TaskHandle,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOvercurrentChans(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOvertemperatureChansExist(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOvertemperatureChans(taskHandle: TaskHandle,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOpenChansExist(taskHandle: TaskHandle,
                                      data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOpenChans(taskHandle: TaskHandle,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOpenChansDetails(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOpenCurrentLoopChansExist(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOpenCurrentLoopChans(taskHandle: TaskHandle,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOpenThrmcplChansExist(taskHandle: TaskHandle,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOpenThrmcplChans(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadOverloadedChansExist(taskHandle: TaskHandle,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxGetReadOverloadedChans(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetReadAccessoryInsertionOrRemovalDetected(taskHandle:
                                                               TaskHandle,
                                                           data: *mut bool32)
     -> int32;
    pub fn DAQmxGetReadDevsWithInsertedOrRemovedAccessories(taskHandle:
                                                                TaskHandle,
                                                            data:
                                                                *mut ::std::os::raw::c_char,
                                                            bufferSize:
                                                                uInt32)
     -> int32;
    pub fn DAQmxGetReadChangeDetectHasOverflowed(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxGetReadRawDataWidth(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetReadNumChans(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetReadDigitalLinesBytesPerChan(taskHandle: TaskHandle,
                                                data: *mut uInt32) -> int32;
    pub fn DAQmxGetReadWaitMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetReadWaitMode(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetReadWaitMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetReadSleepTime(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetReadSleepTime(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetReadSleepTime(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRealTimeConvLateErrorsToWarnings(taskHandle: TaskHandle,
                                                    data: *mut bool32)
     -> int32;
    pub fn DAQmxSetRealTimeConvLateErrorsToWarnings(taskHandle: TaskHandle,
                                                    data: bool32) -> int32;
    pub fn DAQmxResetRealTimeConvLateErrorsToWarnings(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetRealTimeNumOfWarmupIters(taskHandle: TaskHandle,
                                            data: *mut uInt32) -> int32;
    pub fn DAQmxSetRealTimeNumOfWarmupIters(taskHandle: TaskHandle,
                                            data: uInt32) -> int32;
    pub fn DAQmxResetRealTimeNumOfWarmupIters(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetRealTimeWaitForNextSampClkWaitMode(taskHandle: TaskHandle,
                                                      data: *mut int32)
     -> int32;
    pub fn DAQmxSetRealTimeWaitForNextSampClkWaitMode(taskHandle: TaskHandle,
                                                      data: int32) -> int32;
    pub fn DAQmxResetRealTimeWaitForNextSampClkWaitMode(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetRealTimeReportMissedSamp(taskHandle: TaskHandle,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetRealTimeReportMissedSamp(taskHandle: TaskHandle,
                                            data: bool32) -> int32;
    pub fn DAQmxResetRealTimeReportMissedSamp(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetRealTimeWriteRecoveryMode(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetRealTimeWriteRecoveryMode(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetRealTimeWriteRecoveryMode(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetScaleDescr(scaleName: *mut ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetScaleDescr(scaleName: *mut ::std::os::raw::c_char,
                              data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxGetScaleScaledUnits(scaleName: *mut ::std::os::raw::c_char,
                                    data: *mut ::std::os::raw::c_char,
                                    bufferSize: uInt32) -> int32;
    pub fn DAQmxSetScaleScaledUnits(scaleName: *mut ::std::os::raw::c_char,
                                    data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetScalePreScaledUnits(scaleName: *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetScalePreScaledUnits(scaleName: *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxGetScaleType(scaleName: *mut ::std::os::raw::c_char,
                             data: *mut int32) -> int32;
    pub fn DAQmxGetScaleLinSlope(scaleName: *mut ::std::os::raw::c_char,
                                 data: *mut float64) -> int32;
    pub fn DAQmxSetScaleLinSlope(scaleName: *mut ::std::os::raw::c_char,
                                 data: float64) -> int32;
    pub fn DAQmxGetScaleLinYIntercept(scaleName: *mut ::std::os::raw::c_char,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetScaleLinYIntercept(scaleName: *mut ::std::os::raw::c_char,
                                      data: float64) -> int32;
    pub fn DAQmxGetScaleMapScaledMax(scaleName: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetScaleMapScaledMax(scaleName: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxGetScaleMapPreScaledMax(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetScaleMapPreScaledMax(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxGetScaleMapScaledMin(scaleName: *mut ::std::os::raw::c_char,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetScaleMapScaledMin(scaleName: *mut ::std::os::raw::c_char,
                                     data: float64) -> int32;
    pub fn DAQmxGetScaleMapPreScaledMin(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetScaleMapPreScaledMin(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxGetScalePolyForwardCoeff(scaleName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetScalePolyForwardCoeff(scaleName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetScalePolyReverseCoeff(scaleName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetScalePolyReverseCoeff(scaleName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64,
                                         arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetScaleTableScaledVals(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64,
                                        arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxSetScaleTableScaledVals(scaleName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64,
                                        arraySizeInElements: uInt32) -> int32;
    pub fn DAQmxGetScaleTablePreScaledVals(scaleName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxSetScaleTablePreScaledVals(scaleName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64,
                                           arraySizeInElements: uInt32)
     -> int32;
    pub fn DAQmxGetSwitchChanUsage(switchChannelName:
                                       *mut ::std::os::raw::c_char,
                                   data: *mut int32) -> int32;
    pub fn DAQmxSetSwitchChanUsage(switchChannelName:
                                       *mut ::std::os::raw::c_char,
                                   data: int32) -> int32;
    pub fn DAQmxGetSwitchChanAnlgBusSharingEnable(switchChannelName:
                                                      *mut ::std::os::raw::c_char,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetSwitchChanAnlgBusSharingEnable(switchChannelName:
                                                      *mut ::std::os::raw::c_char,
                                                  data: bool32) -> int32;
    pub fn DAQmxGetSwitchChanMaxACCarryCurrent(switchChannelName:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxACSwitchCurrent(switchChannelName:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxACCarryPwr(switchChannelName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxACSwitchPwr(switchChannelName:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCCarryCurrent(switchChannelName:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCSwitchCurrent(switchChannelName:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCCarryPwr(switchChannelName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCSwitchPwr(switchChannelName:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxACVoltage(switchChannelName:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanMaxDCVoltage(switchChannelName:
                                              *mut ::std::os::raw::c_char,
                                          data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanWireMode(switchChannelName:
                                          *mut ::std::os::raw::c_char,
                                      data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchChanBandwidth(switchChannelName:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchChanImpedance(switchChannelName:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchDevSettlingTime(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetSwitchDevSettlingTime(deviceName:
                                             *mut ::std::os::raw::c_char,
                                         data: float64) -> int32;
    pub fn DAQmxGetSwitchDevAutoConnAnlgBus(deviceName:
                                                *mut ::std::os::raw::c_char,
                                            data: *mut bool32) -> int32;
    pub fn DAQmxSetSwitchDevAutoConnAnlgBus(deviceName:
                                                *mut ::std::os::raw::c_char,
                                            data: bool32) -> int32;
    pub fn DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling(deviceName:
                                                                *mut ::std::os::raw::c_char,
                                                            data: *mut bool32)
     -> int32;
    pub fn DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling(deviceName:
                                                                *mut ::std::os::raw::c_char,
                                                            data: bool32)
     -> int32;
    pub fn DAQmxGetSwitchDevSettled(deviceName: *mut ::std::os::raw::c_char,
                                    data: *mut bool32) -> int32;
    pub fn DAQmxGetSwitchDevRelayList(deviceName: *mut ::std::os::raw::c_char,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSwitchDevNumRelays(deviceName: *mut ::std::os::raw::c_char,
                                      data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchDevSwitchChanList(deviceName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut ::std::os::raw::c_char,
                                           bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSwitchDevNumSwitchChans(deviceName:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchDevNumRows(deviceName: *mut ::std::os::raw::c_char,
                                    data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchDevNumColumns(deviceName:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut uInt32) -> int32;
    pub fn DAQmxGetSwitchDevTopology(deviceName: *mut ::std::os::raw::c_char,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSwitchDevTemperature(deviceName:
                                            *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxGetSwitchScanBreakMode(taskHandle: TaskHandle,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetSwitchScanBreakMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSwitchScanBreakMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSwitchScanRepeatMode(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetSwitchScanRepeatMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSwitchScanRepeatMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSwitchScanWaitingForAdv(taskHandle: TaskHandle,
                                           data: *mut bool32) -> int32;
    pub fn DAQmxGetSysGlobalChans(data: *mut ::std::os::raw::c_char,
                                  bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSysScales(data: *mut ::std::os::raw::c_char,
                             bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSysTasks(data: *mut ::std::os::raw::c_char,
                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSysDevNames(data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSysNIDAQMajorVersion(data: *mut uInt32) -> int32;
    pub fn DAQmxGetSysNIDAQMinorVersion(data: *mut uInt32) -> int32;
    pub fn DAQmxGetSysNIDAQUpdateVersion(data: *mut uInt32) -> int32;
    pub fn DAQmxGetTaskName(taskHandle: TaskHandle,
                            data: *mut ::std::os::raw::c_char,
                            bufferSize: uInt32) -> int32;
    pub fn DAQmxGetTaskChannels(taskHandle: TaskHandle,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxGetTaskNumChans(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetTaskDevices(taskHandle: TaskHandle,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetTaskNumDevices(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetTaskComplete(taskHandle: TaskHandle, data: *mut bool32)
     -> int32;
    pub fn DAQmxGetSampQuantSampMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetSampQuantSampMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSampQuantSampMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampQuantSampPerChan(taskHandle: TaskHandle,
                                        data: *mut uInt64) -> int32;
    pub fn DAQmxSetSampQuantSampPerChan(taskHandle: TaskHandle, data: uInt64)
     -> int32;
    pub fn DAQmxResetSampQuantSampPerChan(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampTimingType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetSampTimingType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSampTimingType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetSampClkRate(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetSampClkRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkMaxRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxGetSampClkSrc(taskHandle: TaskHandle,
                              data: *mut ::std::os::raw::c_char,
                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetSampClkSrc(taskHandle: TaskHandle,
                              data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetSampClkSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkActiveEdge(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetSampClkActiveEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSampClkActiveEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkOverrunBehavior(taskHandle: TaskHandle,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetSampClkOverrunBehavior(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetSampClkOverrunBehavior(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkUnderflowBehavior(taskHandle: TaskHandle,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetSampClkUnderflowBehavior(taskHandle: TaskHandle,
                                            data: int32) -> int32;
    pub fn DAQmxResetSampClkUnderflowBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkTimebaseDiv(taskHandle: TaskHandle,
                                      data: *mut uInt32) -> int32;
    pub fn DAQmxSetSampClkTimebaseDiv(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetSampClkTimebaseDiv(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkTerm(taskHandle: TaskHandle,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSampClkTimebaseRate(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetSampClkTimebaseRate(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetSampClkTimebaseRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkTimebaseSrc(taskHandle: TaskHandle,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetSampClkTimebaseSrc(taskHandle: TaskHandle,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetSampClkTimebaseSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkTimebaseActiveEdge(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetSampClkTimebaseActiveEdge(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetSampClkTimebaseActiveEdge(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                    data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetSampClkTimebaseMasterTimebaseDiv(taskHandle: TaskHandle,
                                                    data: uInt32) -> int32;
    pub fn DAQmxResetSampClkTimebaseMasterTimebaseDiv(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkTimebaseTerm(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSampClkDigFltrEnable(taskHandle: TaskHandle,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxSetSampClkDigFltrEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetSampClkDigFltrEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                               data: float64) -> int32;
    pub fn DAQmxResetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetSampClkDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                             data:
                                                 *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetSampClkDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle,
                                              data: float64) -> int32;
    pub fn DAQmxResetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSampClkDigSyncEnable(taskHandle: TaskHandle,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxSetSampClkDigSyncEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetSampClkDigSyncEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampClkWriteWfmUseInitialWfmDT(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetSampClkWriteWfmUseInitialWfmDT(taskHandle: TaskHandle,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetSampClkWriteWfmUseInitialWfmDT(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetHshkDelayAfterXfer(taskHandle: TaskHandle,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetHshkDelayAfterXfer(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetHshkDelayAfterXfer(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetHshkStartCond(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetHshkStartCond(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetHshkStartCond(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetHshkSampleInputDataWhen(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetHshkSampleInputDataWhen(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetHshkSampleInputDataWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetChangeDetectDIRisingEdgePhysicalChans(taskHandle:
                                                             TaskHandle,
                                                         data:
                                                             *mut ::std::os::raw::c_char,
                                                         bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetChangeDetectDIRisingEdgePhysicalChans(taskHandle:
                                                             TaskHandle,
                                                         data:
                                                             *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetChangeDetectDIRisingEdgePhysicalChans(taskHandle:
                                                               TaskHandle)
     -> int32;
    pub fn DAQmxGetChangeDetectDIFallingEdgePhysicalChans(taskHandle:
                                                              TaskHandle,
                                                          data:
                                                              *mut ::std::os::raw::c_char,
                                                          bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetChangeDetectDIFallingEdgePhysicalChans(taskHandle:
                                                              TaskHandle,
                                                          data:
                                                              *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetChangeDetectDIFallingEdgePhysicalChans(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetChangeDetectDITristate(taskHandle: TaskHandle,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetChangeDetectDITristate(taskHandle: TaskHandle,
                                          data: bool32) -> int32;
    pub fn DAQmxResetChangeDetectDITristate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetImplicitUnderflowBehavior(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetImplicitUnderflowBehavior(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetImplicitUnderflowBehavior(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAIConvRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetAIConvRate(taskHandle: TaskHandle, data: float64) -> int32;
    pub fn DAQmxResetAIConvRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvRateEx(taskHandle: TaskHandle,
                                deviceNames: *mut ::std::os::raw::c_char,
                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvRateEx(taskHandle: TaskHandle,
                                deviceNames: *mut ::std::os::raw::c_char,
                                data: float64) -> int32;
    pub fn DAQmxResetAIConvRateEx(taskHandle: TaskHandle,
                                  deviceNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvMaxRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxGetAIConvMaxRateEx(taskHandle: TaskHandle,
                                   deviceNames: *mut ::std::os::raw::c_char,
                                   data: *mut float64) -> int32;
    pub fn DAQmxGetAIConvSrc(taskHandle: TaskHandle,
                             data: *mut ::std::os::raw::c_char,
                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIConvSrc(taskHandle: TaskHandle,
                             data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetAIConvSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvSrcEx(taskHandle: TaskHandle,
                               deviceNames: *mut ::std::os::raw::c_char,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIConvSrcEx(taskHandle: TaskHandle,
                               deviceNames: *mut ::std::os::raw::c_char,
                               data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetAIConvSrcEx(taskHandle: TaskHandle,
                                 deviceNames: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvActiveEdge(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIConvActiveEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAIConvActiveEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvActiveEdgeEx(taskHandle: TaskHandle,
                                      deviceNames:
                                          *mut ::std::os::raw::c_char,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAIConvActiveEdgeEx(taskHandle: TaskHandle,
                                      deviceNames:
                                          *mut ::std::os::raw::c_char,
                                      data: int32) -> int32;
    pub fn DAQmxResetAIConvActiveEdgeEx(taskHandle: TaskHandle,
                                        deviceNames:
                                            *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvTimebaseDiv(taskHandle: TaskHandle,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIConvTimebaseDiv(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetAIConvTimebaseDiv(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvTimebaseDivEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut uInt32) -> int32;
    pub fn DAQmxSetAIConvTimebaseDivEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       data: uInt32) -> int32;
    pub fn DAQmxResetAIConvTimebaseDivEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvTimebaseSrc(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetAIConvTimebaseSrc(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAIConvTimebaseSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvTimebaseSrcEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetAIConvTimebaseSrcEx(taskHandle: TaskHandle,
                                       deviceNames:
                                           *mut ::std::os::raw::c_char,
                                       data: int32) -> int32;
    pub fn DAQmxResetAIConvTimebaseSrcEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDelayFromSampClkDelayUnits(taskHandle: TaskHandle,
                                              data: *mut int32) -> int32;
    pub fn DAQmxSetDelayFromSampClkDelayUnits(taskHandle: TaskHandle,
                                              data: int32) -> int32;
    pub fn DAQmxResetDelayFromSampClkDelayUnits(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDelayFromSampClkDelayUnitsEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetDelayFromSampClkDelayUnitsEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char,
                                                data: int32) -> int32;
    pub fn DAQmxResetDelayFromSampClkDelayUnitsEx(taskHandle: TaskHandle,
                                                  deviceNames:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetDelayFromSampClkDelay(taskHandle: TaskHandle,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetDelayFromSampClkDelay(taskHandle: TaskHandle,
                                         data: float64) -> int32;
    pub fn DAQmxResetDelayFromSampClkDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDelayFromSampClkDelayEx(taskHandle: TaskHandle,
                                           deviceNames:
                                               *mut ::std::os::raw::c_char,
                                           data: *mut float64) -> int32;
    pub fn DAQmxSetDelayFromSampClkDelayEx(taskHandle: TaskHandle,
                                           deviceNames:
                                               *mut ::std::os::raw::c_char,
                                           data: float64) -> int32;
    pub fn DAQmxResetDelayFromSampClkDelayEx(taskHandle: TaskHandle,
                                             deviceNames:
                                                 *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrEnable(taskHandle: TaskHandle,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIConvDigFltrEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetAIConvDigFltrEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvDigFltrEnableEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetAIConvDigFltrEnableEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetAIConvDigFltrEnableEx(taskHandle: TaskHandle,
                                           deviceNames:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                              data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                              data: float64) -> int32;
    pub fn DAQmxResetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrMinPulseWidthEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char,
                                                data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvDigFltrMinPulseWidthEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char,
                                                data: float64) -> int32;
    pub fn DAQmxResetAIConvDigFltrMinPulseWidthEx(taskHandle: TaskHandle,
                                                  deviceNames:
                                                      *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIConvDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                            data:
                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAIConvDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrTimebaseSrcEx(taskHandle: TaskHandle,
                                              deviceNames:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAIConvDigFltrTimebaseSrcEx(taskHandle: TaskHandle,
                                              deviceNames:
                                                  *mut ::std::os::raw::c_char,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAIConvDigFltrTimebaseSrcEx(taskHandle: TaskHandle,
                                                deviceNames:
                                                    *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle,
                                             data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle,
                                             data: float64) -> int32;
    pub fn DAQmxResetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAIConvDigFltrTimebaseRateEx(taskHandle: TaskHandle,
                                               deviceNames:
                                                   *mut ::std::os::raw::c_char,
                                               data: *mut float64) -> int32;
    pub fn DAQmxSetAIConvDigFltrTimebaseRateEx(taskHandle: TaskHandle,
                                               deviceNames:
                                                   *mut ::std::os::raw::c_char,
                                               data: float64) -> int32;
    pub fn DAQmxResetAIConvDigFltrTimebaseRateEx(taskHandle: TaskHandle,
                                                 deviceNames:
                                                     *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetAIConvDigSyncEnable(taskHandle: TaskHandle,
                                       data: *mut bool32) -> int32;
    pub fn DAQmxSetAIConvDigSyncEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetAIConvDigSyncEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAIConvDigSyncEnableEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetAIConvDigSyncEnableEx(taskHandle: TaskHandle,
                                         deviceNames:
                                             *mut ::std::os::raw::c_char,
                                         data: bool32) -> int32;
    pub fn DAQmxResetAIConvDigSyncEnableEx(taskHandle: TaskHandle,
                                           deviceNames:
                                               *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetMasterTimebaseRate(taskHandle: TaskHandle,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetMasterTimebaseRate(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetMasterTimebaseRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetMasterTimebaseSrc(taskHandle: TaskHandle,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetMasterTimebaseSrc(taskHandle: TaskHandle,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetMasterTimebaseSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefClkRate(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetRefClkRate(taskHandle: TaskHandle, data: float64) -> int32;
    pub fn DAQmxResetRefClkRate(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefClkSrc(taskHandle: TaskHandle,
                             data: *mut ::std::os::raw::c_char,
                             bufferSize: uInt32) -> int32;
    pub fn DAQmxSetRefClkSrc(taskHandle: TaskHandle,
                             data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetRefClkSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSyncPulseSrc(taskHandle: TaskHandle,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxSetSyncPulseSrc(taskHandle: TaskHandle,
                                data: *const ::std::os::raw::c_char) -> int32;
    pub fn DAQmxResetSyncPulseSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSyncPulseSyncTime(taskHandle: TaskHandle,
                                     data: *mut float64) -> int32;
    pub fn DAQmxGetSyncPulseMinDelayToStart(taskHandle: TaskHandle,
                                            data: *mut float64) -> int32;
    pub fn DAQmxSetSyncPulseMinDelayToStart(taskHandle: TaskHandle,
                                            data: float64) -> int32;
    pub fn DAQmxResetSyncPulseMinDelayToStart(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetSyncPulseResetTime(taskHandle: TaskHandle,
                                      data: *mut float64) -> int32;
    pub fn DAQmxGetSyncPulseResetDelay(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetSyncPulseResetDelay(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetSyncPulseResetDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSyncPulseTerm(taskHandle: TaskHandle,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetSyncClkInterval(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetSyncClkInterval(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetSyncClkInterval(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetSampTimingEngine(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxSetSampTimingEngine(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetSampTimingEngine(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetStartTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetStartTrigType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetStartTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetStartTrigTerm(taskHandle: TaskHandle,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDigEdgeStartTrigSrc(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeStartTrigSrc(taskHandle: TaskHandle,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeStartTrigEdge(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeStartTrigEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternStartTrigSrc(taskHandle: TaskHandle,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternStartTrigSrc(taskHandle: TaskHandle,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigPatternStartTrigPattern(taskHandle: TaskHandle,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternStartTrigPattern(taskHandle: TaskHandle,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternStartTrigPattern(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternStartTrigWhen(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetDigPatternStartTrigWhen(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetDigPatternStartTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigSrc(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigSrc(taskHandle: TaskHandle,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle,
                                         data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle,
                                         data: float64) -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle,
                                                         data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle:
                                                               TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       data:
                                                           *mut ::std::os::raw::c_char,
                                                       bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                       data:
                                                           *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                  data: bool32) -> int32;
    pub fn DAQmxResetAnlgEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigSrc(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigSrc(taskHandle: TaskHandle,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinStartTrigWhen(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinStartTrigTop(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigTop(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigTop(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinStartTrigBtm(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigBtm(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigBtm(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinStartTrigCoupling(taskHandle: TaskHandle,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigCoupling(taskHandle: TaskHandle,
                                            data: int32) -> int32;
    pub fn DAQmxResetAnlgWinStartTrigCoupling(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinStartTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetStartTrigDelay(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetStartTrigDelay(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetStartTrigDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetStartTrigDelayUnits(taskHandle: TaskHandle,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetStartTrigDelayUnits(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetStartTrigDelayUnits(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetStartTrigRetriggerable(taskHandle: TaskHandle,
                                          data: *mut bool32) -> int32;
    pub fn DAQmxSetStartTrigRetriggerable(taskHandle: TaskHandle,
                                          data: bool32) -> int32;
    pub fn DAQmxResetStartTrigRetriggerable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetRefTrigType(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetRefTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefTrigPretrigSamples(taskHandle: TaskHandle,
                                         data: *mut uInt32) -> int32;
    pub fn DAQmxSetRefTrigPretrigSamples(taskHandle: TaskHandle, data: uInt32)
     -> int32;
    pub fn DAQmxResetRefTrigPretrigSamples(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefTrigTerm(taskHandle: TaskHandle,
                               data: *mut ::std::os::raw::c_char,
                               bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDigEdgeRefTrigSrc(taskHandle: TaskHandle,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeRefTrigSrc(taskHandle: TaskHandle,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeRefTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeRefTrigEdge(taskHandle: TaskHandle,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeRefTrigEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigEdgeRefTrigEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      data: float64) -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    data:
                                                        *mut ::std::os::raw::c_char,
                                                    bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    data:
                                                        *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     data: float64) -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternRefTrigSrc(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternRefTrigSrc(taskHandle: TaskHandle,
                                        data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternRefTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigPatternRefTrigPattern(taskHandle: TaskHandle,
                                            data: *mut ::std::os::raw::c_char,
                                            bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternRefTrigPattern(taskHandle: TaskHandle,
                                            data:
                                                *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternRefTrigPattern(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternRefTrigWhen(taskHandle: TaskHandle,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetDigPatternRefTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigPatternRefTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigSrc(taskHandle: TaskHandle,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigSrc(taskHandle: TaskHandle,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle,
                                      data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      data: float64) -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigSrc(taskHandle: TaskHandle,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigSrc(taskHandle: TaskHandle,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigWhen(taskHandle: TaskHandle,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigTop(taskHandle: TaskHandle,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigTop(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigTop(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigBtm(taskHandle: TaskHandle,
                                     data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigBtm(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigBtm(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigCoupling(taskHandle: TaskHandle,
                                          data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigCoupling(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigCoupling(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                      data: float64) -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    data:
                                                        *mut ::std::os::raw::c_char,
                                                    bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                    data:
                                                        *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                     data: float64) -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetRefTrigAutoTrigEnable(taskHandle: TaskHandle,
                                         data: *mut bool32) -> int32;
    pub fn DAQmxSetRefTrigAutoTrigEnable(taskHandle: TaskHandle, data: bool32)
     -> int32;
    pub fn DAQmxResetRefTrigAutoTrigEnable(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetRefTrigAutoTriggered(taskHandle: TaskHandle,
                                        data: *mut bool32) -> int32;
    pub fn DAQmxGetRefTrigDelay(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetRefTrigDelay(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetRefTrigDelay(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAdvTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetAdvTrigType(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetAdvTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeAdvTrigSrc(taskHandle: TaskHandle,
                                     data: *mut ::std::os::raw::c_char,
                                     bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeAdvTrigSrc(taskHandle: TaskHandle,
                                     data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeAdvTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeAdvTrigEdge(taskHandle: TaskHandle,
                                      data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeAdvTrigEdge(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigEdgeAdvTrigEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: *mut bool32) -> int32;
    pub fn DAQmxSetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle,
                                               data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetHshkTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetHshkTrigType(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetHshkTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetInterlockedHshkTrigSrc(taskHandle: TaskHandle,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetInterlockedHshkTrigSrc(taskHandle: TaskHandle,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetInterlockedHshkTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetInterlockedHshkTrigAssertedLvl(taskHandle: TaskHandle,
                                                  data: *mut int32) -> int32;
    pub fn DAQmxSetInterlockedHshkTrigAssertedLvl(taskHandle: TaskHandle,
                                                  data: int32) -> int32;
    pub fn DAQmxResetInterlockedHshkTrigAssertedLvl(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetPauseTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetPauseTrigType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetPauseTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetPauseTrigTerm(taskHandle: TaskHandle,
                                 data: *mut ::std::os::raw::c_char,
                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigSrc(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigSrc(taskHandle: TaskHandle,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle,
                                            data: int32) -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigSrc(taskHandle: TaskHandle,
                                       data: *mut ::std::os::raw::c_char,
                                       bufferSize: uInt32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigSrc(taskHandle: TaskHandle,
                                       data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigWhen(taskHandle: TaskHandle,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigTop(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigTop(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigTop(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigBtm(taskHandle: TaskHandle,
                                       data: *mut float64) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigBtm(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigBtm(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle,
                                            data: *mut int32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle,
                                            data: int32) -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                            TaskHandle,
                                                        data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                              TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *mut ::std::os::raw::c_char,
                                                      bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                      data:
                                                          *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetAnlgWinPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: *mut bool32) -> int32;
    pub fn DAQmxSetAnlgWinPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                 data: bool32) -> int32;
    pub fn DAQmxResetAnlgWinPauseTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigSrc(taskHandle: TaskHandle,
                                      data: *mut ::std::os::raw::c_char,
                                      bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigLvlPauseTrigSrc(taskHandle: TaskHandle,
                                      data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigLvlPauseTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigLvlPauseTrigWhen(taskHandle: TaskHandle,
                                       data: *mut int32) -> int32;
    pub fn DAQmxSetDigLvlPauseTrigWhen(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetDigLvlPauseTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle: TaskHandle,
                                                       data: float64)
     -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle:
                                                             TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     data:
                                                         *mut ::std::os::raw::c_char,
                                                     bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle,
                                                     data:
                                                         *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle,
                                                      data: float64) -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle:
                                                            TaskHandle)
     -> int32;
    pub fn DAQmxGetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                data: *mut bool32) -> int32;
    pub fn DAQmxSetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle,
                                                data: bool32) -> int32;
    pub fn DAQmxResetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternPauseTrigSrc(taskHandle: TaskHandle,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternPauseTrigSrc(taskHandle: TaskHandle,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternPauseTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigPatternPauseTrigPattern(taskHandle: TaskHandle,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigPatternPauseTrigPattern(taskHandle: TaskHandle,
                                              data:
                                                  *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigPatternPauseTrigPattern(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigPatternPauseTrigWhen(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetDigPatternPauseTrigWhen(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetDigPatternPauseTrigWhen(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetArmStartTrigType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetArmStartTrigType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetArmStartTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetArmStartTerm(taskHandle: TaskHandle,
                                data: *mut ::std::os::raw::c_char,
                                bufferSize: uInt32) -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigSrc(taskHandle: TaskHandle,
                                          data: *mut ::std::os::raw::c_char,
                                          bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigSrc(taskHandle: TaskHandle,
                                          data: *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigSrc(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle,
                                           data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle,
                                           data: int32) -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                    data: *mut bool32)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrEnable(taskHandle: TaskHandle,
                                                    data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle:
                                                               TaskHandle,
                                                           data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle:
                                                               TaskHandle,
                                                           data: float64)
     -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle:
                                                                 TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle:
                                                             TaskHandle,
                                                         data:
                                                             *mut ::std::os::raw::c_char,
                                                         bufferSize: uInt32)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle:
                                                             TaskHandle,
                                                         data:
                                                             *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle:
                                                               TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle:
                                                              TaskHandle,
                                                          data: *mut float64)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle:
                                                              TaskHandle,
                                                          data: float64)
     -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeArmStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                    data: *mut bool32)
     -> int32;
    pub fn DAQmxSetDigEdgeArmStartTrigDigSyncEnable(taskHandle: TaskHandle,
                                                    data: bool32) -> int32;
    pub fn DAQmxResetDigEdgeArmStartTrigDigSyncEnable(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetTriggerSyncType(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetTriggerSyncType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetTriggerSyncType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWatchdogTimeout(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetWatchdogTimeout(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetWatchdogTimeout(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWatchdogExpirTrigType(taskHandle: TaskHandle,
                                         data: *mut int32) -> int32;
    pub fn DAQmxSetWatchdogExpirTrigType(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetWatchdogExpirTrigType(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWatchdogExpirTrigTrigOnNetworkConnLoss(taskHandle:
                                                              TaskHandle,
                                                          data: *mut bool32)
     -> int32;
    pub fn DAQmxSetWatchdogExpirTrigTrigOnNetworkConnLoss(taskHandle:
                                                              TaskHandle,
                                                          data: bool32)
     -> int32;
    pub fn DAQmxResetWatchdogExpirTrigTrigOnNetworkConnLoss(taskHandle:
                                                                TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeWatchdogExpirTrigSrc(taskHandle: TaskHandle,
                                               data:
                                                   *mut ::std::os::raw::c_char,
                                               bufferSize: uInt32) -> int32;
    pub fn DAQmxSetDigEdgeWatchdogExpirTrigSrc(taskHandle: TaskHandle,
                                               data:
                                                   *const ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxResetDigEdgeWatchdogExpirTrigSrc(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle,
                                                data: *mut int32) -> int32;
    pub fn DAQmxSetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle,
                                                data: int32) -> int32;
    pub fn DAQmxResetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle)
     -> int32;
    pub fn DAQmxGetWatchdogDOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetWatchdogDOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetWatchdogDOExpirState(taskHandle: TaskHandle,
                                          lines: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetWatchdogAOOutputType(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetWatchdogAOOutputType(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetWatchdogAOOutputType(taskHandle: TaskHandle,
                                          lines: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetWatchdogAOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: *mut float64) -> int32;
    pub fn DAQmxSetWatchdogAOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: float64) -> int32;
    pub fn DAQmxResetWatchdogAOExpirState(taskHandle: TaskHandle,
                                          lines: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetWatchdogCOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: *mut int32) -> int32;
    pub fn DAQmxSetWatchdogCOExpirState(taskHandle: TaskHandle,
                                        lines: *mut ::std::os::raw::c_char,
                                        data: int32) -> int32;
    pub fn DAQmxResetWatchdogCOExpirState(taskHandle: TaskHandle,
                                          lines: *mut ::std::os::raw::c_char)
     -> int32;
    pub fn DAQmxGetWatchdogHasExpired(taskHandle: TaskHandle,
                                      data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteRelativeTo(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetWriteRelativeTo(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetWriteRelativeTo(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteOffset(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetWriteOffset(taskHandle: TaskHandle, data: int32) -> int32;
    pub fn DAQmxResetWriteOffset(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteRegenMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetWriteRegenMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetWriteRegenMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteCurrWritePos(taskHandle: TaskHandle,
                                     data: *mut uInt64) -> int32;
    pub fn DAQmxGetWriteOvercurrentChansExist(taskHandle: TaskHandle,
                                              data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteOvercurrentChans(taskHandle: TaskHandle,
                                         data: *mut ::std::os::raw::c_char,
                                         bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteOvertemperatureChansExist(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteOvertemperatureChans(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteExternalOvervoltageChansExist(taskHandle: TaskHandle,
                                                      data: *mut bool32)
     -> int32;
    pub fn DAQmxGetWriteExternalOvervoltageChans(taskHandle: TaskHandle,
                                                 data:
                                                     *mut ::std::os::raw::c_char,
                                                 bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteOverloadedChansExist(taskHandle: TaskHandle,
                                             data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteOverloadedChans(taskHandle: TaskHandle,
                                        data: *mut ::std::os::raw::c_char,
                                        bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteOpenCurrentLoopChansExist(taskHandle: TaskHandle,
                                                  data: *mut bool32) -> int32;
    pub fn DAQmxGetWriteOpenCurrentLoopChans(taskHandle: TaskHandle,
                                             data:
                                                 *mut ::std::os::raw::c_char,
                                             bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWritePowerSupplyFaultChansExist(taskHandle: TaskHandle,
                                                   data: *mut bool32)
     -> int32;
    pub fn DAQmxGetWritePowerSupplyFaultChans(taskHandle: TaskHandle,
                                              data:
                                                  *mut ::std::os::raw::c_char,
                                              bufferSize: uInt32) -> int32;
    pub fn DAQmxGetWriteSpaceAvail(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetWriteTotalSampPerChanGenerated(taskHandle: TaskHandle,
                                                  data: *mut uInt64) -> int32;
    pub fn DAQmxGetWriteAccessoryInsertionOrRemovalDetected(taskHandle:
                                                                TaskHandle,
                                                            data: *mut bool32)
     -> int32;
    pub fn DAQmxGetWriteDevsWithInsertedOrRemovedAccessories(taskHandle:
                                                                 TaskHandle,
                                                             data:
                                                                 *mut ::std::os::raw::c_char,
                                                             bufferSize:
                                                                 uInt32)
     -> int32;
    pub fn DAQmxGetWriteRawDataWidth(taskHandle: TaskHandle,
                                     data: *mut uInt32) -> int32;
    pub fn DAQmxGetWriteNumChans(taskHandle: TaskHandle, data: *mut uInt32)
     -> int32;
    pub fn DAQmxGetWriteWaitMode(taskHandle: TaskHandle, data: *mut int32)
     -> int32;
    pub fn DAQmxSetWriteWaitMode(taskHandle: TaskHandle, data: int32)
     -> int32;
    pub fn DAQmxResetWriteWaitMode(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteSleepTime(taskHandle: TaskHandle, data: *mut float64)
     -> int32;
    pub fn DAQmxSetWriteSleepTime(taskHandle: TaskHandle, data: float64)
     -> int32;
    pub fn DAQmxResetWriteSleepTime(taskHandle: TaskHandle) -> int32;
    pub fn DAQmxGetWriteDigitalLinesBytesPerChan(taskHandle: TaskHandle,
                                                 data: *mut uInt32) -> int32;
    pub fn DAQmxGetSampClkTimingResponseMode(taskHandle: TaskHandle,
                                             data: *mut int32) -> int32;
    pub fn DAQmxSetSampClkTimingResponseMode(taskHandle: TaskHandle,
                                             data: int32) -> int32;
    pub fn DAQmxResetSampClkTimingResponseMode(taskHandle: TaskHandle)
     -> int32;
}
}
